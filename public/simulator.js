/* eslint-disable */

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = true;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document !== 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  if (!(typeof window === 'object' || typeof importScripts === 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {

// include: web_or_worker_shell_read.js


  read_ = function(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) {
  Object.defineProperty(Module, 'arguments', {
    configurable: true,
    get: function() {
      abort('Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) {
  Object.defineProperty(Module, 'thisProgram', {
    configurable: true,
    get: function() {
      abort('Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) {
  Object.defineProperty(Module, 'quit', {
    configurable: true,
    get: function() {
      abort('Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) {
  Object.defineProperty(Module, 'read', {
    configurable: true,
    get: function() {
      abort('Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) {
  Object.defineProperty(Module, 'readAsync', {
    configurable: true,
    get: function() {
      abort('Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) {
  Object.defineProperty(Module, 'readBinary', {
    configurable: true,
    get: function() {
      abort('Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) {
  Object.defineProperty(Module, 'setWindowTitle', {
    configurable: true,
    get: function() {
      abort('Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';




var STACK_ALIGN = 16;

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

// include: runtime_functions.js


// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

function getEmptyTableSlot() {
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    return freeTableIndexes.pop();
  }
  // Grow the table
  try {
    wasmTable.grow(1);
  } catch (err) {
    if (!(err instanceof RangeError)) {
      throw err;
    }
    throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
  }
  return wasmTable.length - 1;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < wasmTable.length; i++) {
      var item = wasmTable.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.

  var ret = getEmptyTableSlot();

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    wasmTable.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction: ' + func);
    var wrapped = convertJsFunctionToWasm(func, sig);
    wasmTable.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunction(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

// end include: runtime_functions.js
// include: runtime_debug.js


// end include: runtime_debug.js
function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) {
  Object.defineProperty(Module, 'wasmBinary', {
    configurable: true,
    get: function() {
      abort('Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) {
  Object.defineProperty(Module, 'noExitRuntime', {
    configurable: true,
    get: function() {
      abort('Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

// include: wasm2js.js


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(asmLibraryArg) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "");
  base64DecodeToExistingUint8Array(bufferView, 17320, "AAAAAAAAbebs3gUACwAAAAUAAAAAAAAAAAAAADIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADMAAAA0AAAAOEcAAAAEAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAr/////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALhDAAAAAAAABQAAAAAAAAAAAAAANQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMwAAADYAAABASwAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAA//////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcFVQAA==");
  base64DecodeToExistingUint8Array(bufferView
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
function asmFunc(env) {
 var memory = env.memory;
 var buffer = memory.buffer;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var abort = env.abort;
 var nan = NaN;
 var infinity = Infinity;
 var fimport$0 = env.__cxa_atexit;
 var fimport$1 = env.abort;
 var fimport$2 = env.__cxa_allocate_exception;
 var fimport$3 = env.__cxa_throw;
 var fimport$4 = env._embind_register_function;
 var fimport$5 = env._embind_register_void;
 var fimport$6 = env._embind_register_bool;
 var fimport$7 = env._embind_register_std_string;
 var fimport$8 = env._embind_register_std_wstring;
 var fimport$9 = env._embind_register_emval;
 var fimport$10 = env._embind_register_integer;
 var fimport$11 = env._embind_register_float;
 var fimport$12 = env._embind_register_memory_view;
 var fimport$13 = env.fd_close;
 var fimport$14 = env.fd_write;
 var fimport$15 = env.environ_sizes_get;
 var fimport$16 = env.environ_get;
 var fimport$17 = env.strftime_l;
 var fimport$18 = env.emscripten_resize_heap;
 var fimport$19 = env.emscripten_memcpy_big;
 var fimport$20 = env.setTempRet0;
 var fimport$21 = env.fd_seek;
 var global$0 = 5264752;
 var global$1 = 0;
 var global$2 = 0;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  $1809();
  $870();
  $424();
  $543();
  $674();
 }
 
 function $1() {
  FUNCTION_TABLE[1 | 0](17876) | 0;
  return;
 }
 
 function $2() {
  $3(17912 | 0) | 0;
  return;
 }
 
 function $3($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$0 = 0;
  HEAP32[$4_1 >> 2] = 1;
  HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 2;
  return $4_1 | 0;
 }
 
 function $4() {
  $5(17928 | 0) | 0;
  fimport$0(2 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $5($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $6($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7(17928 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $7($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $8() {
  $9(18088 | 0) | 0;
  fimport$0(3 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $9($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $11($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $10($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $12(18088 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $11($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if ((HEAPU8[(0 + 18136 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   $104();
   $28(17912 | 0);
   HEAP8[(0 + 18136 | 0) >> 0] = 1;
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $12($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $13($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $13($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if ((HEAPU8[(0 + 18137 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   $115();
   $29(17912 | 0);
   HEAP8[(0 + 18137 | 0) >> 0] = 1;
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $14() {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $17($2_1 + 8 | 0 | 0, 17872 | 0) | 0;
  $18(18112 | 0);
  $689(HEAP32[(0 + 4796 | 0) >> 2] | 0 | 0) | 0;
  $689(HEAP32[(0 + 4792 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return;
 }
 
 function $15() {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $17($2_1 + 8 | 0 | 0, 17872 | 0) | 0;
  $18(18124 | 0);
  global$0 = $2_1 + 16 | 0;
  return;
 }
 
 function $16($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP8[($3_1 + 15 | 0) >> 0] = $0_1;
  $17($3_1 + 8 | 0 | 0, 17872 | 0) | 0;
  HEAP8[(0 + 17881 | 0) >> 0] = (HEAPU8[($3_1 + 15 | 0) >> 0] | 0) & 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $17($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $18($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = $99(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $100(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!(($101($3_1 + 16 | 0 | 0, $3_1 + 8 | 0 | 0) | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $102($3_1 + 16 | 0 | 0) | 0;
    FUNCTION_TABLE[HEAP32[(HEAP32[($3_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0);
    $103($3_1 + 16 | 0 | 0) | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $19($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $27_1 = 0, $28_1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $3_1;
  $16(1 & 1 | 0 | 0);
  label$1 : {
   label$2 : {
    if (!((HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    if (!(((HEAPU8[(HEAP32[($6_1 + 44 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $27_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    $28_1 = HEAP32[($6_1 + 40 | 0) >> 2] | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
    HEAP32[($6_1 + 4 | 0) >> 2] = $28_1;
    HEAP32[$6_1 >> 2] = $27_1;
    $1937(1024 | 0, $6_1 | 0) | 0;
    break label$1;
   }
   HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
   $1937(1044 | 0, $6_1 + 16 | 0 | 0) | 0;
  }
  $14();
  $1937(1057 | 0, 0 | 0) | 0;
  $14();
  $15();
  fimport$1();
  abort();
 }
 
 function $20($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $19(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0);
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $21($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $22($5_1 | 0, $4_1 + 16 | 0 | 0, $4_1 + 8 | 0 | 0) | 0;
  $1831($5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, $23(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return $5_1 | 0;
 }
 
 function $22($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $341(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $399($6_1 | 0) | 0;
  $341(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $400($6_1 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $23($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $1940(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $24($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $125(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0) >>> 0 < 3 >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $25($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $26(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $26($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $56($55(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $27($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP8[($4_1 + 4 | 0) >> 0] = 0;
  HEAP8[($4_1 + 5 | 0) >> 0] = 0;
  HEAP8[($4_1 + 6 | 0) >> 0] = 1;
  HEAP8[($4_1 + 7 | 0) >> 0] = 1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = 1;
  HEAP32[($4_1 + 20 | 0) >> 2] = 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = 1;
  HEAP8[($4_1 + 8 | 0) >> 0] = 244;
  HEAP8[($4_1 + 9 | 0) >> 0] = 244;
  return $4_1 | 0;
 }
 
 function $28($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = $685(1070 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $29($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1924(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $30() {
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $60$hi = 0, $61$hi = 0, $64$hi = 0, $65$hi = 0, $67$hi = 0, $68$hi = 0, i64toi32_i32$4 = 0, $70$hi = 0, $73$hi = 0, $74$hi = 0, $48_1 = 0, $75$hi = 0, $76$hi = 0, $77$hi = 0, $49_1 = 0, $78$hi = 0, $79$hi = 0, $80$hi = 0, $81$hi = 0, $82$hi = 0, $83$hi = 0, $50_1 = 0, $84$hi = 0, $86$hi = 0, $87$hi = 0, $51_1 = 0, $88$hi = 0, $89$hi = 0, $90$hi = 0, $52_1 = 0, $91$hi = 0, $123_1 = 0, $127_1 = 0, $150_1 = 0, $173_1 = 0, $67_1 = 0, $179_1 = 0, $70_1 = 0, $187$hi = 0, $191_1 = 0, $75_1 = 0, $79_1 = 0, $208_1 = 0, $81_1 = 0, $219_1 = 0, $88_1 = 0, $234_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (!((((HEAP32[(0 + 18092 | 0) >> 2] | 0 | 0) != ($31() | 0 | 0) ^ -1 | 0) ^ -1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[(0 + 18092 | 0) >> 2] = $31() | 0;
   i64toi32_i32$0 = $32() | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $123_1 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$0 + 18096 | 0) >> 2] = $123_1;
   HEAP32[(i64toi32_i32$0 + 18100 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 18096 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 18100 | 0) >> 2] | 0;
   $127_1 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   HEAP32[(i64toi32_i32$1 + 18104 | 0) >> 2] = $127_1;
   HEAP32[(i64toi32_i32$1 + 18108 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 18096 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 18100 | 0) >> 2] | 0;
   label$2 : {
    if (!(($33(i64toi32_i32$0 | 0) | 0) >>> 0 < 10 >>> 0 & 1 | 0)) {
     break label$2
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 18096 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 18100 | 0) >> 2] | 0;
    $60$hi = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    $61$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $60$hi;
    i64toi32_i32$0 = $61$hi;
    i64toi32_i32$0 = $60$hi;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = $61$hi;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
    $150_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    HEAP32[(i64toi32_i32$2 + 18096 | 0) >> 2] = $150_1;
    HEAP32[(i64toi32_i32$2 + 18100 | 0) >> 2] = i64toi32_i32$1;
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 18104 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 18108 | 0) >> 2] | 0;
   label$3 : {
    if (!(($33(i64toi32_i32$1 | 0) | 0) >>> 0 < 10 >>> 0 & 1 | 0)) {
     break label$3
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 18104 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 18108 | 0) >> 2] | 0;
    $64$hi = i64toi32_i32$1;
    i64toi32_i32$1 = -1;
    $65$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $64$hi;
    i64toi32_i32$1 = $65$hi;
    i64toi32_i32$1 = $64$hi;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = $65$hi;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
    $173_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$0 + 18104 | 0) >> 2] = $173_1;
    HEAP32[(i64toi32_i32$0 + 18108 | 0) >> 2] = i64toi32_i32$2;
   }
  }
  i64toi32_i32$1 = 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 18096 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 18100 | 0) >> 2] | 0;
  $67_1 = i64toi32_i32$2;
  $67$hi = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 18104 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 18108 | 0) >> 2] | 0;
  $68$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $67$hi;
  i64toi32_i32$2 = $68$hi;
  $179_1 = i64toi32_i32$0;
  i64toi32_i32$2 = $67$hi;
  i64toi32_i32$1 = $67_1;
  i64toi32_i32$0 = $68$hi;
  i64toi32_i32$3 = $179_1;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$1 = $2_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$2 = 0;
  i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 18096 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 18100 | 0) >> 2] | 0;
  $70_1 = i64toi32_i32$5;
  $70$hi = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 18104 | 0) >> 2] | 0;
  i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 18108 | 0) >> 2] | 0;
  $187$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $70$hi;
  i64toi32_i32$5 = $187$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = $70$hi;
  i64toi32_i32$3 = $70_1;
  i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
  $191_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = 0;
  HEAP32[(i64toi32_i32$2 + 18104 | 0) >> 2] = $191_1;
  HEAP32[(i64toi32_i32$2 + 18108 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$5 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 18096 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 18100 | 0) >> 2] | 0;
  $73$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $74$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $73$hi;
  i64toi32_i32$2 = $74$hi;
  i64toi32_i32$2 = $73$hi;
  i64toi32_i32$5 = i64toi32_i32$1;
  i64toi32_i32$1 = $74$hi;
  i64toi32_i32$3 = 55;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
   $48_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
   $48_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
  }
  $75_1 = $48_1;
  $75$hi = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 18096 | 0) >> 2] | 0;
  i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 18100 | 0) >> 2] | 0;
  $76$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $77$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $76$hi;
  i64toi32_i32$5 = $77$hi;
  i64toi32_i32$5 = $76$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = $77$hi;
  i64toi32_i32$3 = 9;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $49_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
   $49_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
  }
  $78$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $75$hi;
  i64toi32_i32$1 = $78$hi;
  i64toi32_i32$1 = $75$hi;
  i64toi32_i32$5 = $75_1;
  i64toi32_i32$2 = $78$hi;
  i64toi32_i32$3 = $49_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $79_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  $79$hi = i64toi32_i32$2;
  i64toi32_i32$1 = 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 18104 | 0) >> 2] | 0;
  i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 18108 | 0) >> 2] | 0;
  $80$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $79$hi;
  i64toi32_i32$5 = $80$hi;
  $208_1 = i64toi32_i32$2;
  i64toi32_i32$5 = $79$hi;
  i64toi32_i32$1 = $79_1;
  i64toi32_i32$2 = $80$hi;
  i64toi32_i32$3 = $208_1;
  i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
  $81_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $81$hi = i64toi32_i32$2;
  i64toi32_i32$5 = 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 18104 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 18108 | 0) >> 2] | 0;
  $82$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $83$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $82$hi;
  i64toi32_i32$1 = $83$hi;
  i64toi32_i32$1 = $82$hi;
  i64toi32_i32$5 = i64toi32_i32$2;
  i64toi32_i32$2 = $83$hi;
  i64toi32_i32$3 = 14;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
   $50_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
   $50_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
  }
  $84$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $81$hi;
  i64toi32_i32$2 = $84$hi;
  i64toi32_i32$2 = $81$hi;
  i64toi32_i32$1 = $81_1;
  i64toi32_i32$5 = $84$hi;
  i64toi32_i32$3 = $50_1;
  i64toi32_i32$5 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
  $219_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = 0;
  HEAP32[(i64toi32_i32$1 + 18096 | 0) >> 2] = $219_1;
  HEAP32[(i64toi32_i32$1 + 18100 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$2 = 0;
  i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 18104 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 18108 | 0) >> 2] | 0;
  $86$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $87$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $86$hi;
  i64toi32_i32$1 = $87$hi;
  i64toi32_i32$1 = $86$hi;
  i64toi32_i32$2 = i64toi32_i32$5;
  i64toi32_i32$5 = $87$hi;
  i64toi32_i32$3 = 36;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   $51_1 = 0;
  } else {
   i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
   $51_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
  }
  $88_1 = $51_1;
  $88$hi = i64toi32_i32$5;
  i64toi32_i32$1 = 0;
  i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 18104 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 18108 | 0) >> 2] | 0;
  $89$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $90$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $89$hi;
  i64toi32_i32$2 = $90$hi;
  i64toi32_i32$2 = $89$hi;
  i64toi32_i32$1 = i64toi32_i32$5;
  i64toi32_i32$5 = $90$hi;
  i64toi32_i32$3 = 28;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $52_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $52_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $91$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $88$hi;
  i64toi32_i32$5 = $91$hi;
  i64toi32_i32$5 = $88$hi;
  i64toi32_i32$2 = $88_1;
  i64toi32_i32$1 = $91$hi;
  i64toi32_i32$3 = $52_1;
  i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
  $234_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = 0;
  HEAP32[(i64toi32_i32$2 + 18104 | 0) >> 2] = $234_1;
  HEAP32[(i64toi32_i32$2 + 18108 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$5 = $2_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
  global$0 = i64toi32_i32$5 + 16 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$1 | 0;
 }
 
 function $31() {
  return HEAP32[(0 + 17904 | 0) >> 2] | 0 | 0;
 }
 
 function $32() {
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $14$hi = 0, $15$hi = 0, $17_1 = 0, $16$hi = 0, $17$hi = 0, $19$hi = 0, $20$hi = 0, $18_1 = 0, $21$hi = 0, $22$hi = 0, $45_1 = 0, $48_1 = 0, $64_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!($34() | 0)) {
     break label$2
    }
    i64toi32_i32$1 = $34() | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $14$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $15$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$0 = $15$hi;
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = $15$hi;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $17_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $16$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $34() | 0;
    i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
    $17$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$1 = $17$hi;
    $45_1 = i64toi32_i32$2;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$0 = $17_1;
    i64toi32_i32$2 = $17$hi;
    i64toi32_i32$3 = $45_1;
    i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
    $48_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$0 = $2_1;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $48_1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = 0;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   $20$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$2 = $20$hi;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $35() | 0;
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $18_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $18_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $21$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $22$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $21$hi;
   i64toi32_i32$0 = $22$hi;
   i64toi32_i32$0 = $21$hi;
   i64toi32_i32$2 = $18_1;
   i64toi32_i32$1 = $22$hi;
   i64toi32_i32$3 = $35() | 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $64_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   i64toi32_i32$2 = $2_1;
   HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $64_1;
   HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  }
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
  global$0 = i64toi32_i32$0 + 16 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$1 | 0;
 }
 
 function $33($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) - (((HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 1 | 0) & -613566757 | 0) | 0) - (((HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 2 | 0) & 1227133513 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 3 | 0) | 0) & -954437177 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 6 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = (((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 12 | 0) | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 24 | 0) | 0) & 63 | 0;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $34() {
  return HEAP32[(0 + 17900 | 0) >> 2] | 0 | 0;
 }
 
 function $35() {
  var $2_1 = 0, $11_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $17($2_1 + 8 | 0 | 0, 18138 | 0) | 0;
  $11_1 = (($688() | 0) << 16 | 0) ^ ($688() | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $36($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $21$hi = 0, $14_1 = 0, $22$hi = 0, $21_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  i64toi32_i32$0 = $30() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $21_1 = i64toi32_i32$0;
  $21$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & 31 | 0)) {
     break label$2
    }
    $14_1 = (1 << ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & 31 | 0) | 0) - 1 | 0;
    break label$1;
   }
   $14_1 = -1;
  }
  i64toi32_i32$1 = 0;
  $22$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$1 = $22$hi;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$0 = $22$hi;
  i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
  global$0 = $3_1 + 16 | 0;
  return $21_1 & $14_1 | 0 | 0;
 }
 
 function $37($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $26_1 = 0, $32_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if ($38() | 0) {
     break label$2
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = -1;
   label$3 : {
    if (!(($38() | 0 | 0) != (1 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $36(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   }
   label$4 : {
    label$5 : {
     if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) & 31 | 0)) {
      break label$5
     }
     $26_1 = (1 << ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) & 31 | 0) | 0) - 1 | 0;
     break label$4;
    }
    $26_1 = -1;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) & $26_1 | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  }
  $32_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $32_1 | 0;
 }
 
 function $38() {
  return HEAP32[(0 + 17896 | 0) >> 2] | 0 | 0;
 }
 
 function $39($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $3_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, $30$hi = 0, $25$hi = 0, $18_1 = 0, $27$hi = 0, $28$hi = 0, $30_1 = 0, $66_1 = 0, $82$hi = 0, $93$hi = 0, $97_1 = 0, $101_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 20 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if ($38() | 0) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $3_1;
    HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = -1;
   i64toi32_i32$1 = $3_1;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = -1;
   HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
   label$3 : {
    if (!(($38() | 0 | 0) != (1 | 0) & 1 | 0)) {
     break label$3
    }
    i64toi32_i32$0 = $40(HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $66_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $3_1;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $66_1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
   }
   label$4 : {
    label$5 : {
     if (!((HEAP32[($3_1 + 20 | 0) >> 2] | 0) & 63 | 0)) {
      break label$5
     }
     i64toi32_i32$1 = 0;
     $25$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $82$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $25$hi;
     i64toi32_i32$1 = $82$hi;
     i64toi32_i32$2 = 1;
     i64toi32_i32$0 = $25$hi;
     i64toi32_i32$3 = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) & 63 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $18_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $27$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $28$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $27$hi;
     i64toi32_i32$0 = $28$hi;
     i64toi32_i32$0 = $27$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$2 = $28$hi;
     i64toi32_i32$3 = 1;
     i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
     i64toi32_i32$5 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
     $30_1 = i64toi32_i32$4;
     $30$hi = i64toi32_i32$5;
     break label$4;
    }
    i64toi32_i32$5 = -1;
    $30_1 = -1;
    $30$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $30$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
   $93$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $30$hi;
   i64toi32_i32$1 = $93$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $30$hi;
   i64toi32_i32$3 = $30_1;
   i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $97_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = $3_1;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $97_1;
   HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$5;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
   $101_1 = i64toi32_i32$5;
   i64toi32_i32$5 = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $101_1;
   HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
  }
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
  i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
  global$0 = i64toi32_i32$1 + 32 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$0 | 0;
 }
 
 function $40($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $19$hi = 0, $13$hi = 0, $14$hi = 0, $16_1 = 0, $16$hi = 0, $17$hi = 0, $19_1 = 0, $13_1 = 0, $46$hi = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  i64toi32_i32$0 = $30() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $13_1 = i64toi32_i32$0;
  $13$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0) & 63 | 0)) {
     break label$2
    }
    i64toi32_i32$1 = 0;
    $14$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $46$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$1 = $46$hi;
    i64toi32_i32$2 = 1;
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$3 = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $16_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $16_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $16$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $17$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$0 = $17$hi;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$2 = $17$hi;
    i64toi32_i32$3 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
    i64toi32_i32$5 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$5;
    break label$1;
   }
   i64toi32_i32$5 = -1;
   $19_1 = -1;
   $19$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $19$hi;
  i64toi32_i32$5 = $13$hi;
  i64toi32_i32$5 = $19$hi;
  i64toi32_i32$5 = $13$hi;
  i64toi32_i32$0 = $13_1;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$3 = $19_1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  global$0 = $3_1 + 16 | 0;
  i64toi32_i32$0 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $41($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $22($4_1 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $24($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $42($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $77(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $43($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $402($5_1 | 0, $4_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $24($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $44($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($48($4_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $9_1 = $49($4_1 | 0) | 0;
    break label$1;
   }
   $9_1 = $50($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $45($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $1846(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $46($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $51($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $47($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $44(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $48($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $16_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $16_1 = (((HEAPU8[(($124(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] | 0) & 255 | 0) & 128 | 0 | 0) != (0 | 0) & 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $49($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[(($124(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $50($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = (HEAPU8[(($124(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] | 0) & 255 | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $51($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $14_1 = 0, $16_1 = 0, $15_1 = 0, i64toi32_i32$1 = 0, $71_1 = 0, $23_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   if (!(($48($5_1 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   $409($407($5_1 | 0) | 0 | 0, $119($5_1 | 0) | 0 | 0, $408($5_1 | 0) | 0 | 0);
  }
  $410($5_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0);
  $14_1 = $125(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  $15_1 = $125($5_1 | 0) | 0;
  i64toi32_i32$0 = HEAP32[$14_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
  $71_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $15_1;
  HEAP32[i64toi32_i32$0 >> 2] = $71_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $16_1 = 8;
  HEAP32[(i64toi32_i32$0 + $16_1 | 0) >> 2] = HEAP32[($14_1 + $16_1 | 0) >> 2] | 0;
  $123(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, 0 | 0);
  $23_1 = $122(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP8[($4_1 + 15 | 0) >> 0] = 0;
  $120($23_1 | 0, $4_1 + 15 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $52($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = ($26(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) + (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $53($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $11_1 = ($44(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) == (0 | 0) & 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $54($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $118($4_1 | 0);
  label$1 : {
   label$2 : {
    if (!(($48($4_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $8_1 = $119($4_1 | 0) | 0;
    HEAP8[($3_1 + 11 | 0) >> 0] = 0;
    $120($8_1 | 0, $3_1 + 11 | 0 | 0);
    $121($4_1 | 0, 0 | 0);
    break label$1;
   }
   $14_1 = $122($4_1 | 0) | 0;
   HEAP8[($3_1 + 10 | 0) >> 0] = 0;
   $120($14_1 | 0, $3_1 + 10 | 0 | 0);
   $123($4_1 | 0, 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $55($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($48($4_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $9_1 = $416($4_1 | 0) | 0;
    break label$1;
   }
   $9_1 = $417($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $56($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $57() {
  return $58() | 0 | 0;
 }
 
 function $58() {
  return -1 | 0;
 }
 
 function $59($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $60($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $130(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $61($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $59($5_1 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    $131($5_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) - (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0 | 0);
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    $132($5_1 | 0, (HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
   }
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $62($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $134($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $63($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $134($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $64($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
  $133(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $65($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $66($5_1 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    $135($5_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) - (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0 | 0);
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    $136($5_1 | 0, (HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
   }
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $66($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $67($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0;
 }
 
 function $68($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $74($3_1 + 8 | 0 | 0, $73(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $69($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $74($3_1 + 8 | 0 | 0, ($73($4_1 | 0) | 0) + ($44($4_1 | 0) | 0) | 0 | 0) | 0;
  $11_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $70($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = (($75(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) ^ -1 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $71($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $72($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
  return $4_1 | 0;
 }
 
 function $73($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($48($4_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $9_1 = $119($4_1 | 0) | 0;
    break label$1;
   }
   $9_1 = $122($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $74($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $75($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $13_1 = ($82(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) == ($82(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $13_1 | 0;
 }
 
 function $76($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = ($73(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) + (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $77($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $403(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $78($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = $82(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $79($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = ($289(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) - ($82(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $80($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  $420($4_1 + 8 | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
  $14_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $81($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $82($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $83($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $87($3_1 + 8 | 0 | 0, $55(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $84($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $87($3_1 + 8 | 0 | 0, ($55($4_1 | 0) | 0) + ($44($4_1 | 0) | 0) | 0 | 0) | 0;
  $11_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $85($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $86($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
  return $4_1 | 0;
 }
 
 function $87($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $88($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $17($3_1 + 8 | 0 | 0, 17872 | 0) | 0;
  HEAP32[(0 + 17876 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!(HEAP32[($3_1 + 12 | 0) >> 2] | 0)) {
    break label$1
   }
   $1937(1090 | 0, 0 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $89($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0 - (HEAP32[($3_1 + 12 | 0) >> 2] | 0) | 0;
  }
  $17($3_1 + 8 | 0 | 0, 17872 | 0) | 0;
  HEAP8[(0 + 17884 | 0) >> 0] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $90($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0 - (HEAP32[($3_1 + 12 | 0) >> 2] | 0) | 0;
  }
  $17($3_1 + 8 | 0 | 0, 17872 | 0) | 0;
  HEAP8[(0 + 17885 | 0) >> 0] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $91() {
  $92(18112 | 0) | 0;
  fimport$0(4 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $92($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $94($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $93($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $95(18112 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $94($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $315($4_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  $421($4_1 + 8 | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $95($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $96($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $96($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $290($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $97() {
  $92(18124 | 0) | 0;
  fimport$0(5 | 0, 0 | 0, 1024 | 0) | 0;
  return;
 }
 
 function $98($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $95(18124 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $99($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $318(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $6_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $100($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $319(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $6_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $101($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = (($314(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) ^ -1 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $102($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = ($296(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0) + 8 | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $103($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $104() {
  $105(17928 | 0) | 0;
  return;
 }
 
 function $105($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $54_1 = 0, $65_1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 40 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
  HEAP32[($3_1 + 44 | 0) >> 2] = $4_1;
  $106($4_1 | 0) | 0;
  $107($4_1 + 16 | 0 | 0) | 0;
  $108($4_1 + 32 | 0 | 0) | 0;
  HEAP8[($4_1 + 44 | 0) >> 0] = 0;
  $109($4_1 + 48 | 0 | 0) | 0;
  $110($4_1 + 64 | 0 | 0) | 0;
  $111($4_1 + 80 | 0 | 0) | 0;
  $112($4_1 + 104 | 0 | 0) | 0;
  HEAP32[($4_1 + 116 | 0) >> 2] = 0;
  $113($4_1 + 124 | 0 | 0) | 0;
  $114($4_1 + 136 | 0 | 0) | 0;
  $114($4_1 + 148 | 0 | 0) | 0;
  $61($4_1 + 124 | 0 | 0, 31 | 0);
  HEAP32[($3_1 + 32 | 0) >> 2] = $62($4_1 + 124 | 0 | 0) | 0;
  HEAP32[($3_1 + 24 | 0) >> 2] = $63($4_1 + 124 | 0 | 0) | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = 0;
  $64(HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0, $3_1 + 20 | 0 | 0);
  $65($4_1 + 148 | 0 | 0, 30 | 0);
  HEAP32[($3_1 + 16 | 0) >> 2] = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = 1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 16 | 0) >> 2] | 0) >>> 0 < ($66($4_1 + 148 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $54_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    HEAP32[($67($4_1 + 148 | 0 | 0, HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] = $54_1;
    HEAP32[($3_1 + 16 | 0) >> 2] = (HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $65_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
  global$0 = $3_1 + 48 | 0;
  return $65_1 | 0;
 }
 
 function $106($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 99;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 20;
  return $4_1 | 0;
 }
 
 function $107($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $41($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $108($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $329($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $109($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $330($3_1 + 8 | 0 | 0) | 0;
  $331($4_1 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $110($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $332($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $111($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $333($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $112($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $334($3_1 + 8 | 0 | 0) | 0;
  $335($4_1 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $113($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $336($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $114($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $337($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $115() {
  $7(17928 | 0) | 0;
  return;
 }
 
 function $116($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $117($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $685(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $118($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $119($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($125(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $120($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP8[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 0] = HEAPU8[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 0] | 0;
  return;
 }
 
 function $121($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[(($125(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2] = $6_1;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $122($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $126($125(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $123($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP8[(($125(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] = $6_1;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $124($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $127(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $125($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $128(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $126($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $129(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $127($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $128($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $129($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $130($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(($137($4_1 + 8 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $14_1 = HEAP32[$4_1 >> 2] | 0;
    break label$1;
   }
   $14_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $131($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((((HEAP32[($138($5_1 | 0) | 0) >> 2] | 0) - (HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0) >> 2 | 0) >>> 0 >= (HEAP32[($4_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    $139($5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   HEAP32[($4_1 + 20 | 0) >> 2] = $140($5_1 | 0) | 0;
   $142($4_1 | 0, $141($5_1 | 0, ($59($5_1 | 0) | 0) + (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0 | 0) | 0 | 0, $59($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   $143($4_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
   $144($5_1 | 0, $4_1 | 0);
   $145($4_1 | 0) | 0;
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $132($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $146($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  HEAP32[($4_1 + 4 | 0) >> 2] = $59($5_1 | 0) | 0;
  $147($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  $148($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $133($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $19_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
  $19_1 = $215($5_1 + 32 | 0 | 0, $5_1 + 40 | 0 | 0) | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = $216(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, $19_1 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $134($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $222($4_1 + 8 | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
  $9_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $135($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((((HEAP32[($223($5_1 | 0) | 0) >> 2] | 0) - (HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0) >> 2 | 0) >>> 0 >= (HEAP32[($4_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    $224($5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   HEAP32[($4_1 + 20 | 0) >> 2] = $225($5_1 | 0) | 0;
   $227($4_1 | 0, $226($5_1 | 0, ($66($5_1 | 0) | 0) + (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0 | 0) | 0 | 0, $66($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   $228($4_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
   $229($5_1 | 0, $4_1 | 0);
   $230($4_1 | 0) | 0;
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $136($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $231($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  HEAP32[($4_1 + 4 | 0) >> 2] = $66($5_1 | 0) | 0;
  $232($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  $233($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $137($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  return (HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0) >>> 0 & 1 | 0 | 0;
 }
 
 function $138($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $149((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $139($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $150($4_1 + 8 | 0 | 0, $5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $152($140($5_1 | 0) | 0 | 0, $151(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0);
    HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0;
    continue label$2;
   };
  }
  $153($4_1 + 8 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $140($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $154((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $141($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $36_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $155($5_1 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $771($5_1 | 0);
   abort();
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $156($5_1 | 0) | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    break label$2;
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($60($4_1 + 8 | 0 | 0, $4_1 + 20 | 0 | 0) | 0) >> 2] | 0;
  }
  $36_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $36_1 | 0;
 }
 
 function $142($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $19_1 = 0, $26_1 = 0, $31_1 = 0, $33_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  $157($7_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($6_1 + 20 | 0) >> 2] | 0)) {
     break label$2
    }
    $19_1 = $159($158($7_1 | 0) | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   $19_1 = 0;
  }
  HEAP32[$7_1 >> 2] = $19_1;
  $26_1 = (HEAP32[$7_1 >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = $26_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = $26_1;
  $31_1 = (HEAP32[$7_1 >> 2] | 0) + ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($160($7_1 | 0) | 0) >> 2] = $31_1;
  $33_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $33_1 | 0;
 }
 
 function $143($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $161($4_1 + 8 | 0 | 0, $5_1 + 8 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $152($158($5_1 | 0) | 0 | 0, $151(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
    HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0;
    continue label$2;
   };
  }
  $162($4_1 + 8 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $144($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $163($5_1 | 0);
  $164($140($5_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $165($5_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $165($5_1 + 4 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0 | 0);
  $165($138($5_1 | 0) | 0 | 0, $160(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $166($5_1 | 0, $59($5_1 | 0) | 0 | 0);
  $167($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $145($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $168($4_1 | 0);
  label$1 : {
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $170($158($4_1 | 0) | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, $169($4_1 | 0) | 0 | 0);
  }
  $15_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $146($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $147($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $17_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $14_1 = $140($5_1 | 0) | 0;
    $17_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -4 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $17_1;
    $207($14_1 | 0, $151($17_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $148($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $201($5_1 | 0, $200($5_1 | 0) | 0 | 0, ($200($5_1 | 0) | 0) + (($156($5_1 | 0) | 0) << 2 | 0) | 0 | 0, ($200($5_1 | 0) | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, ($200($5_1 | 0) | 0) + (($59($5_1 | 0) | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $149($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $171(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $150($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0;
  return $6_1 | 0;
 }
 
 function $151($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $152($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $172(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $153($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $154($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $174(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $155($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $176($175(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $177() | 0;
  $15_1 = HEAP32[($178($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $156($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $179(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $157($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $190($6_1 | 0, $189(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $192($6_1 + 4 | 0 | 0, $191(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $158($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $194((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $159($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = $193(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $160($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $195((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $161($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = (HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  return $6_1 | 0;
 }
 
 function $162($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $163($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $201($4_1 | 0, $200($4_1 | 0) | 0 | 0, ($200($4_1 | 0) | 0) + (($156($4_1 | 0) | 0) << 2 | 0) | 0 | 0, ($200($4_1 | 0) | 0) + (($59($4_1 | 0) | 0) << 2 | 0) | 0 | 0, ($200($4_1 | 0) | 0) + (($156($4_1 | 0) | 0) << 2 | 0) | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $164($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $13_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) - (HEAP32[($6_1 + 24 | 0) >> 2] | 0) | 0) >> 2 | 0;
  $13_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
  HEAP32[$13_1 >> 2] = (HEAP32[$13_1 >> 2] | 0) + ((0 - (HEAP32[($6_1 + 12 | 0) >> 2] | 0) | 0) << 2 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1932(HEAP32[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
  }
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $165($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $16_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($202(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  $10_1 = HEAP32[($202(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = $10_1;
  $16_1 = HEAP32[($202($4_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = $16_1;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $166($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $201($5_1 | 0, $200($5_1 | 0) | 0 | 0, ($200($5_1 | 0) | 0) + (($156($5_1 | 0) | 0) << 2 | 0) | 0 | 0, ($200($5_1 | 0) | 0) + (($156($5_1 | 0) | 0) << 2 | 0) | 0 | 0, ($200($5_1 | 0) | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $167($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $168($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $203($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $169($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($205($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 2 | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $170($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $204(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $171($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $172($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $173(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $173($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = 0;
  return;
 }
 
 function $174($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $175($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $182((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $176($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $181(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $177() {
  return $183() | 0 | 0;
 }
 
 function $178($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $180(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $179($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($186($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 2 | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $180($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(($137($4_1 + 8 | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $14_1 = HEAP32[$4_1 >> 2] | 0;
    break label$1;
   }
   $14_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $181($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $5_1 = $184(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $182($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $185(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $183() {
  return 2147483647 | 0;
 }
 
 function $184($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 1073741823 | 0;
 }
 
 function $185($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $186($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $187((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $187($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $188(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $188($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $189($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $190($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $189(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $191($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $192($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $191(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $193($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $19_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  label$1 : {
   if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 > ($184(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $196(1230 | 0);
   abort();
  }
  $19_1 = $197((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 2 | 0 | 0, 4 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $19_1 | 0;
 }
 
 function $194($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $199((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $195($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $171(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $196($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = fimport$2(8 | 0) | 0;
  $198($5_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  fimport$3($5_1 | 0, 16728 | 0, 6 | 0);
  abort();
 }
 
 function $197($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = $1806(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $198($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $1864($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 16688 + 8 | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $199($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $200($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $151(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $201($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  return;
 }
 
 function $202($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $203($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $206(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $204($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $210(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0 | 0, 4 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $205($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $214((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $206($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $16_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $13_1 = $158($5_1 | 0) | 0;
    $16_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + -4 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $16_1;
    $207($13_1 | 0, $151($16_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $207($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $208(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $208($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $209(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $209($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $210($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $211(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $211($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $212(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $212($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $213(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $213($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $1807(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $214($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $188(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $215($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = (($219(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) - ($219(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) | 0) >> 2 | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $216($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0, $16_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  $12_1 = $217(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 24 | 0) >> 2] = $218(HEAP32[$5_1 >> 2] | 0 | 0, $12_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $16_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $16_1 | 0;
 }
 
 function $217($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $218($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $14_1 = 0, $32_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$1
    }
    $14_1 = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($220($5_1 + 16 | 0 | 0) | 0) >> 2] = $14_1;
    $221($5_1 + 16 | 0 | 0) | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + -1 | 0;
    continue label$2;
   };
  }
  HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  $32_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $32_1 | 0;
 }
 
 function $219($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $220($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $221($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 4 | 0;
  return $4_1 | 0;
 }
 
 function $222($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $223($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $234((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $224($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $235($4_1 + 8 | 0 | 0, $5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $237($225($5_1 | 0) | 0 | 0, $236(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0);
    HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0;
    continue label$2;
   };
  }
  $238($4_1 + 8 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $225($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $239((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $226($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $36_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $240($5_1 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $771($5_1 | 0);
   abort();
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $241($5_1 | 0) | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    break label$2;
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($60($4_1 + 8 | 0 | 0, $4_1 + 20 | 0 | 0) | 0) >> 2] | 0;
  }
  $36_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $36_1 | 0;
 }
 
 function $227($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $19_1 = 0, $26_1 = 0, $31_1 = 0, $33_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  $242($7_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($6_1 + 20 | 0) >> 2] | 0)) {
     break label$2
    }
    $19_1 = $244($243($7_1 | 0) | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   $19_1 = 0;
  }
  HEAP32[$7_1 >> 2] = $19_1;
  $26_1 = (HEAP32[$7_1 >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = $26_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = $26_1;
  $31_1 = (HEAP32[$7_1 >> 2] | 0) + ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($245($7_1 | 0) | 0) >> 2] = $31_1;
  $33_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $33_1 | 0;
 }
 
 function $228($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $246($4_1 + 8 | 0 | 0, $5_1 + 8 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $237($243($5_1 | 0) | 0 | 0, $236(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
    HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0;
    continue label$2;
   };
  }
  $247($4_1 + 8 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $229($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $248($5_1 | 0);
  $249($225($5_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $250($5_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $250($5_1 + 4 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0 | 0);
  $250($223($5_1 | 0) | 0 | 0, $245(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $251($5_1 | 0, $66($5_1 | 0) | 0 | 0);
  $252($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $230($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $253($4_1 | 0);
  label$1 : {
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $255($243($4_1 | 0) | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, $254($4_1 | 0) | 0 | 0);
  }
  $15_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $231($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $232($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $17_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $14_1 = $225($5_1 | 0) | 0;
    $17_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -4 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $17_1;
    $284($14_1 | 0, $236($17_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $233($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $278($5_1 | 0, $277($5_1 | 0) | 0 | 0, ($277($5_1 | 0) | 0) + (($241($5_1 | 0) | 0) << 2 | 0) | 0 | 0, ($277($5_1 | 0) | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, ($277($5_1 | 0) | 0) + (($66($5_1 | 0) | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $234($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $256(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $235($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0;
  return $6_1 | 0;
 }
 
 function $236($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $237($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $257(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $238($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $239($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $259(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $240($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $261($260(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $177() | 0;
  $15_1 = HEAP32[($178($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $241($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $262(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $242($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $270($6_1 | 0, $189(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $272($6_1 + 4 | 0 | 0, $271(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $243($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $274((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $244($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = $273(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $245($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $275((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $246($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = (HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  return $6_1 | 0;
 }
 
 function $247($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $248($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $278($4_1 | 0, $277($4_1 | 0) | 0 | 0, ($277($4_1 | 0) | 0) + (($241($4_1 | 0) | 0) << 2 | 0) | 0 | 0, ($277($4_1 | 0) | 0) + (($66($4_1 | 0) | 0) << 2 | 0) | 0 | 0, ($277($4_1 | 0) | 0) + (($241($4_1 | 0) | 0) << 2 | 0) | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $249($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $13_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) - (HEAP32[($6_1 + 24 | 0) >> 2] | 0) | 0) >> 2 | 0;
  $13_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
  HEAP32[$13_1 >> 2] = (HEAP32[$13_1 >> 2] | 0) + ((0 - (HEAP32[($6_1 + 12 | 0) >> 2] | 0) | 0) << 2 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$1
   }
   $1932(HEAP32[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
  }
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $250($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $16_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($279(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  $10_1 = HEAP32[($279(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = $10_1;
  $16_1 = HEAP32[($279($4_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = $16_1;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $251($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $278($5_1 | 0, $277($5_1 | 0) | 0 | 0, ($277($5_1 | 0) | 0) + (($241($5_1 | 0) | 0) << 2 | 0) | 0 | 0, ($277($5_1 | 0) | 0) + (($241($5_1 | 0) | 0) << 2 | 0) | 0 | 0, ($277($5_1 | 0) | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $252($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $253($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $280($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $254($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($282($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 2 | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $255($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $281(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $256($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $257($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $258(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $258($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = 0;
  return;
 }
 
 function $259($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $260($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $264((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $261($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $263(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $262($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($267($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 2 | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $263($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $5_1 = $265(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $264($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $266(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $265($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 1073741823 | 0;
 }
 
 function $266($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $267($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $268((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $268($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $269(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $269($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $270($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $189(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $271($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $272($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $271(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $273($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $19_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  label$1 : {
   if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 > ($265(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $196(1230 | 0);
   abort();
  }
  $19_1 = $197((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 2 | 0 | 0, 4 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $19_1 | 0;
 }
 
 function $274($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $276((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $275($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $256(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $276($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $277($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $236(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $278($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  return;
 }
 
 function $279($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $280($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $283(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $281($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $210(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0 | 0, 4 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $282($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $287((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $283($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $16_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $13_1 = $243($5_1 | 0) | 0;
    $16_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + -4 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $16_1;
    $284($13_1 | 0, $236($16_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $284($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $285(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $285($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $286(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $286($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $287($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $269(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $288($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $289($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $290($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   if (($291($4_1 | 0) | 0) & 1 | 0) {
    break label$1
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $292($4_1 | 0) | 0;
   HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   HEAP32[($3_1 + 16 | 0) >> 2] = $293($4_1 | 0) | 0;
   $294(HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($3_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0);
   HEAP32[($295($4_1 | 0) | 0) >> 2] = 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = $296(HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     $298(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0, $297((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0 | 0);
     $299(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0);
     continue label$3;
    };
   }
   $300($4_1 | 0);
  }
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $291($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $12_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $12_1 = (HEAP32[($301(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $12_1 | 0;
 }
 
 function $292($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $302((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $293($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $304($303(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $294($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[((HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[(HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $295($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $305((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $296($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $303(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $297($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $298($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $306(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $299($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $307(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $300($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $301($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $308((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $302($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $310(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $303($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $311(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $304($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $305($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $313(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $306($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  return;
 }
 
 function $307($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $210(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 4 | 0 | 0, 4 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $308($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $309(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $309($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $310($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $311($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $312(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $312($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $313($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $314($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0 | 0;
 }
 
 function $315($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = $304($303($4_1 | 0) | 0 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $304($303($4_1 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $316($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $317($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($316(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $318($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $320($3_1 + 8 | 0 | 0, HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $319($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $320($3_1 + 8 | 0 | 0, $293(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $320($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $321($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $322($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = $324($323((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $323($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $326(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $324($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $325(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $325($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $326($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $327($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = $324($328((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $328($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $326(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $329($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $338($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  $339($4_1 + 8 | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $330($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $331($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $344($5_1 + 4 | 0 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  $345($5_1 + 8 | 0 | 0, $4_1 + 4 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $15_1 = $346($5_1 | 0) | 0;
  HEAP32[($347($5_1 | 0) | 0) >> 2] = $15_1;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $332($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $355($3_1 + 8 | 0 | 0) | 0;
  $356($4_1 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $333($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $363($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $334($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $335($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $386($5_1 + 4 | 0 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  $387($5_1 + 8 | 0 | 0, $4_1 + 4 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $15_1 = $327($5_1 | 0) | 0;
  HEAP32[($388($5_1 | 0) | 0) >> 2] = $15_1;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $336($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $338($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  $393($4_1 + 8 | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $337($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $338($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  $396($4_1 + 8 | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $338($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $339($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $340($6_1 | 0, $189(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $341(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $342($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $340($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $189(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $341($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $342($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $343($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $343($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $344($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $348($4_1 | 0) | 0;
  $349($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $345($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $317($6_1 | 0, $316(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $351($6_1 | 0, $350(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $346($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = $324($352((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $347($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $348($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $353($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $349($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $354($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $350($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $351($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $350(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $352($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $326(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $353($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $354($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $355($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $356($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $357($5_1 + 4 | 0 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  $358($5_1 + 8 | 0 | 0, $4_1 + 4 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $15_1 = $322($5_1 | 0) | 0;
  HEAP32[($321($5_1 | 0) | 0) >> 2] = $15_1;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $357($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $348($4_1 | 0) | 0;
  $359($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $358($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $317($6_1 | 0, $316(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $361($6_1 | 0, $360(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $359($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $362($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $360($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $361($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $360(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $362($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $363($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  $364($4_1 | 0) | 0;
  $365($4_1 + 8 | 0 | 0) | 0;
  HEAP32[($3_1 + 24 | 0) >> 2] = 0;
  $366($4_1 + 12 | 0 | 0, $3_1 + 24 | 0 | 0, $3_1 + 16 | 0 | 0) | 0;
  HEAPF32[($3_1 + 12 | 0) >> 2] = Math_fround(1.0);
  $367($4_1 + 16 | 0 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $364($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  $368($4_1 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $365($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $369($4_1 | 0) | 0;
  $370($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $366($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $317($6_1 | 0, $316(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $341(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $371($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $367($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $373($6_1 | 0, $372(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $341(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $374($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $368($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $376($6_1 | 0, $375(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $341(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $377($6_1 + 4 | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $369($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $382($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $370($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $383($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $371($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $384($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $372($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $373($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAPF32[$5_1 >> 2] = Math_fround(HEAPF32[($372(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2]);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $374($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $385($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $375($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $376($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($375(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $377($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $378($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $378($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  $379($4_1 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $379($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $317($6_1 | 0, $316(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $341(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $380($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $380($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $381($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $381($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $382($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $383($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $384($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $385($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $386($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $348($4_1 | 0) | 0;
  $389($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $387($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $317($6_1 | 0, $316(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $391($6_1 | 0, $390(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $388($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $389($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $392($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $390($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $391($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $390(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $392($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $393($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $190($6_1 | 0, $189(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $341(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $394($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $394($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $395($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $395($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $396($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $270($6_1 | 0, $189(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $341(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $397($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $397($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $398($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $398($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $399($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $400($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $401($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $401($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $402($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $341(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $399($6_1 | 0) | 0;
  $406($6_1 | 0, $405(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $403($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $404(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $404($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $405($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $406($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $405(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $407($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $412(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $408($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = (HEAP32[(($124(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $409($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $411(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $410($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $413(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $411($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $210(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 0 | 0 | 0, 1 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $412($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $414(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $413($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $415($407(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0) | 0;
  $407($5_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $414($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $415($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $416($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($124(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $417($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $418($124(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $418($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $419(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $419($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $420($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0;
  return $5_1 | 0;
 }
 
 function $421($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $317($6_1 | 0, $316(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $341(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $422($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $422($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $423($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $423($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $424() {
  $1();
  $2();
  $4();
  $8();
  $91();
  $97();
  return;
 }
 
 function $425($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $55$hi = 0, $56$hi = 0, $23_1 = 0, $138_1 = 0, $151_1 = 0, i64toi32_i32$2 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  label$1 : {
   if (!(((((HEAPU8[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) ^ -1 | 0) ^ -1 | 0) ^ -1 | 0) & 1 | 0)) {
    break label$1
   }
   $426(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0);
  }
  HEAP32[($3_1 + 16 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = 1;
  HEAP32[($3_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  label$2 : while (1) {
   $427(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0);
   $23_1 = (HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($3_1 + 16 | 0) >> 2] = $23_1;
   label$3 : {
    label$4 : {
     if (!(((($23_1 | 0) > (100 | 0) ^ -1 | 0) ^ -1 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($3_1 + 4 | 0) >> 2] = $428() | 0;
     $88(1 | 0);
     i64toi32_i32$0 = $429(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $138_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $3_1;
     HEAP32[($3_1 + 8 | 0) >> 2] = $138_1;
     HEAP32[($3_1 + 12 | 0) >> 2] = i64toi32_i32$1;
     $88(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0);
     $20(1298 | 0, 6 | 0, 1305 | 0, 1306 | 0);
     break label$3;
    }
    i64toi32_i32$1 = $429(HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $151_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $3_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $151_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = i64toi32_i32$0;
   }
   i64toi32_i32$0 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   $55$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   $56$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $55$hi;
   i64toi32_i32$1 = $56$hi;
   i64toi32_i32$1 = $55$hi;
   i64toi32_i32$1 = $56$hi;
   i64toi32_i32$1 = $55$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = $56$hi;
   if (((((i64toi32_i32$2 | 0) != (0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) ^ -1 | 0) ^ -1 | 0) & 1 | 0) {
    continue label$2
   }
   break label$2;
  };
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $426($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $44$hi = 0, $45$hi = 0, $12_1 = 0, $104_1 = 0, $117_1 = 0, i64toi32_i32$2 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  HEAP8[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 0] = 1;
  $437(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0);
  HEAP32[($3_1 + 24 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = 1;
  HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  label$1 : while (1) {
   $439(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0);
   $427(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0);
   $12_1 = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($3_1 + 24 | 0) >> 2] = $12_1;
   label$2 : {
    label$3 : {
     if (!(((($12_1 | 0) > (100 | 0) ^ -1 | 0) ^ -1 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = $428() | 0;
     $88(1 | 0);
     i64toi32_i32$0 = $429(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $104_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $3_1;
     HEAP32[($3_1 + 16 | 0) >> 2] = $104_1;
     HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$1;
     $88(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
     $20(1298 | 0, 6 | 0, 1305 | 0, 1383 | 0);
     break label$2;
    }
    i64toi32_i32$1 = $429(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $117_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $3_1;
    HEAP32[($3_1 + 16 | 0) >> 2] = $117_1;
    HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   }
   i64toi32_i32$0 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
   $44$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   $45$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $44$hi;
   i64toi32_i32$1 = $45$hi;
   i64toi32_i32$1 = $44$hi;
   i64toi32_i32$1 = $45$hi;
   i64toi32_i32$1 = $44$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = $45$hi;
   if (((((i64toi32_i32$2 | 0) != (0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) ^ -1 | 0) ^ -1 | 0) & 1 | 0) {
    continue label$1
   }
   break label$1;
  };
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $427($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  $430(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $428() {
  return 0 | 0;
 }
 
 function $429($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = $431(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  global$0 = $3_1 + 16 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $430($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $68$hi = 0, $69$hi = 0, $71$hi = 0, $72$hi = 0, $15_1 = 0, $73$hi = 0, $74$hi = 0, $185_1 = 0, $205_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 7 | 0) >> 0] = HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 15 | 0) >> 0] = ((HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 255 | 0) & 1 | 0;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 13 | 0) >> 0] = HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 0] = (((HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 255 | 0) >>> 1 | 0) & 1 | 0;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 17 | 0) >> 0] = (((HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 255 | 0) >>> 2 | 0) & 1 | 0;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 18 | 0) >> 0] = (((HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 255 | 0) >>> 3 | 0) & 1 | 0;
  i64toi32_i32$0 = 0;
  $68$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 305419896;
  $69$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $68$hi;
  i64toi32_i32$0 = $69$hi;
  i64toi32_i32$0 = $68$hi;
  i64toi32_i32$2 = (HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 255 | 0;
  i64toi32_i32$1 = $69$hi;
  i64toi32_i32$3 = -1867789056;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $185_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = $185_1;
  HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $71$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $72$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $71$hi;
  i64toi32_i32$1 = $72$hi;
  i64toi32_i32$1 = $71$hi;
  i64toi32_i32$0 = (HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 255 | 0;
  i64toi32_i32$2 = $72$hi;
  i64toi32_i32$3 = 56;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $15_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $15_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $73$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 16702650;
  $74$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $73$hi;
  i64toi32_i32$2 = $74$hi;
  i64toi32_i32$2 = $73$hi;
  i64toi32_i32$1 = $15_1;
  i64toi32_i32$0 = $74$hi;
  i64toi32_i32$3 = 159868227;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $205_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $205_1;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 6 | 0) >> 0] = (HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 255 | 0 | ((HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0) | 0;
  return;
 }
 
 function $431($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $3_1;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $432($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $117($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $8_1 = $1806(64 | 0) | 0;
  $440($8_1 | 0, $5_1 | 0, $433($5_1 | 0) | 0 | 0) | 0;
  HEAP32[($5_1 + 72 | 0) >> 2] = $8_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $8_1;
  HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  $434($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $433($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $434($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $88_1 = 0, $92_1 = 0, $26_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP8[($4_1 + 4 | 0) >> 0] = $37(1 | 0) | 0;
  HEAP8[($4_1 + 5 | 0) >> 0] = $37(8 | 0) | 0;
  HEAP8[($4_1 + 6 | 0) >> 0] = $37(8 | 0) | 0;
  HEAP8[($4_1 + 7 | 0) >> 0] = $37(8 | 0) | 0;
  i64toi32_i32$0 = $39(64 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $88_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $88_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $39(64 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $92_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[($4_1 + 32 | 0) >> 2] = $92_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $37(32 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < (32 | 0) & 1 | 0)) {
     break label$1
    }
    $26_1 = $37(8 | 0) | 0;
    HEAP8[(($4_1 + 40 | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] = $26_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP8[($4_1 + 8 | 0) >> 0] = $37(8 | 0) | 0;
  HEAP8[($4_1 + 9 | 0) >> 0] = $37(8 | 0) | 0;
  HEAP8[($4_1 + 10 | 0) >> 0] = $37(8 | 0) | 0;
  HEAP8[($4_1 + 11 | 0) >> 0] = $37(8 | 0) | 0;
  HEAP8[($4_1 + 12 | 0) >> 0] = $37(8 | 0) | 0;
  HEAP8[($4_1 + 13 | 0) >> 0] = $37(8 | 0) | 0;
  HEAP8[($4_1 + 14 | 0) >> 0] = $37(8 | 0) | 0;
  HEAP8[($4_1 + 15 | 0) >> 0] = $37(1 | 0) | 0;
  HEAP8[($4_1 + 16 | 0) >> 0] = $37(1 | 0) | 0;
  HEAP8[($4_1 + 17 | 0) >> 0] = $37(1 | 0) | 0;
  HEAP8[($4_1 + 18 | 0) >> 0] = $37(1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $435($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP8[($5_1 + 7 | 0) >> 0] = $2_1;
  HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $89(-12 | 0);
  $90(-12 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $436($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $146$hi = 0, $147$hi = 0, $149$hi = 0, $150$hi = 0, $15_1 = 0, $151$hi = 0, $152$hi = 0, $419_1 = 0, $439_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 14 | 0) >> 0] = 51;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 0] = 17;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 11 | 0) >> 0] = 239;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 10 | 0) >> 0] = 205;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 9 | 0) >> 0] = 171;
  HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] = 878082192;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 0] = 18;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 40 | 0) >> 0] = 0;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 41 | 0) >> 0] = 17;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 42 | 0) >> 0] = 34;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 43 | 0) >> 0] = 51;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 44 | 0) >> 0] = 68;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 45 | 0) >> 0] = 85;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 46 | 0) >> 0] = 102;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 47 | 0) >> 0] = 119;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 48 | 0) >> 0] = 136;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 49 | 0) >> 0] = 153;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 50 | 0) >> 0] = 170;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 51 | 0) >> 0] = 187;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 52 | 0) >> 0] = 204;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 53 | 0) >> 0] = 221;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 54 | 0) >> 0] = 238;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 55 | 0) >> 0] = 255;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 56 | 0) >> 0] = 16;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 57 | 0) >> 0] = 33;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 58 | 0) >> 0] = 50;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 59 | 0) >> 0] = 67;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 60 | 0) >> 0] = 84;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 61 | 0) >> 0] = 101;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 62 | 0) >> 0] = 118;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 63 | 0) >> 0] = 135;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 64 | 0) >> 0] = 152;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 65 | 0) >> 0] = 169;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 66 | 0) >> 0] = 186;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 67 | 0) >> 0] = 203;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 68 | 0) >> 0] = 220;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 69 | 0) >> 0] = 237;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 70 | 0) >> 0] = 254;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 71 | 0) >> 0] = 15;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 7 | 0) >> 0] = HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 15 | 0) >> 0] = ((HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 255 | 0) & 1 | 0;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 13 | 0) >> 0] = HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 0] = (((HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 255 | 0) >>> 1 | 0) & 1 | 0;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 17 | 0) >> 0] = (((HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 255 | 0) >>> 2 | 0) & 1 | 0;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 18 | 0) >> 0] = (((HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 255 | 0) >>> 3 | 0) & 1 | 0;
  i64toi32_i32$0 = 0;
  $146$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 305419896;
  $147$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $146$hi;
  i64toi32_i32$0 = $147$hi;
  i64toi32_i32$0 = $146$hi;
  i64toi32_i32$2 = (HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 255 | 0;
  i64toi32_i32$1 = $147$hi;
  i64toi32_i32$3 = -1867789056;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $419_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = $419_1;
  HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $149$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $150$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $149$hi;
  i64toi32_i32$1 = $150$hi;
  i64toi32_i32$1 = $149$hi;
  i64toi32_i32$0 = (HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 255 | 0;
  i64toi32_i32$2 = $150$hi;
  i64toi32_i32$3 = 56;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $15_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $15_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $151$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 16702650;
  $152$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $151$hi;
  i64toi32_i32$2 = $152$hi;
  i64toi32_i32$2 = $151$hi;
  i64toi32_i32$1 = $15_1;
  i64toi32_i32$0 = $152$hi;
  i64toi32_i32$3 = 159868227;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $439_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $439_1;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 6 | 0) >> 0] = (HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 255 | 0 | ((HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0) | 0;
  return;
 }
 
 function $437($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  return;
 }
 
 function $438($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  return;
 }
 
 function $439($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  $436(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $440($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $116($6_1 | 0) | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  HEAP8[($6_1 + 4 | 0) >> 0] = 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $435(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, $6_1 | 0, 1 & 1 | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $441($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $32_1 = 0, $37_1 = 0;
  $3_1 = global$0 - 160 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 156 | 0) >> 2] = $0_1;
  $442($3_1 + 8 | 0 | 0, 24 | 0) | 0;
  $32_1 = $443($840($443($840($443($443(($3_1 + 8 | 0) + 8 | 0 | 0, 1463 | 0) | 0 | 0, 1465 | 0) | 0 | 0, (HEAPU8[((HEAP32[(0 + 18140 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0 | 0) | 0 | 0, 1473 | 0) | 0 | 0, (HEAPU8[((HEAP32[(0 + 18140 | 0) >> 2] | 0) + 7 | 0) >> 0] | 0) & 255 | 0 | 0) | 0 | 0, 1483 | 0) | 0;
  i64toi32_i32$2 = HEAP32[(0 + 18140 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
  $37_1 = $443($842($32_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0 | 0, 1495 | 0) | 0;
  i64toi32_i32$2 = HEAP32[(0 + 18140 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $841($443($842($37_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0) | 0 | 0, 1507 | 0) | 0 | 0, HEAP32[((HEAP32[(0 + 18140 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) | 0;
  $840($443(($3_1 + 8 | 0) + 8 | 0 | 0, 1529 | 0) | 0 | 0, (HEAPU8[((HEAP32[(0 + 18140 | 0) >> 2] | 0) + 40 | 0) >> 0] | 0) & 255 | 0 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = 1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) < (32 | 0) & 1 | 0)) {
     break label$1
    }
    $840($443(($3_1 + 8 | 0) + 8 | 0 | 0, 1552 | 0) | 0 | 0, (HEAPU8[(((HEAP32[(0 + 18140 | 0) >> 2] | 0) + 40 | 0) + (HEAP32[($3_1 + 4 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $443(($3_1 + 8 | 0) + 8 | 0 | 0, 1555 | 0) | 0;
  $840($443($840($443($840($443($840($443($840($443($840($443($840($443($840($443($840($443($840($443($840($443(($3_1 + 8 | 0) + 8 | 0 | 0, 1557 | 0) | 0 | 0, (HEAPU8[((HEAP32[(0 + 18140 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0 | 0) | 0 | 0, 1570 | 0) | 0 | 0, (HEAPU8[((HEAP32[(0 + 18140 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0) & 255 | 0 | 0) | 0 | 0, 1586 | 0) | 0 | 0, (HEAPU8[((HEAP32[(0 + 18140 | 0) >> 2] | 0) + 10 | 0) >> 0] | 0) & 255 | 0 | 0) | 0 | 0, 1602 | 0) | 0 | 0, (HEAPU8[((HEAP32[(0 + 18140 | 0) >> 2] | 0) + 11 | 0) >> 0] | 0) & 255 | 0 | 0) | 0 | 0, 1623 | 0) | 0 | 0, (HEAPU8[((HEAP32[(0 + 18140 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0 | 0) | 0 | 0, 1640 | 0) | 0 | 0, (HEAPU8[((HEAP32[(0 + 18140 | 0) >> 2] | 0) + 13 | 0) >> 0] | 0) & 255 | 0 | 0) | 0 | 0, 1661 | 0) | 0 | 0, (HEAPU8[((HEAP32[(0 + 18140 | 0) >> 2] | 0) + 14 | 0) >> 0] | 0) & 255 | 0 | 0) | 0 | 0, 1681 | 0) | 0 | 0, (HEAPU8[((HEAP32[(0 + 18140 | 0) >> 2] | 0) + 15 | 0) >> 0] | 0) & 255 | 0 | 0) | 0 | 0, 1701 | 0) | 0 | 0, (HEAPU8[((HEAP32[(0 + 18140 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) & 255 | 0 | 0) | 0 | 0, 1718 | 0) | 0 | 0, (HEAPU8[((HEAP32[(0 + 18140 | 0) >> 2] | 0) + 17 | 0) >> 0] | 0) & 255 | 0 | 0) | 0 | 0, 1738 | 0) | 0 | 0, (HEAPU8[((HEAP32[(0 + 18140 | 0) >> 2] | 0) + 18 | 0) >> 0] | 0) & 255 | 0 | 0) | 0;
  $443(($3_1 + 8 | 0) + 8 | 0 | 0, 1758 | 0) | 0;
  $444($0_1 | 0, $3_1 + 8 | 0 | 0);
  $445($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 160 | 0;
  return;
 }
 
 function $442($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $446($5_1 + 64 | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 1784 + 12 | 0;
  HEAP32[($5_1 + 64 | 0) >> 2] = 1784 + 52 | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = 1784 + 32 | 0;
  $447($5_1 | 0, 1844 + 4 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 1784 + 12 | 0;
  HEAP32[($5_1 + 64 | 0) >> 2] = 1784 + 52 | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = 1784 + 32 | 0;
  $448($5_1 + 12 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $443($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = $449(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $23(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $444($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $450($0_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $445($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $451($4_1 | 0, 1844 | 0) | 0;
  $773($4_1 + 64 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $446($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $503($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 5688 + 8 | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $447($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $7_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $504($6_1 | 0, $7_1 + 4 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $505($6_1 + 8 | 0 | 0, $7_1 + 12 | 0 | 0) | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
  HEAP32[($6_1 + (HEAP32[((HEAP32[$6_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0) >> 2] = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $448($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $779($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 2108 + 8 | 0;
  $41($5_1 + 32 | 0 | 0) | 0;
  HEAP32[($5_1 + 44 | 0) >> 2] = 0;
  HEAP32[($5_1 + 48 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $449($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $21_1 = 0, $39_1 = 0, $45_1 = 0, $51_1 = 0, $59_1 = 0, $69_1 = 0, $20_1 = 0, $44_1 = 0, $50_1 = 0, $57_1 = 0, $79_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  $814($5_1 + 24 | 0 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!(($507($5_1 + 24 | 0 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   $508($5_1 + 8 | 0 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0;
   $20_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
   $21_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     if (!((($509($21_1 + (HEAP32[((HEAP32[$21_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 176 | 0 | 0) == (32 | 0) & 1 | 0)) {
      break label$3
     }
     $39_1 = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) + (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0;
     break label$2;
    }
    $39_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
   }
   $44_1 = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) + (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0;
   $45_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
   $50_1 = $45_1 + (HEAP32[((HEAP32[$45_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
   $51_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
   $57_1 = $510($51_1 + (HEAP32[((HEAP32[$51_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
   $59_1 = 24;
   HEAP32[($5_1 + 16 | 0) >> 2] = $511(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, $20_1 | 0, $39_1 | 0, $44_1 | 0, $50_1 | 0, ($57_1 << $59_1 | 0) >> $59_1 | 0 | 0) | 0;
   label$4 : {
    if (!(($512($5_1 + 16 | 0 | 0) | 0) & 1 | 0)) {
     break label$4
    }
    $69_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
    $513($69_1 + (HEAP32[((HEAP32[$69_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 5 | 0);
   }
  }
  $816($5_1 + 24 | 0 | 0) | 0;
  $79_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  global$0 = $5_1 + 48 | 0;
  return $79_1 | 0;
 }
 
 function $450($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $17_1 = 0, $18_1 = 0, $27_1 = 0, $28_1 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 48 | 0) >> 2] | 0) & 16 | 0)) {
     break label$2
    }
    label$3 : {
     if (!((HEAP32[($5_1 + 44 | 0) >> 2] | 0) >>> 0 < ($475($5_1 | 0) | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[($5_1 + 44 | 0) >> 2] = $475($5_1 | 0) | 0;
    }
    $17_1 = $479($5_1 | 0) | 0;
    $18_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
    $42($5_1 + 32 | 0 | 0);
    $524($0_1 | 0, $17_1 | 0, $18_1 | 0, $4_1 + 48 | 0 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (!((HEAP32[($5_1 + 48 | 0) >> 2] | 0) & 8 | 0)) {
     break label$4
    }
    $27_1 = $478($5_1 | 0) | 0;
    $28_1 = $487($5_1 | 0) | 0;
    $42($5_1 + 32 | 0 | 0);
    $524($0_1 | 0, $27_1 | 0, $28_1 | 0, $4_1 + 32 | 0 | 0) | 0;
    break label$1;
   }
   $42($5_1 + 32 | 0 | 0);
   $43($0_1 | 0, $4_1 + 16 | 0 | 0) | 0;
  }
  global$0 = $4_1 + 64 | 0;
  return;
 }
 
 function $451($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
  HEAP32[($5_1 + (HEAP32[((HEAP32[$5_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0) >> 2] = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
  $467($5_1 + 12 | 0 | 0) | 0;
  $851($5_1 | 0, $6_1 + 4 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $452($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $16_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP8[($5_1 + 7 | 0) >> 0] = $2_1;
  label$1 : {
   if (!((HEAP32[(0 + 18140 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
    break label$1
   }
   $16_1 = $1806(128 | 0) | 0;
   $432($16_1 | 0, 1760 | 0) | 0;
   HEAP32[(0 + 18140 | 0) >> 2] = $16_1;
  }
  HEAP8[((HEAP32[(0 + 18140 | 0) >> 2] | 0) + 5 | 0) >> 0] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP8[((HEAP32[(0 + 18140 | 0) >> 2] | 0) + 4 | 0) >> 0] = (HEAPU8[($5_1 + 7 | 0) >> 0] | 0) & 1 | 0;
  $453(HEAP32[(0 + 18140 | 0) >> 2] | 0 | 0);
  $441($0_1 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $453($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $425(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $454() {
  $438(HEAP32[(0 + 18140 | 0) >> 2] | 0 | 0);
  return;
 }
 
 function $455() {
  FUNCTION_TABLE[7 | 0](18144) | 0;
  return;
 }
 
 function $456($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $457(1764 | 0, 8 | 0);
  $458(1773 | 0, 9 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $457($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $10_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 10;
  $6_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $10_1 = $460($4_1 + 16 | 0 | 0) | 0;
  $14_1 = $461($4_1 + 16 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$4($6_1 | 0, $10_1 | 0, $14_1 | 0, $462() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $458($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $10_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 11;
  $6_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $10_1 = $464($4_1 + 16 | 0 | 0) | 0;
  $14_1 = $465($4_1 + 16 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$4($6_1 | 0, $10_1 | 0, $14_1 | 0, $466() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $459($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, $22_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP8[($5_1 + 23 | 0) >> 0] = $2_1;
  $7_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  FUNCTION_TABLE[$7_1 | 0]($5_1 + 8 | 0, $538(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0, ($539((HEAPU8[($5_1 + 23 | 0) >> 0] | 0) & 1 | 0 | 0) | 0) & 1 | 0);
  $22_1 = $540($5_1 + 8 | 0 | 0) | 0;
  $1835($5_1 + 8 | 0 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return $22_1 | 0;
 }
 
 function $460($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 3 | 0;
 }
 
 function $461($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $541() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $462() {
  return 2468 | 0;
 }
 
 function $463($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  FUNCTION_TABLE[HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0]();
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $464($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 1 | 0;
 }
 
 function $465($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $542() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $466() {
  return 2480 | 0;
 }
 
 function $467($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 2108 + 8 | 0;
  $1835($4_1 + 32 | 0 | 0) | 0;
  $777($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $468($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $7_1 = $445($4_1 + -8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $469($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $10_1 = $445($4_1 + (HEAP32[((HEAP32[$4_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $470($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $445($4_1 | 0) | 0;
  $1807($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $471($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $470((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + -8 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $472($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $470($4_1 + (HEAP32[((HEAP32[$4_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $473($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $467($4_1 | 0) | 0;
  $1807($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $474($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $8_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $123$hi = 0, $124$hi = 0, $127$hi = 0, $128$hi = 0, $132$hi = 0, $133$hi = 0, $44_1 = 0, $51_1 = 0, $120$hi = 0, i64toi32_i32$4 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $266_1 = 0, $278_1 = 0, $285_1 = 0, $120_1 = 0, $293$hi = 0, $127_1 = 0, $319_1 = 0, $100_1 = 0, $101_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $1_1;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $7_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 44 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($8_1 + 44 | 0) >> 2] | 0) >>> 0 < ($475($8_1 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   HEAP32[($8_1 + 44 | 0) >> 2] = $475($8_1 | 0) | 0;
  }
  label$2 : {
   label$3 : {
    if ((HEAP32[($7_1 + 24 | 0) >> 2] | 0) & 24 | 0) {
     break label$3
    }
    i64toi32_i32$0 = -1;
    $476($0_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
    break label$2;
   }
   label$4 : {
    if (!(((HEAP32[($7_1 + 24 | 0) >> 2] | 0) & 24 | 0 | 0) == (24 | 0) & 1 | 0)) {
     break label$4
    }
    if (!((HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$4
    }
    i64toi32_i32$0 = -1;
    $476($0_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
    break label$2;
   }
   label$5 : {
    label$6 : {
     if (!((HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
      break label$6
     }
     $44_1 = 0;
     break label$5;
    }
    $44_1 = (HEAP32[($8_1 + 44 | 0) >> 2] | 0) - ($26($8_1 + 32 | 0 | 0) | 0) | 0;
   }
   HEAP32[($7_1 + 20 | 0) >> 2] = $44_1;
   $51_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
   label$7 : {
    label$8 : {
     switch ($51_1 | 0) {
     case 0:
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = $7_1;
      HEAP32[($7_1 + 8 | 0) >> 2] = 0;
      HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
      break label$7;
     case 1:
      label$12 : {
       label$13 : {
        if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0) & 8 | 0)) {
         break label$13
        }
        i64toi32_i32$1 = ($477($8_1 | 0) | 0) - ($478($8_1 | 0) | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
        $266_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $7_1;
        HEAP32[($7_1 + 8 | 0) >> 2] = $266_1;
        HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
        break label$12;
       }
       i64toi32_i32$1 = ($475($8_1 | 0) | 0) - ($479($8_1 | 0) | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $278_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $7_1;
       HEAP32[($7_1 + 8 | 0) >> 2] = $278_1;
       HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
      }
      break label$7;
     case 2:
      i64toi32_i32$1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $285_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $7_1;
      HEAP32[($7_1 + 8 | 0) >> 2] = $285_1;
      HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
      break label$7;
     default:
      break label$8;
     };
    }
    i64toi32_i32$0 = -1;
    $476($0_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
    break label$2;
   }
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
   $120_1 = i64toi32_i32$0;
   $120$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
   $293$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $120$hi;
   i64toi32_i32$0 = $293$hi;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = $120$hi;
   i64toi32_i32$3 = $120_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$2 = $7_1;
   HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$4;
   HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
   $123$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   $124$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $123$hi;
   i64toi32_i32$2 = $124$hi;
   i64toi32_i32$2 = $123$hi;
   i64toi32_i32$2 = $124$hi;
   i64toi32_i32$2 = $123$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $124$hi;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
    $32_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $33_1 = 0
     } else {
      $33_1 = 1
     }
     $34_1 = $33_1;
    } else {
     $34_1 = 0
    }
    $32_1 = $34_1;
   }
   label$14 : {
    label$15 : {
     if ($32_1 & 1 | 0) {
      break label$15
     }
     i64toi32_i32$2 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
     $127_1 = i64toi32_i32$2;
     $127$hi = i64toi32_i32$0;
     i64toi32_i32$3 = $7_1;
     i64toi32_i32$0 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
     $128$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $127$hi;
     i64toi32_i32$2 = $128$hi;
     i64toi32_i32$2 = $127$hi;
     i64toi32_i32$2 = $128$hi;
     $319_1 = i64toi32_i32$0;
     i64toi32_i32$2 = $127$hi;
     i64toi32_i32$3 = $127_1;
     i64toi32_i32$0 = $128$hi;
     i64toi32_i32$5 = $319_1;
     if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
      $35_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$5 >>> 0) {
        $36_1 = 0
       } else {
        $36_1 = 1
       }
       $37_1 = $36_1;
      } else {
       $37_1 = 0
      }
      $35_1 = $37_1;
     }
     if (!($35_1 & 1 | 0)) {
      break label$14
     }
    }
    i64toi32_i32$3 = -1;
    $476($0_1 | 0, -1 | 0, i64toi32_i32$3 | 0) | 0;
    break label$2;
   }
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$3 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
   $132$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   $133$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $132$hi;
   i64toi32_i32$2 = $133$hi;
   i64toi32_i32$2 = $132$hi;
   i64toi32_i32$2 = $133$hi;
   i64toi32_i32$2 = $132$hi;
   i64toi32_i32$5 = i64toi32_i32$3;
   i64toi32_i32$3 = $133$hi;
   i64toi32_i32$0 = 0;
   label$16 : {
    if (!(((i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) & 1 | 0)) {
     break label$16
    }
    label$17 : {
     if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0) & 8 | 0)) {
      break label$17
     }
     if (!(($477($8_1 | 0) | 0 | 0) == (0 | 0) & 1 | 0)) {
      break label$17
     }
     i64toi32_i32$5 = -1;
     $476($0_1 | 0, -1 | 0, i64toi32_i32$5 | 0) | 0;
     break label$2;
    }
    label$18 : {
     if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0) & 16 | 0)) {
      break label$18
     }
     if (!(($475($8_1 | 0) | 0 | 0) == (0 | 0) & 1 | 0)) {
      break label$18
     }
     i64toi32_i32$5 = -1;
     $476($0_1 | 0, -1 | 0, i64toi32_i32$5 | 0) | 0;
     break label$2;
    }
   }
   label$19 : {
    if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0) & 8 | 0)) {
     break label$19
    }
    $100_1 = $478($8_1 | 0) | 0;
    $101_1 = $478($8_1 | 0) | 0;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
    $480($8_1 | 0, $100_1 | 0, $101_1 + i64toi32_i32$5 | 0 | 0, HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0);
   }
   label$20 : {
    if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0) & 16 | 0)) {
     break label$20
    }
    $482($8_1 | 0, $479($8_1 | 0) | 0 | 0, $481($8_1 | 0) | 0 | 0);
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
    $483($8_1 | 0, i64toi32_i32$2 | 0);
   }
   i64toi32_i32$0 = $7_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
   $476($0_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 | 0) | 0;
  }
  global$0 = $7_1 + 48 | 0;
  return;
 }
 
 function $475($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0;
 }
 
 function $476($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $5_1 = 0, $23_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $4_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $5_1;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $23_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $23_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $477($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $478($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $479($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0;
 }
 
 function $480($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 16 | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  HEAP32[($7_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[$6_1 >> 2] | 0;
  return;
 }
 
 function $481($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0;
 }
 
 function $482($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $7_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  return;
 }
 
 function $483($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($5_1 + 24 | 0) >> 2] = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0;
  return;
 }
 
 function $484($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$0 = $485($2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $7_1, i64toi32_i32$0, i64toi32_i32$1, 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0);
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $485($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  i64toi32_i32$2 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $486($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $35_1 = 0, $40_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 44 | 0) >> 2] | 0) >>> 0 < ($475($4_1 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   HEAP32[($4_1 + 44 | 0) >> 2] = $475($4_1 | 0) | 0;
  }
  label$2 : {
   label$3 : {
    if (!((HEAP32[($4_1 + 48 | 0) >> 2] | 0) & 8 | 0)) {
     break label$3
    }
    label$4 : {
     if (!(($487($4_1 | 0) | 0) >>> 0 < (HEAP32[($4_1 + 44 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$4
     }
     $480($4_1 | 0, $478($4_1 | 0) | 0 | 0, $477($4_1 | 0) | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0);
    }
    label$5 : {
     if (!(($477($4_1 | 0) | 0) >>> 0 < ($487($4_1 | 0) | 0) >>> 0 & 1 | 0)) {
      break label$5
     }
     $35_1 = 24;
     HEAP32[($3_1 + 12 | 0) >> 2] = $488(((HEAPU8[($477($4_1 | 0) | 0) >> 0] | 0) << $35_1 | 0) >> $35_1 | 0 | 0) | 0;
     break label$2;
    }
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = $489() | 0;
  }
  $40_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $40_1 | 0;
 }
 
 function $487($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0;
 }
 
 function $488($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP8[($3_1 + 15 | 0) >> 0] = $0_1;
  return (HEAPU8[($3_1 + 15 | 0) >> 0] | 0) & 255 | 0 | 0;
 }
 
 function $489() {
  return -1 | 0;
 }
 
 function $490($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $42_1 = 0, $45_1 = 0, $57_1 = 0, $61_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($5_1 + 44 | 0) >> 2] | 0) >>> 0 < ($475($5_1 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 44 | 0) >> 2] = $475($5_1 | 0) | 0;
  }
  label$2 : {
   label$3 : {
    if (!(($478($5_1 | 0) | 0) >>> 0 < ($477($5_1 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    label$4 : {
     if (!(($491(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, $489() | 0 | 0) | 0) & 1 | 0)) {
      break label$4
     }
     $480($5_1 | 0, $478($5_1 | 0) | 0 | 0, ($477($5_1 | 0) | 0) + -1 | 0 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0);
     HEAP32[($4_1 + 12 | 0) >> 2] = $492(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
     break label$2;
    }
    label$5 : {
     label$6 : {
      if ((HEAP32[($5_1 + 48 | 0) >> 2] | 0) & 16 | 0) {
       break label$6
      }
      $42_1 = 24;
      $45_1 = 24;
      if (!(($494((($493(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) << $42_1 | 0) >> $42_1 | 0 | 0, ((HEAPU8[(($477($5_1 | 0) | 0) + -1 | 0) >> 0] | 0) << $45_1 | 0) >> $45_1 | 0 | 0) | 0) & 1 | 0)) {
       break label$5
      }
     }
     $480($5_1 | 0, $478($5_1 | 0) | 0 | 0, ($477($5_1 | 0) | 0) + -1 | 0 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0);
     $57_1 = $493(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
     HEAP8[($477($5_1 | 0) | 0) >> 0] = $57_1;
     HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     break label$2;
    }
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = $489() | 0;
  }
  $61_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $61_1 | 0;
 }
 
 function $491($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0 | 0;
 }
 
 function $492($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $12_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!(($491(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, $489() | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $12_1 = ($489() | 0) ^ -1 | 0;
    break label$1;
   }
   $12_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $12_1 | 0;
 }
 
 function $493($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = 24;
  return ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) << $5_1 | 0) >> $5_1 | 0 | 0;
 }
 
 function $494($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP8[($4_1 + 15 | 0) >> 0] = $0_1;
  HEAP8[($4_1 + 14 | 0) >> 0] = $1_1;
  $6_1 = 24;
  $10_1 = 24;
  return (((HEAPU8[($4_1 + 15 | 0) >> 0] | 0) << $6_1 | 0) >> $6_1 | 0 | 0) == (((HEAPU8[($4_1 + 14 | 0) >> 0] | 0) << $10_1 | 0) >> $10_1 | 0 | 0) & 1 | 0 | 0;
 }
 
 function $495($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $34_1 = 0, $78_1 = 0, $84_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($491(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0, $489() | 0 | 0) | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($4_1 + 32 | 0) >> 2] = ($477($5_1 | 0) | 0) - ($478($5_1 | 0) | 0) | 0;
    label$3 : {
     if (!(($475($5_1 | 0) | 0 | 0) == ($481($5_1 | 0) | 0 | 0) & 1 | 0)) {
      break label$3
     }
     label$4 : {
      if ((HEAP32[($5_1 + 48 | 0) >> 2] | 0) & 16 | 0) {
       break label$4
      }
      HEAP32[($4_1 + 44 | 0) >> 2] = $489() | 0;
      break label$1;
     }
     HEAP32[($4_1 + 28 | 0) >> 2] = ($475($5_1 | 0) | 0) - ($479($5_1 | 0) | 0) | 0;
     HEAP32[($4_1 + 24 | 0) >> 2] = (HEAP32[($5_1 + 44 | 0) >> 2] | 0) - ($479($5_1 | 0) | 0) | 0;
     $34_1 = 24;
     $1845($5_1 + 32 | 0 | 0, (0 << $34_1 | 0) >> $34_1 | 0 | 0);
     $497($5_1 + 32 | 0 | 0, $496($5_1 + 32 | 0 | 0) | 0 | 0);
     HEAP32[($4_1 + 20 | 0) >> 2] = $26($5_1 + 32 | 0 | 0) | 0;
     $482($5_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + ($44($5_1 + 32 | 0 | 0) | 0) | 0 | 0);
     $498($5_1 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0);
     HEAP32[($5_1 + 44 | 0) >> 2] = ($479($5_1 | 0) | 0) + (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0;
    }
    HEAP32[($4_1 + 16 | 0) >> 2] = ($475($5_1 | 0) | 0) + 1 | 0;
    HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[($499($4_1 + 16 | 0 | 0, $5_1 + 44 | 0 | 0) | 0) >> 2] | 0;
    label$5 : {
     if (!((HEAP32[($5_1 + 48 | 0) >> 2] | 0) & 8 | 0)) {
      break label$5
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = $26($5_1 + 32 | 0 | 0) | 0;
     $480($5_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + (HEAP32[($4_1 + 32 | 0) >> 2] | 0) | 0 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0);
    }
    $78_1 = 24;
    HEAP32[($4_1 + 44 | 0) >> 2] = $500($5_1 | 0, (($493(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) | 0) << $78_1 | 0) >> $78_1 | 0 | 0) | 0;
    break label$1;
   }
   HEAP32[($4_1 + 44 | 0) >> 2] = $492(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  }
  $84_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  global$0 = $4_1 + 48 | 0;
  return $84_1 | 0;
 }
 
 function $496($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($48($4_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $9_1 = $408($4_1 | 0) | 0;
    break label$1;
   }
   $9_1 = 11;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 - 1 | 0 | 0;
 }
 
 function $497($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = 24;
  $1839(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, (0 << $8_1 | 0) >> $8_1 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $498($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($5_1 + 24 | 0) >> 2] = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0;
  return;
 }
 
 function $499($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $501(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $500($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $14_1 = 0, $22_1 = 0, $26_1 = 0, $21_1 = 0, $30_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 7 | 0) >> 0] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $14_1 = 24;
    HEAP32[($4_1 + 12 | 0) >> 2] = (((wasm2js_i32$1 = $5_1, wasm2js_i32$2 = $488(((HEAPU8[($4_1 + 7 | 0) >> 0] | 0) << $14_1 | 0) >> $14_1 | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$5_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
    break label$1;
   }
   $21_1 = HEAPU8[($4_1 + 7 | 0) >> 0] | 0;
   $22_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
   HEAP32[($5_1 + 24 | 0) >> 2] = $22_1 + 1 | 0;
   HEAP8[$22_1 >> 0] = $21_1;
   $26_1 = 24;
   HEAP32[($4_1 + 12 | 0) >> 2] = $488(((HEAPU8[($4_1 + 7 | 0) >> 0] | 0) << $26_1 | 0) >> $26_1 | 0 | 0) | 0;
  }
  $30_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $30_1 | 0;
 }
 
 function $501($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(($502($4_1 + 8 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $14_1 = HEAP32[$4_1 >> 2] | 0;
    break label$1;
   }
   $14_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $502($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  return (HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0) >>> 0 & 1 | 0 | 0;
 }
 
 function $503($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 5628 + 8 | 0;
  return $4_1 | 0;
 }
 
 function $504($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $7_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
  HEAP32[($6_1 + (HEAP32[((HEAP32[$6_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0) >> 2] = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = 0;
  $506($6_1 + (HEAP32[((HEAP32[$6_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $505($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
  HEAP32[($5_1 + (HEAP32[((HEAP32[$5_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $506($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $860($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  HEAP32[($5_1 + 72 | 0) >> 2] = 0;
  HEAP32[($5_1 + 76 | 0) >> 2] = $489() | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $507($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $508($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $518($6_1 + (HEAP32[((HEAP32[$6_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $509($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $510($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $11_1 = 0, $15_1 = 0, $19_1 = 0, $21_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!(($491($489() | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   $11_1 = 24;
   $15_1 = 24;
   HEAP32[($4_1 + 76 | 0) >> 2] = (($519($4_1 | 0, (32 << $11_1 | 0) >> $11_1 | 0 | 0) | 0) << $15_1 | 0) >> $15_1 | 0;
  }
  $19_1 = 24;
  $21_1 = ((HEAP32[($4_1 + 76 | 0) >> 2] | 0) << $19_1 | 0) >> $19_1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $511($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $79_1 = 0, $145_1 = 0;
  $8_1 = global$0 - 80 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 64 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 52 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 48 | 0) >> 2] = $4_1;
  HEAP8[($8_1 + 47 | 0) >> 0] = $5_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($8_1 + 40 | 0) >> 2] = (HEAP32[($8_1 + 52 | 0) >> 2] | 0) - (HEAP32[($8_1 + 60 | 0) >> 2] | 0) | 0;
   HEAP32[($8_1 + 36 | 0) >> 2] = $514(HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) > (HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($8_1 + 36 | 0) >> 2] = (HEAP32[($8_1 + 36 | 0) >> 2] | 0) - (HEAP32[($8_1 + 40 | 0) >> 2] | 0) | 0;
     break label$3;
    }
    HEAP32[($8_1 + 36 | 0) >> 2] = 0;
   }
   HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 56 | 0) >> 2] | 0) - (HEAP32[($8_1 + 60 | 0) >> 2] | 0) | 0;
   label$5 : {
    if (!((HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$5
    }
    label$6 : {
     if (!(($515(HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[($8_1 + 64 | 0) >> 2] = 0;
     HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
     break label$1;
    }
   }
   label$7 : {
    if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$7
    }
    $79_1 = 24;
    $516($8_1 + 16 | 0 | 0, HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0, ((HEAPU8[($8_1 + 47 | 0) >> 0] | 0) << $79_1 | 0) >> $79_1 | 0 | 0) | 0;
    label$8 : {
     label$9 : {
      if (!(($515(HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0, $26($8_1 + 16 | 0 | 0) | 0 | 0, HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$9
      }
      HEAP32[($8_1 + 64 | 0) >> 2] = 0;
      HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
      HEAP32[($8_1 + 12 | 0) >> 2] = 1;
      break label$8;
     }
     HEAP32[($8_1 + 12 | 0) >> 2] = 0;
    }
    $1835($8_1 + 16 | 0 | 0) | 0;
    label$10 : {
     switch (HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) {
     case 1:
      break label$1;
     default:
      break label$10;
     };
    }
   }
   HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 52 | 0) >> 2] | 0) - (HEAP32[($8_1 + 56 | 0) >> 2] | 0) | 0;
   label$11 : {
    if (!((HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$11
    }
    label$12 : {
     if (!(($515(HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$12
     }
     HEAP32[($8_1 + 64 | 0) >> 2] = 0;
     HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
     break label$1;
    }
   }
   $517(HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
   HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
  }
  $145_1 = HEAP32[($8_1 + 72 | 0) >> 2] | 0;
  global$0 = $8_1 + 80 | 0;
  return $145_1 | 0;
 }
 
 function $512($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0 | 0;
 }
 
 function $513($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $520(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $514($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $515($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $11_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $516($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $15_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP8[($5_1 + 23 | 0) >> 0] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $22($6_1 | 0, $5_1 + 16 | 0 | 0, $5_1 + 8 | 0 | 0) | 0;
  $15_1 = 24;
  $1847($6_1 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, ((HEAPU8[($5_1 + 23 | 0) >> 0] | 0) << $15_1 | 0) >> $15_1 | 0 | 0);
  global$0 = $5_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $517($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $518($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $521(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $519($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $15_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  $807($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $10_1 = 24;
  $13_1 = $523($522($4_1 | 0) | 0 | 0, ((HEAPU8[($4_1 + 11 | 0) >> 0] | 0) << $10_1 | 0) >> $10_1 | 0 | 0) | 0;
  $911($4_1 | 0) | 0;
  $15_1 = 24;
  global$0 = $4_1 + 16 | 0;
  return ($13_1 << $15_1 | 0) >> $15_1 | 0 | 0;
 }
 
 function $520($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $820($5_1 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $521($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0;
 }
 
 function $522($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $916(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 19504 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $523($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $9_1 = 0, $13_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $9_1 = 24;
  $13_1 = 24;
  $15_1 = ((FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($5_1, ((HEAPU8[($4_1 + 11 | 0) >> 0] | 0) << $9_1 | 0) >> $9_1 | 0) | 0) << $13_1 | 0) >> $13_1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $524($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  $402($7_1 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  $525($7_1 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0);
  global$0 = $6_1 + 32 | 0;
  return $7_1 | 0;
 }
 
 function $525($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $53_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = $526(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 > ($527($6_1 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $1827($6_1 | 0);
   abort();
  }
  label$2 : {
   label$3 : {
    if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 < 11 >>> 0 & 1 | 0)) {
     break label$3
    }
    $123($6_1 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0);
    HEAP32[($5_1 + 12 | 0) >> 2] = $122($6_1 | 0) | 0;
    break label$2;
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = $528(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $529($407($6_1 | 0) | 0 | 0, (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
   $530($6_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
   $531($6_1 | 0, (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0);
   $121($6_1 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0);
  }
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    $120(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0);
    HEAP32[($5_1 + 24 | 0) >> 2] = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$5;
   };
  }
  $53_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP8[($5_1 + 7 | 0) >> 0] = 0;
  $120($53_1 | 0, $5_1 + 7 | 0 | 0);
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $526($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $532(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $527($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $533($77(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $9_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) - 16 | 0;
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $528($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < 11 >>> 0 & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 10;
    break label$1;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = ($534((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0) | 0) - 1 | 0;
   label$3 : {
    if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) == (11 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 1 | 0;
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  }
  $29_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $29_1 | 0;
 }
 
 function $529($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = $535(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $530($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($125(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] = $6_1;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $531($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0 | -2147483648 | 0;
  HEAP32[(($125(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 2] = $8_1;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $532($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  return (HEAP32[$4_1 >> 2] | 0) - (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0 | 0;
 }
 
 function $533($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $536(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $534($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 15 | 0) & -16 | 0 | 0;
 }
 
 function $535($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $19_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  label$1 : {
   if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 > ($537(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $196(2252 | 0);
   abort();
  }
  $19_1 = $197((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 0 | 0 | 0, 1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $19_1 | 0;
 }
 
 function $536($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $5_1 = $537(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $537($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return -1 | 0;
 }
 
 function $538($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $539($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP8[($3_1 + 15 | 0) >> 0] = $0_1;
  return (HEAPU8[($3_1 + 15 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $540($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $12_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1923((($47(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) << 0 | 0) + 4 | 0 | 0) | 0;
  $12_1 = $47(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] = $12_1;
  $1932((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0, $26(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0, ($47(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) << 0 | 0 | 0) | 0;
  $23_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $23_1 | 0;
 }
 
 function $541() {
  return 2320 | 0;
 }
 
 function $542() {
  return 2476 | 0;
 }
 
 function $543() {
  $455();
  return;
 }
 
 function $544($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $685($545(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $545($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $546() {
  fimport$5($547() | 0 | 0, 2483 | 0);
  fimport$6($548() | 0 | 0, 2488 | 0, 1 | 0, 1 & 1 | 0 | 0, 0 & 1 | 0 | 0);
  $549(2493 | 0);
  $550(2498 | 0);
  $551(2510 | 0);
  $552(2524 | 0);
  $553(2530 | 0);
  $554(2545 | 0);
  $555(2549 | 0);
  $556(2562 | 0);
  $557(2567 | 0);
  $558(2581 | 0);
  $559(2587 | 0);
  fimport$7($560() | 0 | 0, 2594 | 0);
  fimport$7($561() | 0 | 0, 2606 | 0);
  fimport$8($562() | 0 | 0, 4 | 0, 2639 | 0);
  fimport$8($563() | 0 | 0, 2 | 0, 2652 | 0);
  fimport$8($564() | 0 | 0, 4 | 0, 2667 | 0);
  fimport$9($565() | 0 | 0, 2682 | 0);
  $566(2698 | 0);
  $567(2728 | 0);
  $568(2765 | 0);
  $569(2804 | 0);
  $570(2835 | 0);
  $571(2875 | 0);
  $572(2904 | 0);
  $573(2942 | 0);
  $574(2972 | 0);
  $567(3011 | 0);
  $568(3043 | 0);
  $569(3076 | 0);
  $570(3109 | 0);
  $571(3143 | 0);
  $572(3176 | 0);
  $575(3210 | 0);
  $576(3241 | 0);
  return;
 }
 
 function $547() {
  return $577() | 0 | 0;
 }
 
 function $548() {
  return $578() | 0 | 0;
 }
 
 function $549($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = 24;
  $11_1 = 24;
  fimport$10($579() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0, (($580() | 0) << $7_1 | 0) >> $7_1 | 0 | 0, (($581() | 0) << $11_1 | 0) >> $11_1 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $550($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = 24;
  $11_1 = 24;
  fimport$10($582() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0, (($583() | 0) << $7_1 | 0) >> $7_1 | 0 | 0, (($584() | 0) << $11_1 | 0) >> $11_1 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $551($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$10($585() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0, ($586() | 0) & 255 | 0 | 0, ($587() | 0) & 255 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $552($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = 16;
  $11_1 = 16;
  fimport$10($588() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 2 | 0, (($589() | 0) << $7_1 | 0) >> $7_1 | 0 | 0, (($590() | 0) << $11_1 | 0) >> $11_1 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $553($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$10($591() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 2 | 0, ($592() | 0) & 65535 | 0 | 0, ($593() | 0) & 65535 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $554($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$10($594() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0, $595() | 0 | 0, $596() | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $555($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$10($597() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0, $598() | 0 | 0, $599() | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $556($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$10($600() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0, $601() | 0 | 0, $177() | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $557($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$10($602() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0, $603() | 0 | 0, $57() | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $558($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$11($604() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $559($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$11($605() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 8 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $560() {
  return $606() | 0 | 0;
 }
 
 function $561() {
  return $607() | 0 | 0;
 }
 
 function $562() {
  return $608() | 0 | 0;
 }
 
 function $563() {
  return $609() | 0 | 0;
 }
 
 function $564() {
  return $610() | 0 | 0;
 }
 
 function $565() {
  return $611() | 0 | 0;
 }
 
 function $566($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$12($612() | 0 | 0, $613() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $567($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$12($614() | 0 | 0, $615() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $568($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$12($616() | 0 | 0, $617() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $569($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$12($618() | 0 | 0, $619() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $570($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$12($620() | 0 | 0, $621() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $571($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$12($622() | 0 | 0, $623() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $572($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$12($624() | 0 | 0, $625() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $573($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$12($626() | 0 | 0, $627() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $574($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$12($628() | 0 | 0, $629() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $575($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$12($630() | 0 | 0, $631() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $576($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$12($632() | 0 | 0, $633() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $577() {
  return 16944 | 0;
 }
 
 function $578() {
  return 16956 | 0;
 }
 
 function $579() {
  return $636() | 0 | 0;
 }
 
 function $580() {
  var $1_1 = 0;
  $1_1 = 24;
  return (($637() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $581() {
  var $1_1 = 0;
  $1_1 = 24;
  return (($638() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $582() {
  return $639() | 0 | 0;
 }
 
 function $583() {
  var $1_1 = 0;
  $1_1 = 24;
  return (($640() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $584() {
  var $1_1 = 0;
  $1_1 = 24;
  return (($641() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $585() {
  return $642() | 0 | 0;
 }
 
 function $586() {
  return ($643() | 0) & 255 | 0 | 0;
 }
 
 function $587() {
  return ($644() | 0) & 255 | 0 | 0;
 }
 
 function $588() {
  return $645() | 0 | 0;
 }
 
 function $589() {
  var $1_1 = 0;
  $1_1 = 16;
  return (($646() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $590() {
  var $1_1 = 0;
  $1_1 = 16;
  return (($647() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $591() {
  return $648() | 0 | 0;
 }
 
 function $592() {
  return ($649() | 0) & 65535 | 0 | 0;
 }
 
 function $593() {
  return ($650() | 0) & 65535 | 0 | 0;
 }
 
 function $594() {
  return $651() | 0 | 0;
 }
 
 function $595() {
  return $652() | 0 | 0;
 }
 
 function $596() {
  return $653() | 0 | 0;
 }
 
 function $597() {
  return $654() | 0 | 0;
 }
 
 function $598() {
  return $655() | 0 | 0;
 }
 
 function $599() {
  return $656() | 0 | 0;
 }
 
 function $600() {
  return $657() | 0 | 0;
 }
 
 function $601() {
  return $658() | 0 | 0;
 }
 
 function $602() {
  return $659() | 0 | 0;
 }
 
 function $603() {
  return $660() | 0 | 0;
 }
 
 function $604() {
  return $661() | 0 | 0;
 }
 
 function $605() {
  return $662() | 0 | 0;
 }
 
 function $606() {
  return 2444 | 0;
 }
 
 function $607() {
  return 3336 | 0;
 }
 
 function $608() {
  return 3424 | 0;
 }
 
 function $609() {
  return 3516 | 0;
 }
 
 function $610() {
  return 3608 | 0;
 }
 
 function $611() {
  return 3652 | 0;
 }
 
 function $612() {
  return $663() | 0 | 0;
 }
 
 function $613() {
  return 0 | 0;
 }
 
 function $614() {
  return $664() | 0 | 0;
 }
 
 function $615() {
  return 0 | 0;
 }
 
 function $616() {
  return $665() | 0 | 0;
 }
 
 function $617() {
  return 1 | 0;
 }
 
 function $618() {
  return $666() | 0 | 0;
 }
 
 function $619() {
  return 2 | 0;
 }
 
 function $620() {
  return $667() | 0 | 0;
 }
 
 function $621() {
  return 3 | 0;
 }
 
 function $622() {
  return $668() | 0 | 0;
 }
 
 function $623() {
  return 4 | 0;
 }
 
 function $624() {
  return $669() | 0 | 0;
 }
 
 function $625() {
  return 5 | 0;
 }
 
 function $626() {
  return $670() | 0 | 0;
 }
 
 function $627() {
  return 4 | 0;
 }
 
 function $628() {
  return $671() | 0 | 0;
 }
 
 function $629() {
  return 5 | 0;
 }
 
 function $630() {
  return $672() | 0 | 0;
 }
 
 function $631() {
  return 6 | 0;
 }
 
 function $632() {
  return $673() | 0 | 0;
 }
 
 function $633() {
  return 7 | 0;
 }
 
 function $634() {
  FUNCTION_TABLE[46 | 0](18145) | 0;
  return;
 }
 
 function $635($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $546();
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $636() {
  return 16968 | 0;
 }
 
 function $637() {
  var $1_1 = 0;
  $1_1 = 24;
  return (128 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $638() {
  var $1_1 = 0;
  $1_1 = 24;
  return (127 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $639() {
  return 16992 | 0;
 }
 
 function $640() {
  var $1_1 = 0;
  $1_1 = 24;
  return (128 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $641() {
  var $1_1 = 0;
  $1_1 = 24;
  return (127 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $642() {
  return 16980 | 0;
 }
 
 function $643() {
  return 0 & 255 | 0 | 0;
 }
 
 function $644() {
  return 255 & 255 | 0 | 0;
 }
 
 function $645() {
  return 17004 | 0;
 }
 
 function $646() {
  var $1_1 = 0;
  $1_1 = 16;
  return (32768 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $647() {
  var $1_1 = 0;
  $1_1 = 16;
  return (32767 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $648() {
  return 17016 | 0;
 }
 
 function $649() {
  return 0 & 65535 | 0 | 0;
 }
 
 function $650() {
  return 65535 & 65535 | 0 | 0;
 }
 
 function $651() {
  return 17028 | 0;
 }
 
 function $652() {
  return -2147483648 | 0;
 }
 
 function $653() {
  return 2147483647 | 0;
 }
 
 function $654() {
  return 17040 | 0;
 }
 
 function $655() {
  return 0 | 0;
 }
 
 function $656() {
  return -1 | 0;
 }
 
 function $657() {
  return 17052 | 0;
 }
 
 function $658() {
  return -2147483648 | 0;
 }
 
 function $659() {
  return 17064 | 0;
 }
 
 function $660() {
  return 0 | 0;
 }
 
 function $661() {
  return 17076 | 0;
 }
 
 function $662() {
  return 17088 | 0;
 }
 
 function $663() {
  return 3692 | 0;
 }
 
 function $664() {
  return 3732 | 0;
 }
 
 function $665() {
  return 3772 | 0;
 }
 
 function $666() {
  return 3812 | 0;
 }
 
 function $667() {
  return 3852 | 0;
 }
 
 function $668() {
  return 3892 | 0;
 }
 
 function $669() {
  return 3932 | 0;
 }
 
 function $670() {
  return 3972 | 0;
 }
 
 function $671() {
  return 4012 | 0;
 }
 
 function $672() {
  return 4052 | 0;
 }
 
 function $673() {
  return 4092 | 0;
 }
 
 function $674() {
  $634();
  return;
 }
 
 function $675($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $676($0_1) {
  $0_1 = $0_1 | 0;
  return (($0_1 | 32 | 0) + -97 | 0) >>> 0 < 6 >>> 0 | ($678($0_1 | 0) | 0 | 0) != (0 | 0) | 0 | 0;
 }
 
 function $677($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $676($0_1 | 0) | 0 | 0;
 }
 
 function $678($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function $679($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $678($0_1 | 0) | 0 | 0;
 }
 
 function $680() {
  return 18148 | 0;
 }
 
 function $681($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = $1_1 & 255 | 0;
    if (!$2_1) {
     break label$2
    }
    label$3 : {
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $3_1 = HEAPU8[$0_1 >> 0] | 0;
      if (!$3_1) {
       break label$1
      }
      if (($3_1 | 0) == ($1_1 & 255 | 0 | 0)) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      if ($0_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $2_1 = Math_imul($2_1, 16843009);
     label$6 : while (1) {
      $3_1 = $3_1 ^ $2_1 | 0;
      if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$5
      }
      $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $0_1 = $0_1 + 4 | 0;
      if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     label$8 : while (1) {
      $3_1 = $0_1;
      $2_1 = HEAPU8[$3_1 >> 0] | 0;
      if (!$2_1) {
       break label$7
      }
      $0_1 = $3_1 + 1 | 0;
      if (($2_1 | 0) != ($1_1 & 255 | 0 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    return $3_1 | 0;
   }
   return $0_1 + ($1940($0_1 | 0) | 0) | 0 | 0;
  }
  return $0_1 | 0;
 }
 
 function $682($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $681($0_1 | 0, $1_1 | 0) | 0;
  return ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0) ? $0_1 : 0) | 0;
 }
 
 function $683($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = HEAPU8[$1_1 >> 0] | 0;
  label$1 : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   if (($3_1 | 0) != ($2_1 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    if (!$3_1) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    $0_1 = $0_1 + 1 | 0;
    if (($3_1 | 0) == ($2_1 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3_1 - ($2_1 & 255 | 0) | 0 | 0;
 }
 
 function $684($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  $3_1 = 0;
  label$2 : {
   $4_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$4_1) {
    break label$2
   }
   label$3 : {
    label$4 : while (1) {
     $5_1 = HEAPU8[$1_1 >> 0] | 0;
     if (($4_1 & 255 | 0 | 0) != ($5_1 | 0)) {
      break label$3
     }
     $2_1 = $2_1 + -1 | 0;
     if (!$2_1) {
      break label$3
     }
     if (!$5_1) {
      break label$3
     }
     $1_1 = $1_1 + 1 | 0;
     $4_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
     $0_1 = $0_1 + 1 | 0;
     if ($4_1) {
      continue label$4
     }
     break label$2;
    };
   }
   $3_1 = $4_1;
  }
  return ($3_1 & 255 | 0) - (HEAPU8[$1_1 >> 0] | 0) | 0 | 0;
 }
 
 function $685($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = ($1940($0_1 | 0) | 0) + 1 | 0;
   $2_1 = $1923($1_1 | 0) | 0;
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $1932($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $686($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $27_1 = 0, $28_1 = 0, $2_1 = 0, $2$hi = 0, $29_1 = 0, $30_1 = 0, $3_1 = 0, $5_1 = 0, $5$hi = 0, $8$hi = 0, $9_1 = 0, $9$hi = 0, $11_1 = 0, $11$hi = 0, $14$hi = 0, $15_1 = 0, $15$hi = 0, $16_1 = 0, $16$hi = 0, $18_1 = 0, $18$hi = 0, $21_1 = 0, $24_1 = 0;
  $3_1 = $0_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAPU16[i64toi32_i32$2 >> 1] | 0 | ((HEAPU16[(i64toi32_i32$2 + 2 | 0) >> 1] | 0) << 16 | 0) | 0;
  i64toi32_i32$1 = 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAPU16[(i64toi32_i32$2 + 4 | 0) >> 1] | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $27_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $27_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $8$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$0 = $5_1;
  i64toi32_i32$2 = $8$hi;
  i64toi32_i32$3 = $27_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $9_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $9$hi = i64toi32_i32$2;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$2 = HEAPU16[i64toi32_i32$1 >> 1] | 0 | ((HEAPU16[(i64toi32_i32$1 + 2 | 0) >> 1] | 0) << 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  $11_1 = i64toi32_i32$2;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = HEAPU16[(i64toi32_i32$1 + 4 | 0) >> 1] | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $28_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $28_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$2 = $11_1;
  i64toi32_i32$1 = $14$hi;
  i64toi32_i32$3 = $28_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $15_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$2 = $15$hi;
  i64toi32_i32$2 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$1 | 0, $15_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $16_1 = i64toi32_i32$2;
  $16$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = HEAPU16[(i64toi32_i32$0 + 6 | 0) >> 1] | 0;
  i64toi32_i32$2 = 0;
  $18_1 = i64toi32_i32$1;
  $18$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $16$hi;
  i64toi32_i32$0 = $16_1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$3 = $18_1;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $2_1 = i64toi32_i32$4;
  $2$hi = i64toi32_i32$5;
  HEAP16[$3_1 >> 1] = i64toi32_i32$4;
  $21_1 = $0_1;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $29_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $29_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
  }
  HEAP16[($21_1 + 4 | 0) >> 1] = $29_1;
  $24_1 = $0_1;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$5 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 16;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $30_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
   $30_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  HEAP16[($24_1 + 2 | 0) >> 1] = $30_1;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$5 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  i64toi32_i32$0 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$0 | 0;
 }
 
 function $687($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  i64toi32_i32$0 = $686($0_1 | 0, 17320 + 6 | 0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $6_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $6_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return $6_1 | 0;
 }
 
 function $688() {
  return $687(17320 | 0) | 0 | 0;
 }
 
 function $689($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$3
     }
     return $690($0_1 | 0) | 0 | 0;
    }
    $1_1 = $1938($0_1 | 0) | 0;
    $2_1 = $690($0_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $1939($0_1 | 0);
    return $2_1 | 0;
   }
   $2_1 = 0;
   label$4 : {
    if (!(HEAP32[(0 + 17480 | 0) >> 2] | 0)) {
     break label$4
    }
    $2_1 = $689(HEAP32[(0 + 17480 | 0) >> 2] | 0 | 0) | 0;
   }
   label$5 : {
    $0_1 = HEAP32[($737() | 0) >> 2] | 0;
    if (!$0_1) {
     break label$5
    }
    label$6 : while (1) {
     $1_1 = 0;
     label$7 : {
      if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$7
      }
      $1_1 = $1938($0_1 | 0) | 0;
     }
     label$8 : {
      if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      $2_1 = $690($0_1 | 0) | 0 | $2_1 | 0;
     }
     label$9 : {
      if (!$1_1) {
       break label$9
      }
      $1939($0_1 | 0);
     }
     $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$6
     }
     break label$6;
    };
   }
   $738();
  }
  return $2_1 | 0;
 }
 
 function $690($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
   if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
    break label$1
   }
   return -1 | 0;
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$2
   }
   i64toi32_i32$1 = $1_1 - $2_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  return 0 | 0;
 }
 
 function $691($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = -1;
  label$1 : {
   if ($696($0_1 | 0) | 0) {
    break label$1
   }
   if ((FUNCTION_TABLE[HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $2_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $692($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $693($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $693($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $1932($4_1 + 8 | 0 | 0, 4104 | 0, 144 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1_1 + -1 | 0) >>> 0 < 2147483647 >>> 0) {
      break label$3
     }
     if ($1_1) {
      break label$2
     }
     $0_1 = $4_1 + 159 | 0;
     $1_1 = 1;
    }
    HEAP32[($4_1 + 52 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
    $5_1 = -2 - $0_1 | 0;
    $1_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $5_1 : $1_1;
    HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
    $0_1 = $0_1 + $1_1 | 0;
    HEAP32[($4_1 + 36 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
    $0_1 = $710($4_1 + 8 | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $1_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
    HEAP8[($1_1 - (($1_1 | 0) == (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0)) | 0) >> 0] = 0;
    break label$1;
   }
   HEAP32[($680() | 0) >> 2] = 61;
   $0_1 = -1;
  }
  global$0 = $4_1 + 160 | 0;
  return $0_1 | 0;
 }
 
 function $694($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $6_1 = $3_1;
  $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) - $3_1 | 0;
  $3_1 = $3_1 >>> 0 > $2_1 >>> 0 ? $2_1 : $3_1;
  $1932($6_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + $3_1 | 0;
  return $2_1 | 0;
 }
 
 function $695($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  i64toi32_i32$0 = $1$hi;
  $0_1 = $752($1955(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 & 255 | 0 | 0, $3_1 + 8 | 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $1_1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  global$0 = i64toi32_i32$2 + 16 | 0;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$3 = $0_1 ? -1 : $1_1;
  i64toi32_i32$2 = $0_1 ? i64toi32_i32$1 : i64toi32_i32$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$3 | 0;
 }
 
 function $696($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  label$2 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 4 | 0)) {
    break label$2
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  $2_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  return ($1_1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function $697($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$2_1) {
      break label$3
     }
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     $4_1 = $1_1 & 255 | 0;
     label$4 : while (1) {
      if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($4_1 | 0)) {
       break label$2
      }
      $0_1 = $0_1 + 1 | 0;
      $2_1 = $2_1 + -1 | 0;
      $3_1 = ($2_1 | 0) != (0 | 0);
      if (!$2_1) {
       break label$3
      }
      if ($0_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$3_1) {
     break label$1
    }
   }
   label$5 : {
    if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0)) {
     break label$5
    }
    if ($2_1 >>> 0 < 4 >>> 0) {
     break label$5
    }
    $4_1 = Math_imul($1_1 & 255 | 0, 16843009);
    label$6 : while (1) {
     $3_1 = (HEAP32[$0_1 >> 2] | 0) ^ $4_1 | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $0_1 = $0_1 + 4 | 0;
     $2_1 = $2_1 + -4 | 0;
     if ($2_1 >>> 0 > 3 >>> 0) {
      continue label$6
     }
     break label$6;
    };
   }
   if (!$2_1) {
    break label$1
   }
   $3_1 = $1_1 & 255 | 0;
   label$7 : while (1) {
    label$8 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($3_1 | 0)) {
      break label$8
     }
     return $0_1 | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return 0 | 0;
 }
 
 function $698($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ($1_1 >>> 0 <= 127 >>> 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (HEAP32[(HEAP32[(($753() | 0) + 172 | 0) >> 2] | 0) >> 2] | 0) {
       break label$4
      }
      if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$1
      }
      HEAP32[($680() | 0) >> 2] = 25;
      break label$3;
     }
     label$5 : {
      if ($1_1 >>> 0 > 2047 >>> 0) {
       break label$5
      }
      HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     label$6 : {
      label$7 : {
       if ($1_1 >>> 0 < 55296 >>> 0) {
        break label$7
       }
       if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
        break label$6
       }
      }
      HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     label$8 : {
      if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break label$8
      }
      HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     HEAP32[($680() | 0) >> 2] = 25;
    }
    $3_1 = -1;
   }
   return $3_1 | 0;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return 1 | 0;
 }
 
 function $699($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $698($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $700($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $10_1 = 0, $3$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $3_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $10_1 & 2047 | 0;
   if (($2_1 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($2_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0_1 != 0.0) {
       break label$4
      }
      $2_1 = 0;
      break label$3;
     }
     $0_1 = +$700(+($0_1 * 18446744073709551615.0), $1_1 | 0);
     $2_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1_1 >> 2] = $2_1;
    return +$0_1;
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1022 | 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return +$0_1;
 }
 
 function $701($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 204 | 0) >> 2] = $2_1;
  $2_1 = 0;
  $1933($5_1 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($702(0 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $1_1 = -1;
    break label$1;
   }
   label$3 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    $2_1 = $1938($0_1 | 0) | 0;
   }
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$4 : {
    if ((HEAP8[($0_1 + 74 | 0) >> 0] | 0 | 0) > (0 | 0)) {
     break label$4
    }
    HEAP32[$0_1 >> 2] = $6_1 & -33 | 0;
   }
   $6_1 = $6_1 & 32 | 0;
   label$5 : {
    label$6 : {
     if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
      break label$6
     }
     $1_1 = $702($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
     break label$5;
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = 80;
    HEAP32[($0_1 + 16 | 0) >> 2] = $5_1 + 80 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $5_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
    $7_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
    $1_1 = $702($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
    if (!$7_1) {
     break label$5
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $7_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    $1_1 = $3_1 ? $1_1 : -1;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $3_1 | $6_1 | 0;
   $1_1 = $3_1 & 32 | 0 ? -1 : $1_1;
   if (!$2_1) {
    break label$1
   }
   $1939($0_1 | 0);
  }
  global$0 = $5_1 + 208 | 0;
  return $1_1 | 0;
 }
 
 function $702($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $13_1 = 0, $14_1 = 0, $19_1 = 0, i64toi32_i32$1 = 0, $15_1 = 0, $12_1 = 0, $20_1 = 0, i64toi32_i32$0 = 0, $17_1 = 0, $11_1 = 0, $18_1 = 0, i64toi32_i32$2 = 0, $16_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $9_1 = 0, $22_1 = 0, $22$hi = 0, $10_1 = 0, $21_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $8_1 = 0, $275_1 = 0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
  $8_1 = $7_1 + 55 | 0;
  $9_1 = $7_1 + 56 | 0;
  $10_1 = 0;
  $11_1 = 0;
  $1_1 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (($11_1 | 0) < (0 | 0)) {
      break label$3
     }
     label$4 : {
      if (($1_1 | 0) <= (2147483647 - $11_1 | 0 | 0)) {
       break label$4
      }
      HEAP32[($680() | 0) >> 2] = 61;
      $11_1 = -1;
      break label$3;
     }
     $11_1 = $1_1 + $11_1 | 0;
    }
    $12_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
    $1_1 = $12_1;
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         $13_1 = HEAPU8[$1_1 >> 0] | 0;
         if (!$13_1) {
          break label$9
         }
         label$10 : while (1) {
          label$11 : {
           label$12 : {
            label$13 : {
             $13_1 = $13_1 & 255 | 0;
             if ($13_1) {
              break label$13
             }
             $13_1 = $1_1;
             break label$12;
            }
            if (($13_1 | 0) != (37 | 0)) {
             break label$11
            }
            $13_1 = $1_1;
            label$14 : while (1) {
             if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (37 | 0)) {
              break label$12
             }
             $14_1 = $1_1 + 2 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
             $13_1 = $13_1 + 1 | 0;
             $15_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
             $1_1 = $14_1;
             if (($15_1 | 0) == (37 | 0)) {
              continue label$14
             }
             break label$14;
            };
           }
           $1_1 = $13_1 - $12_1 | 0;
           label$15 : {
            if (!$0_1) {
             break label$15
            }
            $703($0_1 | 0, $12_1 | 0, $1_1 | 0);
           }
           if ($1_1) {
            continue label$2
           }
           $1_1 = $678(HEAP8[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0 | 0) | 0;
           $13_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           label$16 : {
            label$17 : {
             if (!$1_1) {
              break label$17
             }
             if ((HEAPU8[($13_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
              break label$17
             }
             $1_1 = $13_1 + 3 | 0;
             $16_1 = (HEAP8[($13_1 + 1 | 0) >> 0] | 0) + -48 | 0;
             $10_1 = 1;
             break label$16;
            }
            $1_1 = $13_1 + 1 | 0;
            $16_1 = -1;
           }
           HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
           $17_1 = 0;
           label$18 : {
            label$19 : {
             $15_1 = HEAP8[$1_1 >> 0] | 0;
             $14_1 = $15_1 + -32 | 0;
             if ($14_1 >>> 0 <= 31 >>> 0) {
              break label$19
             }
             $13_1 = $1_1;
             break label$18;
            }
            $17_1 = 0;
            $13_1 = $1_1;
            $14_1 = 1 << $14_1 | 0;
            if (!($14_1 & 75913 | 0)) {
             break label$18
            }
            label$20 : while (1) {
             $13_1 = $1_1 + 1 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $13_1;
             $17_1 = $14_1 | $17_1 | 0;
             $15_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
             $14_1 = $15_1 + -32 | 0;
             if ($14_1 >>> 0 >= 32 >>> 0) {
              break label$18
             }
             $1_1 = $13_1;
             $14_1 = 1 << $14_1 | 0;
             if ($14_1 & 75913 | 0) {
              continue label$20
             }
             break label$20;
            };
           }
           label$21 : {
            label$22 : {
             if (($15_1 | 0) != (42 | 0)) {
              break label$22
             }
             label$23 : {
              label$24 : {
               if (!($678(HEAP8[($13_1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                break label$24
               }
               $13_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
               if ((HEAPU8[($13_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                break label$24
               }
               HEAP32[((((HEAP8[($13_1 + 1 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
               $1_1 = $13_1 + 3 | 0;
               $18_1 = HEAP32[((((HEAP8[($13_1 + 1 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
               $10_1 = 1;
               break label$23;
              }
              if ($10_1) {
               break label$8
              }
              $10_1 = 0;
              $18_1 = 0;
              label$25 : {
               if (!$0_1) {
                break label$25
               }
               $1_1 = HEAP32[$2_1 >> 2] | 0;
               HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
               $18_1 = HEAP32[$1_1 >> 2] | 0;
              }
              $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0;
             }
             HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
             if (($18_1 | 0) > (-1 | 0)) {
              break label$21
             }
             $18_1 = 0 - $18_1 | 0;
             $17_1 = $17_1 | 8192 | 0;
             break label$21;
            }
            $18_1 = $704($7_1 + 76 | 0 | 0) | 0;
            if (($18_1 | 0) < (0 | 0)) {
             break label$8
            }
            $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           }
           $19_1 = -1;
           label$26 : {
            if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (46 | 0)) {
             break label$26
            }
            label$27 : {
             if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
              break label$27
             }
             label$28 : {
              if (!($678(HEAP8[($1_1 + 2 | 0) >> 0] | 0 | 0) | 0)) {
               break label$28
              }
              $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
              if ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
               break label$28
              }
              HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
              $19_1 = HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
              $1_1 = $1_1 + 4 | 0;
              HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
              break label$26;
             }
             if ($10_1) {
              break label$8
             }
             label$29 : {
              label$30 : {
               if ($0_1) {
                break label$30
               }
               $19_1 = 0;
               break label$29;
              }
              $1_1 = HEAP32[$2_1 >> 2] | 0;
              HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
              $19_1 = HEAP32[$1_1 >> 2] | 0;
             }
             $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 2 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
             break label$26;
            }
            HEAP32[($7_1 + 76 | 0) >> 2] = $1_1 + 1 | 0;
            $19_1 = $704($7_1 + 76 | 0 | 0) | 0;
            $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           }
           $13_1 = 0;
           label$31 : while (1) {
            $14_1 = $13_1;
            $20_1 = -1;
            if (((HEAP8[$1_1 >> 0] | 0) + -65 | 0) >>> 0 > 57 >>> 0) {
             break label$1
            }
            $15_1 = $1_1 + 1 | 0;
            HEAP32[($7_1 + 76 | 0) >> 2] = $15_1;
            $13_1 = HEAP8[$1_1 >> 0] | 0;
            $1_1 = $15_1;
            $13_1 = HEAPU8[(($13_1 + Math_imul($14_1, 58) | 0) + 4207 | 0) >> 0] | 0;
            if (($13_1 + -1 | 0) >>> 0 < 8 >>> 0) {
             continue label$31
            }
            break label$31;
           };
           label$32 : {
            label$33 : {
             label$34 : {
              if (($13_1 | 0) == (19 | 0)) {
               break label$34
              }
              if (!$13_1) {
               break label$1
              }
              label$35 : {
               if (($16_1 | 0) < (0 | 0)) {
                break label$35
               }
               HEAP32[($4_1 + ($16_1 << 2 | 0) | 0) >> 2] = $13_1;
               i64toi32_i32$2 = $3_1 + ($16_1 << 3 | 0) | 0;
               i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
               i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
               $275_1 = i64toi32_i32$0;
               i64toi32_i32$0 = $7_1;
               HEAP32[($7_1 + 64 | 0) >> 2] = $275_1;
               HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$1;
               break label$33;
              }
              if (!$0_1) {
               break label$5
              }
              $705($7_1 + 64 | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
              $15_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
              break label$32;
             }
             $20_1 = -1;
             if (($16_1 | 0) > (-1 | 0)) {
              break label$1
             }
            }
            $1_1 = 0;
            if (!$0_1) {
             continue label$2
            }
           }
           $21_1 = $17_1 & -65537 | 0;
           $13_1 = $17_1 & 8192 | 0 ? $21_1 : $17_1;
           $20_1 = 0;
           $16_1 = 4248;
           $17_1 = $9_1;
           label$36 : {
            label$37 : {
             label$38 : {
              label$39 : {
               label$40 : {
                label$41 : {
                 label$42 : {
                  label$43 : {
                   label$44 : {
                    label$45 : {
                     label$46 : {
                      label$47 : {
                       label$48 : {
                        label$49 : {
                         label$50 : {
                          label$51 : {
                           $1_1 = HEAP8[($15_1 + -1 | 0) >> 0] | 0;
                           $1_1 = $14_1 ? (($1_1 & 15 | 0 | 0) == (3 | 0) ? $1_1 & -33 | 0 : $1_1) : $1_1;
                           switch ($1_1 + -88 | 0 | 0) {
                           case 11:
                            break label$36;
                           case 9:
                           case 13:
                           case 14:
                           case 15:
                            break label$37;
                           case 27:
                            break label$42;
                           case 12:
                           case 17:
                            break label$45;
                           case 23:
                            break label$46;
                           case 0:
                           case 32:
                            break label$47;
                           case 24:
                            break label$48;
                           case 22:
                            break label$49;
                           case 29:
                            break label$50;
                           case 1:
                           case 2:
                           case 3:
                           case 4:
                           case 5:
                           case 6:
                           case 7:
                           case 8:
                           case 10:
                           case 16:
                           case 18:
                           case 19:
                           case 20:
                           case 21:
                           case 25:
                           case 26:
                           case 28:
                           case 30:
                           case 31:
                            break label$6;
                           default:
                            break label$51;
                           };
                          }
                          $17_1 = $9_1;
                          label$52 : {
                           switch ($1_1 + -65 | 0 | 0) {
                           case 0:
                           case 4:
                           case 5:
                           case 6:
                            break label$37;
                           case 2:
                            break label$40;
                           case 1:
                           case 3:
                            break label$6;
                           default:
                            break label$52;
                           };
                          }
                          if (($1_1 | 0) == (83 | 0)) {
                           break label$41
                          }
                          break label$7;
                         }
                         $20_1 = 0;
                         $16_1 = 4248;
                         i64toi32_i32$2 = $7_1;
                         i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                         $22_1 = i64toi32_i32$1;
                         $22$hi = i64toi32_i32$0;
                         break label$44;
                        }
                        $1_1 = 0;
                        label$53 : {
                         switch ($14_1 & 255 | 0 | 0) {
                         case 0:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$2;
                         case 1:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$2;
                         case 2:
                          i64toi32_i32$1 = $11_1;
                          i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                          i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                          HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                          continue label$2;
                         case 3:
                          HEAP16[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 1] = $11_1;
                          continue label$2;
                         case 4:
                          HEAP8[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 0] = $11_1;
                          continue label$2;
                         case 6:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$2;
                         case 7:
                          break label$53;
                         default:
                          continue label$2;
                         };
                        }
                        i64toi32_i32$1 = $11_1;
                        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                        i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                        HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                        continue label$2;
                       }
                       $19_1 = $19_1 >>> 0 > 8 >>> 0 ? $19_1 : 8;
                       $13_1 = $13_1 | 8 | 0;
                       $1_1 = 120;
                      }
                      $20_1 = 0;
                      $16_1 = 4248;
                      i64toi32_i32$2 = $7_1;
                      i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                      $12_1 = $706(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0, $1_1 & 32 | 0 | 0) | 0;
                      if (!($13_1 & 8 | 0)) {
                       break label$43
                      }
                      i64toi32_i32$2 = $7_1;
                      i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                      if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
                       break label$43
                      }
                      $16_1 = ($1_1 >>> 4 | 0) + 4248 | 0;
                      $20_1 = 2;
                      break label$43;
                     }
                     $20_1 = 0;
                     $16_1 = 4248;
                     i64toi32_i32$2 = $7_1;
                     i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                     i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                     $12_1 = $707(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0) | 0;
                     if (!($13_1 & 8 | 0)) {
                      break label$43
                     }
                     $1_1 = $9_1 - $12_1 | 0;
                     $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1 + 1 | 0;
                     break label$43;
                    }
                    label$60 : {
                     i64toi32_i32$2 = $7_1;
                     i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                     i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                     $22_1 = i64toi32_i32$1;
                     $22$hi = i64toi32_i32$0;
                     i64toi32_i32$2 = i64toi32_i32$1;
                     i64toi32_i32$1 = -1;
                     i64toi32_i32$3 = -1;
                     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                      $30_1 = 1
                     } else {
                      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                        $31_1 = 0
                       } else {
                        $31_1 = 1
                       }
                       $32_1 = $31_1;
                      } else {
                       $32_1 = 0
                      }
                      $30_1 = $32_1;
                     }
                     if ($30_1) {
                      break label$60
                     }
                     i64toi32_i32$2 = $22$hi;
                     i64toi32_i32$2 = 0;
                     i64toi32_i32$3 = 0;
                     i64toi32_i32$0 = $22$hi;
                     i64toi32_i32$1 = $22_1;
                     i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
                     i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                     $22_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
                     $22$hi = i64toi32_i32$5;
                     i64toi32_i32$3 = $7_1;
                     HEAP32[($7_1 + 64 | 0) >> 2] = $22_1;
                     HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$5;
                     $20_1 = 1;
                     $16_1 = 4248;
                     break label$44;
                    }
                    label$61 : {
                     if (!($13_1 & 2048 | 0)) {
                      break label$61
                     }
                     $20_1 = 1;
                     $16_1 = 4249;
                     break label$44;
                    }
                    $20_1 = $13_1 & 1 | 0;
                    $16_1 = $20_1 ? 4250 : 4248;
                   }
                   i64toi32_i32$5 = $22$hi;
                   $12_1 = $708($22_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
                  }
                  $13_1 = ($19_1 | 0) > (-1 | 0) ? $13_1 & -65537 | 0 : $13_1;
                  i64toi32_i32$2 = $7_1;
                  i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                  $22_1 = i64toi32_i32$5;
                  $22$hi = i64toi32_i32$3;
                  label$62 : {
                   if ($19_1) {
                    break label$62
                   }
                   i64toi32_i32$3 = $22$hi;
                   if (!!($22_1 | i64toi32_i32$3 | 0)) {
                    break label$62
                   }
                   $19_1 = 0;
                   $12_1 = $9_1;
                   break label$7;
                  }
                  i64toi32_i32$3 = $22$hi;
                  $1_1 = ($9_1 - $12_1 | 0) + !($22_1 | i64toi32_i32$3 | 0) | 0;
                  $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1;
                  break label$7;
                 }
                 $20_1 = 0;
                 $1_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 $12_1 = $1_1 ? $1_1 : 4258;
                 $1_1 = $697($12_1 | 0, 0 | 0, $19_1 | 0) | 0;
                 $17_1 = $1_1 ? $1_1 : $12_1 + $19_1 | 0;
                 $13_1 = $21_1;
                 $19_1 = $1_1 ? $1_1 - $12_1 | 0 : $19_1;
                 break label$6;
                }
                label$63 : {
                 if (!$19_1) {
                  break label$63
                 }
                 $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 break label$39;
                }
                $1_1 = 0;
                $709($0_1 | 0, 32 | 0, $18_1 | 0, 0 | 0, $13_1 | 0);
                break label$38;
               }
               HEAP32[($7_1 + 12 | 0) >> 2] = 0;
               i64toi32_i32$2 = $7_1;
               i64toi32_i32$3 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
               i64toi32_i32$5 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
               HEAP32[($7_1 + 8 | 0) >> 2] = i64toi32_i32$3;
               HEAP32[($7_1 + 64 | 0) >> 2] = $7_1 + 8 | 0;
               $19_1 = -1;
               $14_1 = $7_1 + 8 | 0;
              }
              $1_1 = 0;
              label$64 : {
               label$65 : while (1) {
                $15_1 = HEAP32[$14_1 >> 2] | 0;
                if (!$15_1) {
                 break label$64
                }
                label$66 : {
                 $15_1 = $699($7_1 + 4 | 0 | 0, $15_1 | 0) | 0;
                 $12_1 = ($15_1 | 0) < (0 | 0);
                 if ($12_1) {
                  break label$66
                 }
                 if ($15_1 >>> 0 > ($19_1 - $1_1 | 0) >>> 0) {
                  break label$66
                 }
                 $14_1 = $14_1 + 4 | 0;
                 $1_1 = $15_1 + $1_1 | 0;
                 if ($19_1 >>> 0 > $1_1 >>> 0) {
                  continue label$65
                 }
                 break label$64;
                }
                break label$65;
               };
               $20_1 = -1;
               if ($12_1) {
                break label$1
               }
              }
              $709($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 | 0);
              label$67 : {
               if ($1_1) {
                break label$67
               }
               $1_1 = 0;
               break label$38;
              }
              $14_1 = 0;
              $15_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
              label$68 : while (1) {
               $12_1 = HEAP32[$15_1 >> 2] | 0;
               if (!$12_1) {
                break label$38
               }
               $12_1 = $699($7_1 + 4 | 0 | 0, $12_1 | 0) | 0;
               $14_1 = $12_1 + $14_1 | 0;
               if (($14_1 | 0) > ($1_1 | 0)) {
                break label$38
               }
               $703($0_1 | 0, $7_1 + 4 | 0 | 0, $12_1 | 0);
               $15_1 = $15_1 + 4 | 0;
               if ($14_1 >>> 0 < $1_1 >>> 0) {
                continue label$68
               }
               break label$68;
              };
             }
             $709($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 ^ 8192 | 0 | 0);
             $1_1 = ($18_1 | 0) > ($1_1 | 0) ? $18_1 : $1_1;
             continue label$2;
            }
            $1_1 = FUNCTION_TABLE[$5_1 | 0]($0_1, +HEAPF64[($7_1 + 64 | 0) >> 3], $18_1, $19_1, $13_1, $1_1) | 0;
            continue label$2;
           }
           i64toi32_i32$2 = $7_1;
           i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
           i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
           HEAP8[($7_1 + 55 | 0) >> 0] = i64toi32_i32$5;
           $19_1 = 1;
           $12_1 = $8_1;
           $17_1 = $9_1;
           $13_1 = $21_1;
           break label$6;
          }
          $14_1 = $1_1 + 1 | 0;
          HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
          $13_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
          $1_1 = $14_1;
          continue label$10;
         };
        }
        $20_1 = $11_1;
        if ($0_1) {
         break label$1
        }
        if (!$10_1) {
         break label$5
        }
        $1_1 = 1;
        label$69 : {
         label$70 : while (1) {
          $13_1 = HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
          if (!$13_1) {
           break label$69
          }
          $705($3_1 + ($1_1 << 3 | 0) | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
          $20_1 = 1;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (10 | 0)) {
           continue label$70
          }
          break label$1;
         };
        }
        $20_1 = 1;
        if ($1_1 >>> 0 >= 10 >>> 0) {
         break label$1
        }
        label$71 : while (1) {
         if (HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0) {
          break label$8
         }
         $20_1 = 1;
         $1_1 = $1_1 + 1 | 0;
         if (($1_1 | 0) == (10 | 0)) {
          break label$1
         }
         continue label$71;
        };
       }
       $20_1 = -1;
       break label$1;
      }
      $17_1 = $9_1;
     }
     $15_1 = $17_1 - $12_1 | 0;
     $17_1 = ($19_1 | 0) < ($15_1 | 0) ? $15_1 : $19_1;
     $14_1 = $20_1 + $17_1 | 0;
     $1_1 = ($18_1 | 0) < ($14_1 | 0) ? $14_1 : $18_1;
     $709($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 | 0);
     $703($0_1 | 0, $16_1 | 0, $20_1 | 0);
     $709($0_1 | 0, 48 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 65536 | 0 | 0);
     $709($0_1 | 0, 48 | 0, $17_1 | 0, $15_1 | 0, 0 | 0);
     $703($0_1 | 0, $12_1 | 0, $15_1 | 0);
     $709($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 8192 | 0 | 0);
     continue label$2;
    }
    break label$2;
   };
   $20_1 = 0;
  }
  global$0 = $7_1 + 80 | 0;
  return $20_1 | 0;
 }
 
 function $703($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   $1936($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  }
 }
 
 function $704($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = 0;
  label$1 : {
   if (!($678(HEAP8[(HEAP32[$0_1 >> 2] | 0) >> 0] | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = HEAP8[$2_1 >> 0] | 0;
    HEAP32[$0_1 >> 2] = $2_1 + 1 | 0;
    $1_1 = ($3_1 + Math_imul($1_1, 10) | 0) + -48 | 0;
    if ($678(HEAP8[($2_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $705($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $23_1 = 0, $31_1 = 0, $41_1 = 0, $49_1 = 0, $57_1 = 0, $65_1 = 0, $73_1 = 0;
  label$1 : {
   if ($1_1 >>> 0 > 20 >>> 0) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + -9 | 0 | 0) {
    case 0:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     return;
    case 1:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $23_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $23_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 2:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = 0;
     $31_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $31_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 3:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $41_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $41_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 4:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $49_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $49_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 5:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
     i64toi32_i32$1 = 0;
     $57_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $57_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 6:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $65_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $65_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 7:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
     i64toi32_i32$1 = 0;
     $73_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $73_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 8:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     HEAPF64[$0_1 >> 3] = +HEAPF64[$1_1 >> 3];
     return;
    case 9:
     break label$2;
    default:
     break label$1;
    };
   }
   FUNCTION_TABLE[$3_1 | 0]($0_1, $2_1);
  }
 }
 
 function $706($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $9_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = HEAPU8[(($0_1 & 15 | 0) + 4736 | 0) >> 0] | 0 | $2_1 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 4;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $9_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $9_1;
    $0$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $707($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $8_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = $0_1 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 3;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $8_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $8_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $8_1;
    $0$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $708($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $5$hi = 0, $3_1 = 0, $16_1 = 0, $16$hi = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $0$hi;
    $5_1 = $0_1;
    $5$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $5_1 = i64toi32_i32$0;
    $5$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($5_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$5 = ($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1_1 >> 0] = $0_1 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $2_1 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $5$hi;
    $0_1 = $5_1;
    $0$hi = i64toi32_i32$2;
    if ($2_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $5$hi;
   $2_1 = $5_1;
   if (!$2_1) {
    break label$4
   }
   label$5 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $3_1 = ($2_1 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1_1 >> 0] = $2_1 - Math_imul($3_1, 10) | 0 | 48 | 0;
    $4_1 = $2_1 >>> 0 > 9 >>> 0;
    $2_1 = $3_1;
    if ($4_1) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1_1 | 0;
 }
 
 function $709($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  label$1 : {
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break label$1
   }
   if ($4_1 & 73728 | 0) {
    break label$1
   }
   $2_1 = $2_1 - $3_1 | 0;
   $3_1 = $2_1 >>> 0 < 256 >>> 0;
   $1933($5_1 | 0, $1_1 & 255 | 0 | 0, ($3_1 ? $2_1 : 256) | 0) | 0;
   label$2 : {
    if ($3_1) {
     break label$2
    }
    label$3 : while (1) {
     $703($0_1 | 0, $5_1 | 0, 256 | 0);
     $2_1 = $2_1 + -256 | 0;
     if ($2_1 >>> 0 > 255 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   $703($0_1 | 0, $5_1 | 0, $2_1 | 0);
  }
  global$0 = $5_1 + 256 | 0;
 }
 
 function $710($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $701($0_1 | 0, $1_1 | 0, $2_1 | 0, 48 | 0, 49 | 0) | 0 | 0;
 }
 
 function $711($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $11_1 = 0, $18_1 = 0, $17_1 = 0, $23_1 = 0, $6_1 = 0, $10_1 = 0, i64toi32_i32$1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, $21_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $22_1 = 0, $16_1 = 0, $12_1 = 0, $19_1 = 0, $26_1 = 0.0, $24_1 = 0, $9_1 = 0, $24$hi = 0, $8_1 = 0, $13_1 = 0, $15_1 = 0, $20_1 = 0, $7_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $25$hi = 0, $47_1 = 0, $25_1 = 0, $158_1 = 0, $160$hi = 0, $162$hi = 0, $164_1 = 0, $164$hi = 0, $166$hi = 0, $170_1 = 0, $170$hi = 0, $818_1 = 0;
  $6_1 = global$0 - 560 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $713(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $44_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $45_1 = 0
      } else {
       $45_1 = 1
      }
      $46_1 = $45_1;
     } else {
      $46_1 = 0
     }
     $44_1 = $46_1;
    }
    if ($44_1) {
     break label$2
    }
    $8_1 = 1;
    $9_1 = 4752;
    $1_1 = -$1_1;
    i64toi32_i32$2 = $713(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$2;
    $24$hi = i64toi32_i32$1;
    break label$1;
   }
   $8_1 = 1;
   label$3 : {
    if (!($4_1 & 2048 | 0)) {
     break label$3
    }
    $9_1 = 4755;
    break label$1;
   }
   $9_1 = 4758;
   if ($4_1 & 1 | 0) {
    break label$1
   }
   $8_1 = 0;
   $7_1 = 1;
   $9_1 = 4753;
  }
  label$4 : {
   label$5 : {
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $24_1;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$5
    }
    $10_1 = $8_1 + 3 | 0;
    $709($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 & -65537 | 0 | 0);
    $703($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $11_1 = $5_1 & 32 | 0;
    $703($0_1 | 0, ($1_1 != $1_1 ? ($11_1 ? 4779 : 4783) : $11_1 ? 4771 : 4775) | 0, 3 | 0);
    $709($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$4;
   }
   $12_1 = $6_1 + 16 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $1_1 = +$700(+$1_1, $6_1 + 44 | 0 | 0);
       $1_1 = $1_1 + $1_1;
       if ($1_1 == 0.0) {
        break label$9
       }
       $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
       HEAP32[($6_1 + 44 | 0) >> 2] = $11_1 + -1 | 0;
       $13_1 = $5_1 | 32 | 0;
       if (($13_1 | 0) != (97 | 0)) {
        break label$8
       }
       break label$6;
      }
      $13_1 = $5_1 | 32 | 0;
      if (($13_1 | 0) == (97 | 0)) {
       break label$6
      }
      $14_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
      $15_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      break label$7;
     }
     $15_1 = $11_1 + -29 | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $15_1;
     $14_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
     $1_1 = $1_1 * 268435456.0;
    }
    $16_1 = ($15_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 : $6_1 + 336 | 0;
    $17_1 = $16_1;
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       if (!($1_1 < 4294967296.0 & $1_1 >= 0.0 | 0)) {
        break label$12
       }
       $11_1 = ~~$1_1 >>> 0;
       break label$11;
      }
      $11_1 = 0;
     }
     HEAP32[$17_1 >> 2] = $11_1;
     $17_1 = $17_1 + 4 | 0;
     $1_1 = ($1_1 - +($11_1 >>> 0)) * 1.0e9;
     if ($1_1 != 0.0) {
      continue label$10
     }
     break label$10;
    };
    label$13 : {
     label$14 : {
      if (($15_1 | 0) >= (1 | 0)) {
       break label$14
      }
      $3_1 = $15_1;
      $11_1 = $17_1;
      $18_1 = $16_1;
      break label$13;
     }
     $18_1 = $16_1;
     $3_1 = $15_1;
     label$15 : while (1) {
      $3_1 = ($3_1 | 0) < (29 | 0) ? $3_1 : 29;
      label$16 : {
       $11_1 = $17_1 + -4 | 0;
       if ($11_1 >>> 0 < $18_1 >>> 0) {
        break label$16
       }
       i64toi32_i32$1 = 0;
       $25_1 = $3_1;
       $25$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $24_1 = 0;
       $24$hi = i64toi32_i32$1;
       label$17 : while (1) {
        $158_1 = $11_1;
        i64toi32_i32$0 = $11_1;
        i64toi32_i32$1 = HEAP32[$11_1 >> 2] | 0;
        i64toi32_i32$2 = 0;
        $160$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $25$hi;
        i64toi32_i32$2 = $160$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $25$hi;
        i64toi32_i32$3 = $25_1;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $47_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $47_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $162$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $24$hi;
        i64toi32_i32$2 = $24_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
        $164_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $164$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $162$hi;
        i64toi32_i32$1 = $47_1;
        i64toi32_i32$2 = $164$hi;
        i64toi32_i32$3 = $164_1;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $24_1 = i64toi32_i32$4;
        $24$hi = i64toi32_i32$5;
        $166$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $24_1 = i64toi32_i32$1;
        $24$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $170_1 = i64toi32_i32$1;
        $170$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $166$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$1 = $170$hi;
        i64toi32_i32$3 = $170_1;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        HEAP32[$158_1 >> 2] = i64toi32_i32$2;
        $11_1 = $11_1 + -4 | 0;
        if ($11_1 >>> 0 >= $18_1 >>> 0) {
         continue label$17
        }
        break label$17;
       };
       i64toi32_i32$4 = $24$hi;
       $11_1 = $24_1;
       if (!$11_1) {
        break label$16
       }
       $18_1 = $18_1 + -4 | 0;
       HEAP32[$18_1 >> 2] = $11_1;
      }
      label$18 : {
       label$19 : while (1) {
        $11_1 = $17_1;
        if ($11_1 >>> 0 <= $18_1 >>> 0) {
         break label$18
        }
        $17_1 = $11_1 + -4 | 0;
        if (!(HEAP32[$17_1 >> 2] | 0)) {
         continue label$19
        }
        break label$19;
       };
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) - $3_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $17_1 = $11_1;
      if (($3_1 | 0) > (0 | 0)) {
       continue label$15
      }
      break label$15;
     };
    }
    label$20 : {
     if (($3_1 | 0) > (-1 | 0)) {
      break label$20
     }
     $19_1 = (($14_1 + 25 | 0 | 0) / (9 | 0) | 0) + 1 | 0;
     $20_1 = ($13_1 | 0) == (102 | 0);
     label$21 : while (1) {
      $10_1 = ($3_1 | 0) < (-9 | 0) ? 9 : 0 - $3_1 | 0;
      label$22 : {
       label$23 : {
        if ($18_1 >>> 0 < $11_1 >>> 0) {
         break label$23
        }
        $18_1 = HEAP32[$18_1 >> 2] | 0 ? $18_1 : $18_1 + 4 | 0;
        break label$22;
       }
       $21_1 = 1e9 >>> $10_1 | 0;
       $22_1 = (-1 << $10_1 | 0) ^ -1 | 0;
       $3_1 = 0;
       $17_1 = $18_1;
       label$24 : while (1) {
        $23_1 = HEAP32[$17_1 >> 2] | 0;
        HEAP32[$17_1 >> 2] = ($23_1 >>> $10_1 | 0) + $3_1 | 0;
        $3_1 = Math_imul($23_1 & $22_1 | 0, $21_1);
        $17_1 = $17_1 + 4 | 0;
        if ($17_1 >>> 0 < $11_1 >>> 0) {
         continue label$24
        }
        break label$24;
       };
       $18_1 = HEAP32[$18_1 >> 2] | 0 ? $18_1 : $18_1 + 4 | 0;
       if (!$3_1) {
        break label$22
       }
       HEAP32[$11_1 >> 2] = $3_1;
       $11_1 = $11_1 + 4 | 0;
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $10_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $17_1 = $20_1 ? $16_1 : $18_1;
      $11_1 = (($11_1 - $17_1 | 0) >> 2 | 0 | 0) > ($19_1 | 0) ? $17_1 + ($19_1 << 2 | 0) | 0 : $11_1;
      if (($3_1 | 0) < (0 | 0)) {
       continue label$21
      }
      break label$21;
     };
    }
    $17_1 = 0;
    label$25 : {
     if ($18_1 >>> 0 >= $11_1 >>> 0) {
      break label$25
     }
     $17_1 = Math_imul(($16_1 - $18_1 | 0) >> 2 | 0, 9);
     $3_1 = 10;
     $23_1 = HEAP32[$18_1 >> 2] | 0;
     if ($23_1 >>> 0 < 10 >>> 0) {
      break label$25
     }
     label$26 : while (1) {
      $17_1 = $17_1 + 1 | 0;
      $3_1 = Math_imul($3_1, 10);
      if ($23_1 >>> 0 >= $3_1 >>> 0) {
       continue label$26
      }
      break label$26;
     };
    }
    label$27 : {
     $3_1 = ($14_1 - (($13_1 | 0) == (102 | 0) ? 0 : $17_1) | 0) - (($14_1 | 0) != (0 | 0) & ($13_1 | 0) == (103 | 0) | 0) | 0;
     if (($3_1 | 0) >= (Math_imul(($11_1 - $16_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break label$27
     }
     $23_1 = $3_1 + 9216 | 0;
     $21_1 = ($23_1 | 0) / (9 | 0) | 0;
     $10_1 = (($21_1 << 2 | 0) + (($15_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 | 4 | 0 : $6_1 + 340 | 0) | 0) + -4096 | 0;
     $3_1 = 10;
     label$28 : {
      $23_1 = $23_1 - Math_imul($21_1, 9) | 0;
      if (($23_1 | 0) > (7 | 0)) {
       break label$28
      }
      label$29 : while (1) {
       $3_1 = Math_imul($3_1, 10);
       $23_1 = $23_1 + 1 | 0;
       if (($23_1 | 0) != (8 | 0)) {
        continue label$29
       }
       break label$29;
      };
     }
     $21_1 = HEAP32[$10_1 >> 2] | 0;
     $22_1 = ($21_1 >>> 0) / ($3_1 >>> 0) | 0;
     $23_1 = $21_1 - Math_imul($22_1, $3_1) | 0;
     label$30 : {
      label$31 : {
       $19_1 = $10_1 + 4 | 0;
       if (($19_1 | 0) != ($11_1 | 0)) {
        break label$31
       }
       if (!$23_1) {
        break label$30
       }
      }
      $20_1 = $3_1 >>> 1 | 0;
      $26_1 = $23_1 >>> 0 < $20_1 >>> 0 ? .5 : ($19_1 | 0) == ($11_1 | 0) ? (($23_1 | 0) == ($20_1 | 0) ? 1.0 : 1.5) : 1.5;
      $1_1 = $22_1 & 1 | 0 ? 9007199254740994.0 : 9007199254740992.0;
      label$32 : {
       if ($7_1) {
        break label$32
       }
       if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (45 | 0)) {
        break label$32
       }
       $26_1 = -$26_1;
       $1_1 = -$1_1;
      }
      $23_1 = $21_1 - $23_1 | 0;
      HEAP32[$10_1 >> 2] = $23_1;
      if ($1_1 + $26_1 == $1_1) {
       break label$30
      }
      $17_1 = $23_1 + $3_1 | 0;
      HEAP32[$10_1 >> 2] = $17_1;
      label$33 : {
       if ($17_1 >>> 0 < 1e9 >>> 0) {
        break label$33
       }
       label$34 : while (1) {
        HEAP32[$10_1 >> 2] = 0;
        label$35 : {
         $10_1 = $10_1 + -4 | 0;
         if ($10_1 >>> 0 >= $18_1 >>> 0) {
          break label$35
         }
         $18_1 = $18_1 + -4 | 0;
         HEAP32[$18_1 >> 2] = 0;
        }
        $17_1 = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
        HEAP32[$10_1 >> 2] = $17_1;
        if ($17_1 >>> 0 > 999999999 >>> 0) {
         continue label$34
        }
        break label$34;
       };
      }
      $17_1 = Math_imul(($16_1 - $18_1 | 0) >> 2 | 0, 9);
      $3_1 = 10;
      $23_1 = HEAP32[$18_1 >> 2] | 0;
      if ($23_1 >>> 0 < 10 >>> 0) {
       break label$30
      }
      label$36 : while (1) {
       $17_1 = $17_1 + 1 | 0;
       $3_1 = Math_imul($3_1, 10);
       if ($23_1 >>> 0 >= $3_1 >>> 0) {
        continue label$36
       }
       break label$36;
      };
     }
     $3_1 = $10_1 + 4 | 0;
     $11_1 = $11_1 >>> 0 > $3_1 >>> 0 ? $3_1 : $11_1;
    }
    label$37 : {
     label$38 : while (1) {
      $3_1 = $11_1;
      $23_1 = $11_1 >>> 0 <= $18_1 >>> 0;
      if ($23_1) {
       break label$37
      }
      $11_1 = $3_1 + -4 | 0;
      if (!(HEAP32[$11_1 >> 2] | 0)) {
       continue label$38
      }
      break label$38;
     };
    }
    label$39 : {
     label$40 : {
      if (($13_1 | 0) == (103 | 0)) {
       break label$40
      }
      $22_1 = $4_1 & 8 | 0;
      break label$39;
     }
     $11_1 = $14_1 ? $14_1 : 1;
     $10_1 = ($11_1 | 0) > ($17_1 | 0) & ($17_1 | 0) > (-5 | 0) | 0;
     $14_1 = ($10_1 ? $17_1 ^ -1 | 0 : -1) + $11_1 | 0;
     $5_1 = ($10_1 ? -1 : -2) + $5_1 | 0;
     $22_1 = $4_1 & 8 | 0;
     if ($22_1) {
      break label$39
     }
     $11_1 = -9;
     label$41 : {
      if ($23_1) {
       break label$41
      }
      $10_1 = HEAP32[($3_1 + -4 | 0) >> 2] | 0;
      if (!$10_1) {
       break label$41
      }
      $23_1 = 10;
      $11_1 = 0;
      if (($10_1 >>> 0) % (10 >>> 0) | 0) {
       break label$41
      }
      label$42 : while (1) {
       $21_1 = $11_1;
       $11_1 = $11_1 + 1 | 0;
       $23_1 = Math_imul($23_1, 10);
       if (!(($10_1 >>> 0) % ($23_1 >>> 0) | 0)) {
        continue label$42
       }
       break label$42;
      };
      $11_1 = $21_1 ^ -1 | 0;
     }
     $23_1 = Math_imul(($3_1 - $16_1 | 0) >> 2 | 0, 9);
     label$43 : {
      if (($5_1 & -33 | 0 | 0) != (70 | 0)) {
       break label$43
      }
      $22_1 = 0;
      $11_1 = ($23_1 + $11_1 | 0) + -9 | 0;
      $11_1 = ($11_1 | 0) > (0 | 0) ? $11_1 : 0;
      $14_1 = ($14_1 | 0) < ($11_1 | 0) ? $14_1 : $11_1;
      break label$39;
     }
     $22_1 = 0;
     $11_1 = (($17_1 + $23_1 | 0) + $11_1 | 0) + -9 | 0;
     $11_1 = ($11_1 | 0) > (0 | 0) ? $11_1 : 0;
     $14_1 = ($14_1 | 0) < ($11_1 | 0) ? $14_1 : $11_1;
    }
    $20_1 = $14_1 | $22_1 | 0;
    $23_1 = ($20_1 | 0) != (0 | 0);
    label$44 : {
     label$45 : {
      $21_1 = $5_1 & -33 | 0;
      if (($21_1 | 0) != (70 | 0)) {
       break label$45
      }
      $11_1 = ($17_1 | 0) > (0 | 0) ? $17_1 : 0;
      break label$44;
     }
     label$46 : {
      $11_1 = $17_1 >> 31 | 0;
      i64toi32_i32$4 = 0;
      $11_1 = $708(($17_1 + $11_1 | 0) ^ $11_1 | 0 | 0, i64toi32_i32$4 | 0, $12_1 | 0) | 0;
      if (($12_1 - $11_1 | 0 | 0) > (1 | 0)) {
       break label$46
      }
      label$47 : while (1) {
       $11_1 = $11_1 + -1 | 0;
       HEAP8[$11_1 >> 0] = 48;
       if (($12_1 - $11_1 | 0 | 0) < (2 | 0)) {
        continue label$47
       }
       break label$47;
      };
     }
     $19_1 = $11_1 + -2 | 0;
     HEAP8[$19_1 >> 0] = $5_1;
     HEAP8[($11_1 + -1 | 0) >> 0] = ($17_1 | 0) < (0 | 0) ? 45 : 43;
     $11_1 = $12_1 - $19_1 | 0;
    }
    $10_1 = ((($8_1 + $14_1 | 0) + $23_1 | 0) + $11_1 | 0) + 1 | 0;
    $709($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
    $703($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $709($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 65536 | 0 | 0);
    label$48 : {
     label$49 : {
      label$50 : {
       label$51 : {
        if (($21_1 | 0) != (70 | 0)) {
         break label$51
        }
        $21_1 = $6_1 + 16 | 0 | 8 | 0;
        $17_1 = $6_1 + 16 | 0 | 9 | 0;
        $23_1 = $18_1 >>> 0 > $16_1 >>> 0 ? $16_1 : $18_1;
        $18_1 = $23_1;
        label$52 : while (1) {
         i64toi32_i32$5 = $18_1;
         i64toi32_i32$4 = HEAP32[$18_1 >> 2] | 0;
         i64toi32_i32$0 = 0;
         $11_1 = $708(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $17_1 | 0) | 0;
         label$53 : {
          label$54 : {
           if (($18_1 | 0) == ($23_1 | 0)) {
            break label$54
           }
           if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$53
           }
           label$55 : while (1) {
            $11_1 = $11_1 + -1 | 0;
            HEAP8[$11_1 >> 0] = 48;
            if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$55
            }
            break label$53;
           };
          }
          if (($11_1 | 0) != ($17_1 | 0)) {
           break label$53
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $11_1 = $21_1;
         }
         $703($0_1 | 0, $11_1 | 0, $17_1 - $11_1 | 0 | 0);
         $18_1 = $18_1 + 4 | 0;
         if ($18_1 >>> 0 <= $16_1 >>> 0) {
          continue label$52
         }
         break label$52;
        };
        label$56 : {
         if (!$20_1) {
          break label$56
         }
         $703($0_1 | 0, 4787 | 0, 1 | 0);
        }
        if ($18_1 >>> 0 >= $3_1 >>> 0) {
         break label$50
        }
        if (($14_1 | 0) < (1 | 0)) {
         break label$50
        }
        label$57 : while (1) {
         label$58 : {
          i64toi32_i32$5 = $18_1;
          i64toi32_i32$0 = HEAP32[$18_1 >> 2] | 0;
          i64toi32_i32$4 = 0;
          $11_1 = $708(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $17_1 | 0) | 0;
          if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
           break label$58
          }
          label$59 : while (1) {
           $11_1 = $11_1 + -1 | 0;
           HEAP8[$11_1 >> 0] = 48;
           if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
            continue label$59
           }
           break label$59;
          };
         }
         $703($0_1 | 0, $11_1 | 0, (($14_1 | 0) < (9 | 0) ? $14_1 : 9) | 0);
         $11_1 = $14_1 + -9 | 0;
         $18_1 = $18_1 + 4 | 0;
         if ($18_1 >>> 0 >= $3_1 >>> 0) {
          break label$49
         }
         $23_1 = ($14_1 | 0) > (9 | 0);
         $14_1 = $11_1;
         if ($23_1) {
          continue label$57
         }
         break label$49;
        };
       }
       label$60 : {
        if (($14_1 | 0) < (0 | 0)) {
         break label$60
        }
        $21_1 = $3_1 >>> 0 > $18_1 >>> 0 ? $3_1 : $18_1 + 4 | 0;
        $16_1 = $6_1 + 16 | 0 | 8 | 0;
        $3_1 = $6_1 + 16 | 0 | 9 | 0;
        $17_1 = $18_1;
        label$61 : while (1) {
         label$62 : {
          i64toi32_i32$5 = $17_1;
          i64toi32_i32$4 = HEAP32[$17_1 >> 2] | 0;
          i64toi32_i32$0 = 0;
          $11_1 = $708(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 | 0) | 0;
          if (($11_1 | 0) != ($3_1 | 0)) {
           break label$62
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $11_1 = $16_1;
         }
         label$63 : {
          label$64 : {
           if (($17_1 | 0) == ($18_1 | 0)) {
            break label$64
           }
           if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$63
           }
           label$65 : while (1) {
            $11_1 = $11_1 + -1 | 0;
            HEAP8[$11_1 >> 0] = 48;
            if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$65
            }
            break label$63;
           };
          }
          $703($0_1 | 0, $11_1 | 0, 1 | 0);
          $11_1 = $11_1 + 1 | 0;
          label$66 : {
           if ($22_1) {
            break label$66
           }
           if (($14_1 | 0) < (1 | 0)) {
            break label$63
           }
          }
          $703($0_1 | 0, 4787 | 0, 1 | 0);
         }
         $23_1 = $3_1 - $11_1 | 0;
         $703($0_1 | 0, $11_1 | 0, (($14_1 | 0) > ($23_1 | 0) ? $23_1 : $14_1) | 0);
         $14_1 = $14_1 - $23_1 | 0;
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 >= $21_1 >>> 0) {
          break label$60
         }
         if (($14_1 | 0) > (-1 | 0)) {
          continue label$61
         }
         break label$61;
        };
       }
       $709($0_1 | 0, 48 | 0, $14_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
       $703($0_1 | 0, $19_1 | 0, $12_1 - $19_1 | 0 | 0);
       break label$48;
      }
      $11_1 = $14_1;
     }
     $709($0_1 | 0, 48 | 0, $11_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    $709($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$4;
   }
   $17_1 = $5_1 & 32 | 0;
   $14_1 = $17_1 ? $9_1 + 9 | 0 : $9_1;
   label$67 : {
    if ($3_1 >>> 0 > 11 >>> 0) {
     break label$67
    }
    $11_1 = 12 - $3_1 | 0;
    if (!$11_1) {
     break label$67
    }
    $26_1 = 8.0;
    label$68 : while (1) {
     $26_1 = $26_1 * 16.0;
     $11_1 = $11_1 + -1 | 0;
     if ($11_1) {
      continue label$68
     }
     break label$68;
    };
    label$69 : {
     if ((HEAPU8[$14_1 >> 0] | 0 | 0) != (45 | 0)) {
      break label$69
     }
     $1_1 = -($26_1 + (-$1_1 - $26_1));
     break label$67;
    }
    $1_1 = $1_1 + $26_1 - $26_1;
   }
   label$70 : {
    $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    $818_1 = $11_1;
    $11_1 = $11_1 >> 31 | 0;
    i64toi32_i32$0 = 0;
    $11_1 = $708(($818_1 + $11_1 | 0) ^ $11_1 | 0 | 0, i64toi32_i32$0 | 0, $12_1 | 0) | 0;
    if (($11_1 | 0) != ($12_1 | 0)) {
     break label$70
    }
    HEAP8[($6_1 + 15 | 0) >> 0] = 48;
    $11_1 = $6_1 + 15 | 0;
   }
   $22_1 = $8_1 | 2 | 0;
   $18_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
   $21_1 = $11_1 + -2 | 0;
   HEAP8[$21_1 >> 0] = $5_1 + 15 | 0;
   HEAP8[($11_1 + -1 | 0) >> 0] = ($18_1 | 0) < (0 | 0) ? 45 : 43;
   $23_1 = $4_1 & 8 | 0;
   $18_1 = $6_1 + 16 | 0;
   label$71 : while (1) {
    $11_1 = $18_1;
    label$72 : {
     label$73 : {
      if (!(Math_abs($1_1) < 2147483648.0)) {
       break label$73
      }
      $18_1 = ~~$1_1;
      break label$72;
     }
     $18_1 = -2147483648;
    }
    HEAP8[$11_1 >> 0] = HEAPU8[($18_1 + 4736 | 0) >> 0] | 0 | $17_1 | 0;
    $1_1 = ($1_1 - +($18_1 | 0)) * 16.0;
    label$74 : {
     $18_1 = $11_1 + 1 | 0;
     if (($18_1 - ($6_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break label$74
     }
     label$75 : {
      if ($23_1) {
       break label$75
      }
      if (($3_1 | 0) > (0 | 0)) {
       break label$75
      }
      if ($1_1 == 0.0) {
       break label$74
      }
     }
     HEAP8[($11_1 + 1 | 0) >> 0] = 46;
     $18_1 = $11_1 + 2 | 0;
    }
    if ($1_1 != 0.0) {
     continue label$71
    }
    break label$71;
   };
   label$76 : {
    label$77 : {
     if (!$3_1) {
      break label$77
     }
     if ((($18_1 - ($6_1 + 16 | 0) | 0) + -2 | 0 | 0) >= ($3_1 | 0)) {
      break label$77
     }
     $11_1 = (($3_1 + $12_1 | 0) - $21_1 | 0) + 2 | 0;
     break label$76;
    }
    $11_1 = (($12_1 - ($6_1 + 16 | 0) | 0) - $21_1 | 0) + $18_1 | 0;
   }
   $10_1 = $11_1 + $22_1 | 0;
   $709($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
   $703($0_1 | 0, $14_1 | 0, $22_1 | 0);
   $709($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 65536 | 0 | 0);
   $18_1 = $18_1 - ($6_1 + 16 | 0) | 0;
   $703($0_1 | 0, $6_1 + 16 | 0 | 0, $18_1 | 0);
   $17_1 = $12_1 - $21_1 | 0;
   $709($0_1 | 0, 48 | 0, $11_1 - ($18_1 + $17_1 | 0) | 0 | 0, 0 | 0, 0 | 0);
   $703($0_1 | 0, $21_1 | 0, $17_1 | 0);
   $709($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
  }
  global$0 = $6_1 + 560 | 0;
  return (($10_1 | 0) < ($2_1 | 0) ? $2_1 : $10_1) | 0;
 }
 
 function $712($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $12_1 = 0, $12$hi = 0, $14_1 = 0, $14$hi = 0;
  $2_1 = ((HEAP32[$1_1 >> 2] | 0) + 15 | 0) & -16 | 0;
  HEAP32[$1_1 >> 2] = $2_1 + 16 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $14$hi;
  HEAPF64[$0_1 >> 3] = +$769($12_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
 }
 
 function $713($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $714($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $715($0_1) {
  $0_1 = $0_1 | 0;
  return fimport$13($714(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $716($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $717($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function $718($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $4$hi = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $21_1 = 0, $22_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = $1$hi;
  $2_1 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  $3_1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = $2_1 - $3_1 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $4_1 = i64toi32_i32$1;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  $17_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $1$hi;
  $21_1 = $3_1 + $1_1 | 0;
  $22_1 = $2_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$3 = $1_1;
  if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
   $14_1 = 1
  } else {
   if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
    if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
     $15_1 = 0
    } else {
     $15_1 = 1
    }
    $16_1 = $15_1;
   } else {
    $16_1 = 0
   }
   $14_1 = $16_1;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$3 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = 0;
  HEAP32[($17_1 + 104 | 0) >> 2] = ($1_1 | 0) != (i64toi32_i32$1 | 0) | ($1$hi | 0) != (i64toi32_i32$0 | 0) | 0 ? ($14_1 ? $21_1 : $22_1) : $2_1;
 }
 
 function $719($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $5$hi = 0, i64toi32_i32$4 = 0, $3_1 = 0, $5_1 = 0, $2_1 = 0, $1_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $4_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $11$hi = 0, $30_1 = 0, $30$hi = 0, $38_1 = 0, $38$hi = 0, $50_1 = 0, $52_1 = 0, $52$hi = 0, $57_1 = 0, $57$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$1;
     if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $5$hi;
     i64toi32_i32$3 = $5_1;
     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
      $23_1 = 1
     } else {
      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        $24_1 = 0
       } else {
        $24_1 = 1
       }
       $25_1 = $24_1;
      } else {
       $25_1 = 0
      }
      $23_1 = $25_1;
     }
     if ($23_1) {
      break label$2
     }
    }
    $1_1 = $691($0_1 | 0) | 0;
    if (($1_1 | 0) > (-1 | 0)) {
     break label$1
    }
   }
   HEAP32[($0_1 + 104 | 0) >> 2] = 0;
   return -1 | 0;
  }
  $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $3_1 = $2_1;
  label$4 : {
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$2 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$2;
   $5$hi = i64toi32_i32$0;
   if (!(i64toi32_i32$2 | i64toi32_i32$0 | 0)) {
    break label$4
   }
   $3_1 = $2_1;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$0 = -1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
   $30_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $30$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = $30$hi;
   i64toi32_i32$1 = $30_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $5_1 = i64toi32_i32$4;
   $5$hi = i64toi32_i32$5;
   $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = $2_1 - $4_1 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
   $38_1 = i64toi32_i32$2;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $5$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = $38$hi;
   i64toi32_i32$1 = $38_1;
   if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
    $26_1 = 1
   } else {
    if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      $27_1 = 0
     } else {
      $27_1 = 1
     }
     $28_1 = $27_1;
    } else {
     $28_1 = 0
    }
    $26_1 = $28_1;
   }
   if ($26_1) {
    break label$4
   }
   i64toi32_i32$0 = $5$hi;
   $3_1 = $4_1 + $5_1 | 0;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $3_1;
  $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$5 : {
   if (!$2_1) {
    break label$5
   }
   $50_1 = $0_1;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
   $52_1 = i64toi32_i32$0;
   $52$hi = i64toi32_i32$5;
   i64toi32_i32$0 = ($2_1 - $3_1 | 0) + 1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
   $57_1 = i64toi32_i32$0;
   $57$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $52$hi;
   i64toi32_i32$1 = $52_1;
   i64toi32_i32$0 = $57$hi;
   i64toi32_i32$2 = $57_1;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$1 = $50_1;
   HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = i64toi32_i32$3;
   HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$4;
  }
  label$6 : {
   $0_1 = $3_1 + -1 | 0;
   if (($1_1 | 0) == (HEAPU8[$0_1 >> 0] | 0 | 0)) {
    break label$6
   }
   HEAP8[$0_1 >> 0] = $1_1;
  }
  return $1_1 | 0;
 }
 
 function $720($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $7_1 = 0, $11_1 = 0, $18$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $22_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $11_1 = $22_1 & 32768 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $23_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $11_1 | ($23_1 & 32767 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $20_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$0 = $24_1;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $7_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $21_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $721($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $20_1 = 0, $70_1 = 0, $71_1 = 0, $71$hi = 0, $72_1 = 0, $72$hi = 0, $76$hi = 0, $80_1 = 0, $83_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    if (($3_1 | 0) < (16384 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 2147352576;
    $765($4_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($4_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    label$3 : {
     if (($3_1 | 0) >= (32767 | 0)) {
      break label$3
     }
     $3_1 = $3_1 + -16383 | 0;
     break label$1;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147352576;
    $765($4_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3_1 = (($3_1 | 0) < (49149 | 0) ? $3_1 : 49149) + -32766 | 0;
    i64toi32_i32$2 = ($4_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    break label$1;
   }
   if (($3_1 | 0) > (-16383 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 65536;
   $765($4_1 + 64 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($4_1 + 64 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   label$4 : {
    if (($3_1 | 0) <= (-32765 | 0)) {
     break label$4
    }
    $3_1 = $3_1 + 16382 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 65536;
   $765($4_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $3_1 = (($3_1 | 0) > (-49146 | 0) ? $3_1 : -49146) + 32764 | 0;
   i64toi32_i32$2 = ($4_1 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
  }
  $70_1 = $4_1;
  i64toi32_i32$0 = $1$hi;
  $71_1 = $1_1;
  $71$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $72_1 = $2_1;
  $72$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1 + 16383 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $76$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $71$hi;
  i64toi32_i32$2 = $72$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = $76$hi;
  $765($70_1 | 0, $71_1 | 0, i64toi32_i32$1 | 0, $72_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $80_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $80_1;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $83_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $83_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 80 | 0;
 }
 
 function $722($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5_1 = i64toi32_i32$2 & -1 | 0;
  i64toi32_i32$2 = $0_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  HEAP32[i64toi32_i32$2 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $723($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $9_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $8_1 = 0, $11_1 = 0, $11$hi = 0, $10_1 = 0, $10$hi = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  i64toi32_i32$0 = 0;
  $10_1 = 0;
  $10$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if ($2_1 >>> 0 > 2 >>> 0) {
     break label$2
    }
    $5_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 << 2 | 0;
    $6_1 = HEAP32[($2_1 + 4876 | 0) >> 2] | 0;
    $7_1 = HEAP32[($2_1 + 4864 | 0) >> 2] | 0;
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$4;
      }
      $2_1 = $719($1_1 | 0) | 0;
     }
     if ($675($2_1 | 0) | 0) {
      continue label$3
     }
     break label$3;
    };
    $8_1 = 1;
    label$6 : {
     label$7 : {
      switch ($2_1 + -43 | 0 | 0) {
      case 0:
      case 2:
       break label$7;
      default:
       break label$6;
      };
     }
     $8_1 = ($2_1 | 0) == (45 | 0) ? -1 : 1;
     label$8 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$6;
     }
     $2_1 = $719($1_1 | 0) | 0;
    }
    $9_1 = 0;
    label$9 : {
     label$10 : {
      label$11 : {
       label$12 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($9_1 + 4800 | 0) >> 0] | 0 | 0)) {
         break label$11
        }
        label$13 : {
         if ($9_1 >>> 0 > 6 >>> 0) {
          break label$13
         }
         label$14 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$14
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$13;
         }
         $2_1 = $719($1_1 | 0) | 0;
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != (8 | 0)) {
         continue label$12
        }
        break label$10;
       };
      }
      label$15 : {
       if (($9_1 | 0) == (3 | 0)) {
        break label$15
       }
       if (($9_1 | 0) == (8 | 0)) {
        break label$10
       }
       if (!$3_1) {
        break label$9
       }
       if ($9_1 >>> 0 < 4 >>> 0) {
        break label$9
       }
       if (($9_1 | 0) == (8 | 0)) {
        break label$10
       }
      }
      label$16 : {
       $1_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
       if (!$1_1) {
        break label$16
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      if (!$3_1) {
       break label$10
      }
      if ($9_1 >>> 0 < 4 >>> 0) {
       break label$10
      }
      label$17 : while (1) {
       label$18 : {
        if (!$1_1) {
         break label$18
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       $9_1 = $9_1 + -1 | 0;
       if ($9_1 >>> 0 > 3 >>> 0) {
        continue label$17
       }
       break label$17;
      };
     }
     $761($4_1 | 0, Math_fround(Math_fround(Math_fround($8_1 | 0) * Math_fround(infinity))));
     i64toi32_i32$2 = $4_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$0;
     break label$1;
    }
    label$19 : {
     label$20 : {
      label$21 : {
       if ($9_1) {
        break label$21
       }
       $9_1 = 0;
       label$22 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($9_1 + 4809 | 0) >> 0] | 0 | 0)) {
         break label$21
        }
        label$23 : {
         if ($9_1 >>> 0 > 1 >>> 0) {
          break label$23
         }
         label$24 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$24
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$23;
         }
         $2_1 = $719($1_1 | 0) | 0;
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != (3 | 0)) {
         continue label$22
        }
        break label$20;
       };
      }
      label$25 : {
       switch ($9_1 | 0) {
       case 0:
        label$27 : {
         if (($2_1 | 0) != (48 | 0)) {
          break label$27
         }
         label$28 : {
          label$29 : {
           $9_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if ($9_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$29
           }
           HEAP32[$5_1 >> 2] = $9_1 + 1 | 0;
           $9_1 = HEAPU8[$9_1 >> 0] | 0;
           break label$28;
          }
          $9_1 = $719($1_1 | 0) | 0;
         }
         label$30 : {
          if (($9_1 & -33 | 0 | 0) != (88 | 0)) {
           break label$30
          }
          $724($4_1 + 16 | 0 | 0, $1_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
          i64toi32_i32$2 = $4_1;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
          $11_1 = i64toi32_i32$0;
          $11$hi = i64toi32_i32$1;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
          $10_1 = i64toi32_i32$1;
          $10$hi = i64toi32_i32$0;
          break label$1;
         }
         if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
          break label$27
         }
         HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
        }
        $725($4_1 + 32 | 0 | 0, $1_1 | 0, $2_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
        $11_1 = i64toi32_i32$0;
        $11$hi = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
        $10_1 = i64toi32_i32$1;
        $10$hi = i64toi32_i32$0;
        break label$1;
       case 3:
        break label$20;
       default:
        break label$25;
       };
      }
      label$31 : {
       if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
        break label$31
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      HEAP32[($680() | 0) >> 2] = 28;
      break label$19;
     }
     label$32 : {
      label$33 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$33
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$32;
      }
      $2_1 = $719($1_1 | 0) | 0;
     }
     label$34 : {
      label$35 : {
       if (($2_1 | 0) != (40 | 0)) {
        break label$35
       }
       $9_1 = 1;
       break label$34;
      }
      i64toi32_i32$0 = 2147450880;
      $11_1 = 0;
      $11$hi = i64toi32_i32$0;
      if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
       break label$1
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      break label$1;
     }
     label$36 : while (1) {
      label$37 : {
       label$38 : {
        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$38
        }
        HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$37;
       }
       $2_1 = $719($1_1 | 0) | 0;
      }
      $8_1 = $2_1 + -65 | 0;
      label$39 : {
       label$40 : {
        if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
         break label$40
        }
        if ($8_1 >>> 0 < 26 >>> 0) {
         break label$40
        }
        $8_1 = $2_1 + -97 | 0;
        if (($2_1 | 0) == (95 | 0)) {
         break label$40
        }
        if ($8_1 >>> 0 >= 26 >>> 0) {
         break label$39
        }
       }
       $9_1 = $9_1 + 1 | 0;
       continue label$36;
      }
      break label$36;
     };
     i64toi32_i32$0 = 2147450880;
     $11_1 = 0;
     $11$hi = i64toi32_i32$0;
     if (($2_1 | 0) == (41 | 0)) {
      break label$1
     }
     label$41 : {
      $2_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$41
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
     }
     label$42 : {
      if (!$3_1) {
       break label$42
      }
      if (!$9_1) {
       break label$1
      }
      label$43 : while (1) {
       $9_1 = $9_1 + -1 | 0;
       label$44 : {
        if (!$2_1) {
         break label$44
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       if ($9_1) {
        continue label$43
       }
       break label$1;
      };
     }
     HEAP32[($680() | 0) >> 2] = 28;
    }
    i64toi32_i32$0 = 0;
    $10_1 = 0;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $718($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   }
   i64toi32_i32$0 = 0;
   $11_1 = 0;
   $11$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $10$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $10_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $11_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 48 | 0;
 }
 
 function $724($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $6_1 = 0, i64toi32_i32$4 = 0, $7_1 = 0, $16$hi = 0, $19$hi = 0, $16_1 = 0, $19_1 = 0, $15$hi = 0, $17$hi = 0, $14$hi = 0, $15_1 = 0, $17_1 = 0, $18$hi = 0, $14_1 = 0, $10_1 = 0, $18_1 = 0, $8_1 = 0, $9_1 = 0, $20$hi = 0, $20_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $106_1 = 0, $107_1 = 0, $108_1 = 0, $109_1 = 0, $110_1 = 0, $111_1 = 0, $112_1 = 0, $113_1 = 0, $114_1 = 0, $115_1 = 0, $116_1 = 0, $117_1 = 0, $118_1 = 0, $119_1 = 0, $120_1 = 0, $121_1 = 0, $122_1 = 0, $123_1 = 0, $124_1 = 0, $133_1 = 0, $133$hi = 0, $137_1 = 0, $137$hi = 0, $142_1 = 0, $142$hi = 0, $146_1 = 0, $146$hi = 0, $164_1 = 0, $164$hi = 0, $168_1 = 0, $168$hi = 0, $258$hi = 0, $265$hi = 0, $274_1 = 0, $274$hi = 0, $278_1 = 0, $278$hi = 0, $282_1 = 0, $282$hi = 0, $286_1 = 0, $286$hi = 0, $296_1 = 0, $296$hi = 0, $313_1 = 0, $313$hi = 0, $317_1 = 0, $317$hi = 0, $322_1 = 0, $322$hi = 0, $324_1 = 0, $324$hi = 0, $342$hi = 0, $350_1 = 0, $351_1 = 0, $354$hi = 0, $378_1 = 0, $378$hi = 0, $382_1 = 0, $382$hi = 0, $416_1 = 0, $416$hi = 0, $420_1 = 0, $420$hi = 0, $424_1 = 0, $424$hi = 0, $428_1 = 0, $428$hi = 0, $435_1 = 0, $435$hi = 0, $438_1 = 0, $438$hi = 0, $444_1 = 0, $444$hi = 0, $448_1 = 0, $448$hi = 0, $450_1 = 0, $450$hi = 0, $454_1 = 0, $454$hi = 0, $458_1 = 0, $458$hi = 0, $462_1 = 0, $462$hi = 0, $492_1 = 0, $492$hi = 0, $496_1 = 0, $496$hi = 0, $500_1 = 0, $500$hi = 0, $504_1 = 0, $504$hi = 0;
  $6_1 = global$0 - 432 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
    $7_1 = HEAPU8[$7_1 >> 0] | 0;
    break label$1;
   }
   $7_1 = $719($1_1 | 0) | 0;
  }
  $8_1 = 0;
  i64toi32_i32$0 = 0;
  $14_1 = 0;
  $14$hi = i64toi32_i32$0;
  $9_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if (($7_1 | 0) == (48 | 0)) {
        break label$7
       }
       if (($7_1 | 0) != (46 | 0)) {
        break label$3
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       break label$4;
      }
      label$8 : {
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$8
       }
       $9_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       continue label$6;
      }
      $9_1 = 1;
      $7_1 = $719($1_1 | 0) | 0;
      continue label$6;
     };
    }
    $7_1 = $719($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $14_1 = 0;
   $14$hi = i64toi32_i32$0;
   if (($7_1 | 0) != (48 | 0)) {
    break label$3
   }
   label$9 : while (1) {
    label$10 : {
     label$11 : {
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$11
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
      $7_1 = HEAPU8[$7_1 >> 0] | 0;
      break label$10;
     }
     $7_1 = $719($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$2 = $14_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $14_1 = i64toi32_i32$4;
    $14$hi = i64toi32_i32$5;
    if (($7_1 | 0) == (48 | 0)) {
     continue label$9
    }
    break label$9;
   };
   $8_1 = 1;
   $9_1 = 1;
  }
  i64toi32_i32$5 = 1073676288;
  $15_1 = 0;
  $15$hi = i64toi32_i32$5;
  $10_1 = 0;
  i64toi32_i32$5 = 0;
  $16_1 = 0;
  $16$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $17_1 = 0;
  $17$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $18_1 = 0;
  $18$hi = i64toi32_i32$5;
  $11_1 = 0;
  i64toi32_i32$5 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$5;
  label$12 : {
   label$13 : while (1) {
    $12_1 = $7_1 | 32 | 0;
    label$14 : {
     label$15 : {
      $13_1 = $7_1 + -48 | 0;
      if ($13_1 >>> 0 < 10 >>> 0) {
       break label$15
      }
      label$16 : {
       if (($7_1 | 0) == (46 | 0)) {
        break label$16
       }
       if (($12_1 + -97 | 0) >>> 0 > 5 >>> 0) {
        break label$12
       }
      }
      if (($7_1 | 0) != (46 | 0)) {
       break label$15
      }
      if ($8_1) {
       break label$12
      }
      $8_1 = 1;
      i64toi32_i32$5 = $19$hi;
      $14_1 = $19_1;
      $14$hi = i64toi32_i32$5;
      break label$14;
     }
     $7_1 = ($7_1 | 0) > (57 | 0) ? $12_1 + -87 | 0 : $13_1;
     label$17 : {
      label$18 : {
       i64toi32_i32$5 = $19$hi;
       i64toi32_i32$0 = $19_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 7;
       if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
        $106_1 = 1
       } else {
        if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
          $107_1 = 0
         } else {
          $107_1 = 1
         }
         $108_1 = $107_1;
        } else {
         $108_1 = 0
        }
        $106_1 = $108_1;
       }
       if ($106_1) {
        break label$18
       }
       $10_1 = $7_1 + ($10_1 << 4 | 0) | 0;
       break label$17;
      }
      label$19 : {
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$3 = $19_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 28;
       if ((i64toi32_i32$0 | 0) > (i64toi32_i32$5 | 0)) {
        $109_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$5 | 0)) {
         if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
          $110_1 = 0
         } else {
          $110_1 = 1
         }
         $111_1 = $110_1;
        } else {
         $111_1 = 0
        }
        $109_1 = $111_1;
       }
       if ($109_1) {
        break label$19
       }
       $767($6_1 + 48 | 0 | 0, $7_1 | 0);
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$3 = $15$hi;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$0 = $15$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 1073414144;
       $765($6_1 + 32 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$5;
       $18$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $15_1 = i64toi32_i32$2;
       $15$hi = i64toi32_i32$5;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
       $133_1 = i64toi32_i32$5;
       $133$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 48 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $137_1 = i64toi32_i32$2;
       $137$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $18$hi;
       i64toi32_i32$2 = $15$hi;
       i64toi32_i32$0 = $133$hi;
       i64toi32_i32$3 = $137$hi;
       $765($6_1 + 16 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, $133_1 | 0, i64toi32_i32$0 | 0, $137_1 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$3 = $17$hi;
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$3 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
       $142_1 = i64toi32_i32$3;
       $142$hi = i64toi32_i32$0;
       i64toi32_i32$2 = ($6_1 + 16 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $146_1 = i64toi32_i32$0;
       $146$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$2 = $142$hi;
       i64toi32_i32$5 = $146$hi;
       $760($6_1 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $142_1 | 0, i64toi32_i32$2 | 0, $146_1 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1 + 8 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$5;
       $17$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$2;
       $16$hi = i64toi32_i32$5;
       break label$17;
      }
      if ($11_1) {
       break label$17
      }
      if (!$7_1) {
       break label$17
      }
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1073610752;
      $765($6_1 + 80 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$3 = HEAP32[($6_1 + 80 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
      $164_1 = i64toi32_i32$3;
      $164$hi = i64toi32_i32$0;
      i64toi32_i32$2 = ($6_1 + 80 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $168_1 = i64toi32_i32$0;
      $168$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$2 = $164$hi;
      i64toi32_i32$5 = $168$hi;
      $760($6_1 + 64 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $164_1 | 0, i64toi32_i32$2 | 0, $168_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$0 = ($6_1 + 64 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$2;
      $11_1 = 1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$5;
     }
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$0 = $19_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     $9_1 = 1;
    }
    label$20 : {
     $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
      break label$20
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
     $7_1 = HEAPU8[$7_1 >> 0] | 0;
     continue label$13;
    }
    $7_1 = $719($1_1 | 0) | 0;
    continue label$13;
   };
  }
  label$21 : {
   label$22 : {
    label$23 : {
     label$24 : {
      if ($9_1) {
       break label$24
      }
      label$25 : {
       if (HEAP32[($1_1 + 104 | 0) >> 2] | 0) {
        break label$25
       }
       if ($5_1) {
        break label$22
       }
       break label$23;
      }
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -1 | 0;
      if (!$5_1) {
       break label$23
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -2 | 0;
      if (!$8_1) {
       break label$22
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -3 | 0;
      break label$22;
     }
     label$26 : {
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$5 = $19_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 7;
      if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
       $112_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$3 >>> 0) {
         $113_1 = 0
        } else {
         $113_1 = 1
        }
        $114_1 = $113_1;
       } else {
        $114_1 = 0
       }
       $112_1 = $114_1;
      }
      if ($112_1) {
       break label$26
      }
      i64toi32_i32$5 = $19$hi;
      $15_1 = $19_1;
      $15$hi = i64toi32_i32$5;
      label$27 : while (1) {
       $10_1 = $10_1 << 4 | 0;
       i64toi32_i32$5 = $15$hi;
       i64toi32_i32$3 = $15_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $15_1 = i64toi32_i32$2;
       $15$hi = i64toi32_i32$1;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 8;
       if ((i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
        continue label$27
       }
       break label$27;
      };
     }
     label$28 : {
      label$29 : {
       if (($7_1 & -33 | 0 | 0) != (80 | 0)) {
        break label$29
       }
       i64toi32_i32$5 = $726($1_1 | 0, $5_1 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $15_1 = i64toi32_i32$5;
       $15$hi = i64toi32_i32$1;
       i64toi32_i32$0 = i64toi32_i32$5;
       i64toi32_i32$5 = -2147483648;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
        break label$28
       }
       label$30 : {
        if (!$5_1) {
         break label$30
        }
        i64toi32_i32$0 = 0;
        $15_1 = 0;
        $15$hi = i64toi32_i32$0;
        if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
         break label$28
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        break label$28;
       }
       i64toi32_i32$0 = 0;
       $16_1 = 0;
       $16$hi = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       $718($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
       i64toi32_i32$0 = 0;
       $19_1 = 0;
       $19$hi = i64toi32_i32$0;
       break label$21;
      }
      i64toi32_i32$0 = 0;
      $15_1 = 0;
      $15$hi = i64toi32_i32$0;
      if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
       break label$28
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     label$31 : {
      if ($10_1) {
       break label$31
      }
      $764($6_1 + 112 | 0 | 0, +(+($4_1 | 0) * 0.0));
      i64toi32_i32$3 = $6_1 + 120 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$0;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$0;
      break label$21;
     }
     label$32 : {
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$4 = $8_1;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$5 = i64toi32_i32$4 ? $14_1 : $19_1;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 2;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
       $115_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
       $115_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      }
      $258$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $258$hi;
      i64toi32_i32$3 = $115_1;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$0 = $15_1;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -32;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $265$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$5 = $265$hi;
      i64toi32_i32$0 = 0 - $3_1 | 0;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$5 | 0)) {
       $116_1 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0) {
         $117_1 = 0
        } else {
         $117_1 = 1
        }
        $118_1 = $117_1;
       } else {
        $118_1 = 0
       }
       $116_1 = $118_1;
      }
      if ($116_1) {
       break label$32
      }
      HEAP32[($680() | 0) >> 2] = 68;
      $767($6_1 + 160 | 0 | 0, $4_1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 164 | 0) >> 2] | 0;
      $274_1 = i64toi32_i32$2;
      $274$hi = i64toi32_i32$1;
      i64toi32_i32$0 = (i64toi32_i32$0 + 160 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $278_1 = i64toi32_i32$1;
      $278$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $274$hi;
      i64toi32_i32$1 = $278$hi;
      i64toi32_i32$0 = -1;
      i64toi32_i32$5 = 2147418111;
      $765($6_1 + 144 | 0 | 0, $274_1 | 0, i64toi32_i32$2 | 0, $278_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
      $282_1 = i64toi32_i32$5;
      $282$hi = i64toi32_i32$0;
      i64toi32_i32$1 = (i64toi32_i32$1 + 144 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $286_1 = i64toi32_i32$0;
      $286$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $282$hi;
      i64toi32_i32$0 = $286$hi;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = 2147418111;
      $765($6_1 + 128 | 0 | 0, $282_1 | 0, i64toi32_i32$5 | 0, $286_1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$0 = ($6_1 + 128 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$2;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 128 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$2;
      break label$21;
     }
     label$33 : {
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$1 = $3_1 + -226 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
      $296_1 = i64toi32_i32$1;
      $296$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$0 = $19_1;
      i64toi32_i32$1 = $296$hi;
      i64toi32_i32$5 = $296_1;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
       $119_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0) {
         $120_1 = 0
        } else {
         $120_1 = 1
        }
        $121_1 = $120_1;
       } else {
        $121_1 = 0
       }
       $119_1 = $121_1;
      }
      if ($119_1) {
       break label$33
      }
      label$34 : {
       if (($10_1 | 0) <= (-1 | 0)) {
        break label$34
       }
       label$35 : while (1) {
        i64toi32_i32$0 = $16$hi;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$0 = $16$hi;
        i64toi32_i32$2 = $17$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$1 = -1073807360;
        $760($6_1 + 416 | 0 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$1 = i64toi32_i32$2;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1073610752;
        $7_1 = $755($16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$0 = i64toi32_i32$5;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$5 = $6_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 416 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 420 | 0) >> 2] | 0;
        $313_1 = i64toi32_i32$0;
        $313$hi = i64toi32_i32$2;
        $1_1 = ($7_1 | 0) < (0 | 0);
        i64toi32_i32$3 = $1_1;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $313$hi;
        i64toi32_i32$1 = i64toi32_i32$3 ? $16_1 : $313_1;
        i64toi32_i32$5 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$0;
        $317_1 = i64toi32_i32$1;
        $317$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $17$hi;
        i64toi32_i32$3 = ($6_1 + 416 | 0) + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $322_1 = i64toi32_i32$5;
        $322$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$1 = $17$hi;
        i64toi32_i32$5 = $322$hi;
        i64toi32_i32$2 = i64toi32_i32$0 ? $17_1 : $322_1;
        i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$1 : i64toi32_i32$5;
        $324_1 = i64toi32_i32$2;
        $324$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $317$hi;
        i64toi32_i32$1 = $324$hi;
        $760($6_1 + 400 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$2 | 0, $317_1 | 0, i64toi32_i32$0 | 0, $324_1 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$2 = $19_1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $19_1 = i64toi32_i32$5;
        $19$hi = i64toi32_i32$4;
        i64toi32_i32$1 = ($6_1 + 400 | 0) + 8 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $17_1 = i64toi32_i32$4;
        $17$hi = i64toi32_i32$2;
        i64toi32_i32$1 = $6_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 400 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 404 | 0) >> 2] | 0;
        $16_1 = i64toi32_i32$2;
        $16$hi = i64toi32_i32$4;
        $10_1 = $10_1 << 1 | 0 | ($7_1 | 0) > (-1 | 0) | 0;
        if (($10_1 | 0) > (-1 | 0)) {
         continue label$35
        }
        break label$35;
       };
      }
      label$36 : {
       label$37 : {
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
        $342$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$1 = $19_1;
        i64toi32_i32$2 = $342$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$5 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 32;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $14_1 = i64toi32_i32$2;
        $14$hi = i64toi32_i32$0;
        $7_1 = i64toi32_i32$2;
        $350_1 = (i64toi32_i32$2 | 0) > (0 | 0) ? i64toi32_i32$2 : 0;
        $351_1 = $2_1;
        i64toi32_i32$0 = 0;
        $354$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $14$hi;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$4 = $354$hi;
        i64toi32_i32$3 = $2_1;
        if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
         $122_1 = 1
        } else {
         if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
          if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $123_1 = 0
          } else {
           $123_1 = 1
          }
          $124_1 = $123_1;
         } else {
          $124_1 = 0
         }
         $122_1 = $124_1;
        }
        $7_1 = $122_1 ? $350_1 : $351_1;
        if (($7_1 | 0) < (113 | 0)) {
         break label$37
        }
        $767($6_1 + 384 | 0 | 0, $4_1 | 0);
        i64toi32_i32$3 = $6_1 + 392 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $14_1 = i64toi32_i32$5;
        $14$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $15_1 = 0;
        $15$hi = i64toi32_i32$0;
        i64toi32_i32$3 = $6_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 384 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 388 | 0) >> 2] | 0;
        $18_1 = i64toi32_i32$0;
        $18$hi = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        $20_1 = 0;
        $20$hi = i64toi32_i32$5;
        break label$36;
       }
       $764($6_1 + 352 | 0 | 0, +(+$1930(+(1.0), 144 - $7_1 | 0 | 0)));
       $767($6_1 + 336 | 0 | 0, $4_1 | 0);
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 352 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 356 | 0) >> 2] | 0;
       $378_1 = i64toi32_i32$5;
       $378$hi = i64toi32_i32$0;
       i64toi32_i32$3 = (i64toi32_i32$3 + 352 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $382_1 = i64toi32_i32$0;
       $382$hi = i64toi32_i32$5;
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 336 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 340 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$5;
       $18$hi = i64toi32_i32$0;
       i64toi32_i32$3 = (i64toi32_i32$3 + 336 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $14_1 = i64toi32_i32$0;
       $14$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $378$hi;
       i64toi32_i32$0 = $382$hi;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$4 = $14$hi;
       $720($6_1 + 368 | 0 | 0, $378_1 | 0, i64toi32_i32$5 | 0, $382_1 | 0, i64toi32_i32$0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $14_1 | 0, i64toi32_i32$4 | 0);
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 376 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 380 | 0) >> 2] | 0;
       $20_1 = i64toi32_i32$4;
       $20$hi = i64toi32_i32$3;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 368 | 0) >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 372 | 0) >> 2] | 0;
       $15_1 = i64toi32_i32$3;
       $15$hi = i64toi32_i32$4;
      }
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 0;
      $7_1 = !($10_1 & 1 | 0) & (($754($16_1 | 0, i64toi32_i32$4 | 0, $17_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0 | 0) != (0 | 0) & ($7_1 | 0) < (32 | 0) | 0) | 0;
      $770($6_1 + 320 | 0 | 0, $10_1 + $7_1 | 0 | 0);
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $14$hi;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
      $416_1 = i64toi32_i32$5;
      $416$hi = i64toi32_i32$0;
      i64toi32_i32$3 = (i64toi32_i32$3 + 320 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $420_1 = i64toi32_i32$0;
      $420$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$3 = $416$hi;
      i64toi32_i32$4 = $420$hi;
      $765($6_1 + 304 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$0 | 0, $416_1 | 0, i64toi32_i32$3 | 0, $420_1 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 304 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 308 | 0) >> 2] | 0;
      $424_1 = i64toi32_i32$4;
      $424$hi = i64toi32_i32$3;
      i64toi32_i32$0 = (i64toi32_i32$0 + 304 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $428_1 = i64toi32_i32$3;
      $428$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $424$hi;
      i64toi32_i32$3 = $428$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$5 = $20$hi;
      $760($6_1 + 272 | 0 | 0, $424_1 | 0, i64toi32_i32$4 | 0, $428_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $16_1;
      i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$0;
      $435_1 = i64toi32_i32$4;
      $435$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$5 = i64toi32_i32$0 ? 0 : $17_1;
      i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$4;
      $438_1 = i64toi32_i32$5;
      $438$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $14$hi;
      i64toi32_i32$1 = $435$hi;
      i64toi32_i32$5 = $438$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = $14$hi;
      $765($6_1 + 288 | 0 | 0, $435_1 | 0, i64toi32_i32$1 | 0, $438_1 | 0, i64toi32_i32$5 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 288 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 292 | 0) >> 2] | 0;
      $444_1 = i64toi32_i32$3;
      $444$hi = i64toi32_i32$0;
      i64toi32_i32$5 = (i64toi32_i32$5 + 288 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $448_1 = i64toi32_i32$0;
      $448$hi = i64toi32_i32$3;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
      $450_1 = i64toi32_i32$3;
      $450$hi = i64toi32_i32$0;
      i64toi32_i32$5 = (i64toi32_i32$5 + 272 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $454_1 = i64toi32_i32$0;
      $454$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $444$hi;
      i64toi32_i32$0 = $448$hi;
      i64toi32_i32$5 = $450$hi;
      i64toi32_i32$1 = $454$hi;
      $760($6_1 + 256 | 0 | 0, $444_1 | 0, i64toi32_i32$3 | 0, $448_1 | 0, i64toi32_i32$0 | 0, $450_1 | 0, i64toi32_i32$5 | 0, $454_1 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 256 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 260 | 0) >> 2] | 0;
      $458_1 = i64toi32_i32$1;
      $458$hi = i64toi32_i32$5;
      i64toi32_i32$0 = (i64toi32_i32$0 + 256 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $462_1 = i64toi32_i32$5;
      $462$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $458$hi;
      i64toi32_i32$5 = $462$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$3 = $20$hi;
      $766($6_1 + 240 | 0 | 0, $458_1 | 0, i64toi32_i32$1 | 0, $462_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
      label$38 : {
       i64toi32_i32$5 = $6_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$3;
       $16$hi = i64toi32_i32$0;
       i64toi32_i32$5 = (i64toi32_i32$5 + 240 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$0;
       $17$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$5 = 0;
       i64toi32_i32$1 = 0;
       if ($754($16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0) {
        break label$38
       }
       HEAP32[($680() | 0) >> 2] = 68;
      }
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$5 = $17$hi;
      $721($6_1 + 224 | 0 | 0, $16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 232 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 236 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 224 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 228 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$5;
      break label$21;
     }
     HEAP32[($680() | 0) >> 2] = 68;
     $767($6_1 + 208 | 0 | 0, $4_1 | 0);
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 212 | 0) >> 2] | 0;
     $492_1 = i64toi32_i32$5;
     $492$hi = i64toi32_i32$1;
     i64toi32_i32$0 = (i64toi32_i32$0 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $496_1 = i64toi32_i32$1;
     $496$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $492$hi;
     i64toi32_i32$1 = $496$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 65536;
     $765($6_1 + 192 | 0 | 0, $492_1 | 0, i64toi32_i32$5 | 0, $496_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] | 0;
     $500_1 = i64toi32_i32$3;
     $500$hi = i64toi32_i32$0;
     i64toi32_i32$1 = (i64toi32_i32$1 + 192 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $504_1 = i64toi32_i32$0;
     $504$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $500$hi;
     i64toi32_i32$0 = $504$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 65536;
     $765($6_1 + 176 | 0 | 0, $500_1 | 0, i64toi32_i32$3 | 0, $504_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$0 = ($6_1 + 176 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$5;
     $19$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 176 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 180 | 0) >> 2] | 0;
     $16_1 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$5;
     break label$21;
    }
    i64toi32_i32$5 = 0;
    $718($1_1 | 0, 0 | 0, i64toi32_i32$5 | 0);
   }
   $764($6_1 + 96 | 0 | 0, +(+($4_1 | 0) * 0.0));
   i64toi32_i32$0 = $6_1 + 104 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $6_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$1;
   $16$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $16$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $19$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $6_1 + 432 | 0;
 }
 
 function $725($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, $7_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $19$hi = 0, $19_1 = 0, $14_1 = 0, $20$hi = 0, $13_1 = 0, i64toi32_i32$0 = 0, $20_1 = 0, $8_1 = 0, $11_1 = 0, $15_1 = 0, $22$hi = 0, $16_1 = 0, $21$hi = 0, $22_1 = 0, $21_1 = 0, $12_1 = 0, $17_1 = 0, $23$hi = 0, $24$hi = 0, $23_1 = 0, $24_1 = 0, $9_1 = 0, $168_1 = 0, $169_1 = 0, $170_1 = 0, $171_1 = 0, $172_1 = 0, $173_1 = 0, $174_1 = 0, $175_1 = 0, $176_1 = 0, $177_1 = 0, $18_1 = 0, $25_1 = 0.0, $10_1 = 0, $127_1 = 0, $233_1 = 0, $233$hi = 0, $237_1 = 0, $237$hi = 0, $239_1 = 0, $239$hi = 0, $243_1 = 0, $243$hi = 0, $253$hi = 0, $262_1 = 0, $262$hi = 0, $266_1 = 0, $266$hi = 0, $270_1 = 0, $270$hi = 0, $274_1 = 0, $274$hi = 0, $284_1 = 0, $284$hi = 0, $293_1 = 0, $293$hi = 0, $297_1 = 0, $297$hi = 0, $301_1 = 0, $301$hi = 0, $305_1 = 0, $305$hi = 0, $354_1 = 0, $354$hi = 0, $358_1 = 0, $358$hi = 0, $360_1 = 0, $360$hi = 0, $364_1 = 0, $364$hi = 0, $383_1 = 0, $383$hi = 0, $387_1 = 0, $387$hi = 0, $389_1 = 0, $389$hi = 0, $393_1 = 0, $393$hi = 0, $404_1 = 0, $404$hi = 0, $408_1 = 0, $408$hi = 0, $410_1 = 0, $410$hi = 0, $414_1 = 0, $414$hi = 0, $442_1 = 0, $442$hi = 0, $446_1 = 0, $446$hi = 0, $448_1 = 0, $448$hi = 0, $452_1 = 0, $452$hi = 0, $462_1 = 0, $462$hi = 0, $466_1 = 0, $466$hi = 0, $468_1 = 0, $468$hi = 0, $472_1 = 0, $472$hi = 0, $511_1 = 0, $589$hi = 0, $591$hi = 0, $599_1 = 0, $599$hi = 0, $740_1 = 0, $740$hi = 0, $744_1 = 0, $744$hi = 0, $746_1 = 0, $746$hi = 0, $750_1 = 0, $750$hi = 0, $769_1 = 0, $769$hi = 0, $773_1 = 0, $773$hi = 0, $815_1 = 0, $877_1 = 0, $877$hi = 0, $881_1 = 0, $881$hi = 0, $898_1 = 0, $898$hi = 0, $902_1 = 0, $902$hi = 0, $918_1 = 0, $918$hi = 0, $922_1 = 0, $922$hi = 0, $959_1 = 0, $959$hi = 0, $963_1 = 0, $963$hi = 0, $982_1 = 0, $982$hi = 0, $986_1 = 0, $986$hi = 0, $1009_1 = 0, $1009$hi = 0, $1013_1 = 0, $1013$hi = 0, $1029_1 = 0, $1029$hi = 0, $1033_1 = 0, $1033$hi = 0, $1047_1 = 0, $1047$hi = 0, $1049_1 = 0, $1049$hi = 0, $1069_1 = 0, $1069$hi = 0, $1073_1 = 0, $1073$hi = 0, $1096_1 = 0, $1096$hi = 0, $1098_1 = 0, $1098$hi = 0, $1104_1 = 0, $1104$hi = 0, $1111_1 = 0, $1111$hi = 0;
  $7_1 = global$0 - 8976 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  $9_1 = $4_1 + $3_1 | 0;
  $10_1 = 0 - $9_1 | 0;
  i64toi32_i32$0 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$0;
  $11_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       if (($2_1 | 0) == (48 | 0)) {
        break label$5
       }
       if (($2_1 | 0) != (46 | 0)) {
        break label$1
       }
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$3
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$2;
      }
      label$6 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$6
       }
       $11_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       continue label$4;
      }
      $11_1 = 1;
      $2_1 = $719($1_1 | 0) | 0;
      continue label$4;
     };
    }
    $2_1 = $719($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $19_1 = 0;
   $19$hi = i64toi32_i32$0;
   if (($2_1 | 0) != (48 | 0)) {
    break label$1
   }
   label$7 : while (1) {
    label$8 : {
     label$9 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$9
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$8;
     }
     $2_1 = $719($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$5;
    if (($2_1 | 0) == (48 | 0)) {
     continue label$7
    }
    break label$7;
   };
   $11_1 = 1;
   $8_1 = 1;
  }
  $12_1 = 0;
  HEAP32[($7_1 + 784 | 0) >> 2] = 0;
  $13_1 = $2_1 + -48 | 0;
  label$10 : {
   label$11 : {
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : {
        label$16 : {
         $14_1 = ($2_1 | 0) == (46 | 0);
         if ($14_1) {
          break label$16
         }
         i64toi32_i32$5 = 0;
         $20_1 = 0;
         $20$hi = i64toi32_i32$5;
         if ($13_1 >>> 0 <= 9 >>> 0) {
          break label$16
         }
         $15_1 = 0;
         $16_1 = 0;
         break label$15;
        }
        i64toi32_i32$5 = 0;
        $20_1 = 0;
        $20$hi = i64toi32_i32$5;
        $16_1 = 0;
        $15_1 = 0;
        $12_1 = 0;
        label$17 : while (1) {
         label$18 : {
          label$19 : {
           if (!($14_1 & 1 | 0)) {
            break label$19
           }
           label$20 : {
            if ($8_1) {
             break label$20
            }
            i64toi32_i32$5 = $20$hi;
            $19_1 = $20_1;
            $19$hi = i64toi32_i32$5;
            $8_1 = 1;
            break label$18;
           }
           $14_1 = !$11_1;
           break label$14;
          }
          i64toi32_i32$5 = $20$hi;
          i64toi32_i32$0 = $20_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 1;
          i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $20_1 = i64toi32_i32$1;
          $20$hi = i64toi32_i32$4;
          label$21 : {
           if (($15_1 | 0) > (2044 | 0)) {
            break label$21
           }
           $11_1 = ($2_1 | 0) == (48 | 0);
           i64toi32_i32$4 = $20$hi;
           $17_1 = $20_1;
           $14_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
           label$22 : {
            if (!$16_1) {
             break label$22
            }
            $13_1 = ($2_1 + Math_imul(HEAP32[$14_1 >> 2] | 0, 10) | 0) + -48 | 0;
           }
           $12_1 = $11_1 ? $12_1 : $17_1;
           HEAP32[$14_1 >> 2] = $13_1;
           $11_1 = 1;
           $2_1 = $16_1 + 1 | 0;
           $127_1 = $2_1;
           $2_1 = ($2_1 | 0) == (9 | 0);
           $16_1 = $2_1 ? 0 : $127_1;
           $15_1 = $15_1 + $2_1 | 0;
           break label$18;
          }
          if (($2_1 | 0) == (48 | 0)) {
           break label$18
          }
          HEAP32[($7_1 + 8960 | 0) >> 2] = HEAP32[($7_1 + 8960 | 0) >> 2] | 0 | 1 | 0;
          $12_1 = 18396;
         }
         label$23 : {
          label$24 : {
           $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$24
           }
           HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
           $2_1 = HEAPU8[$2_1 >> 0] | 0;
           break label$23;
          }
          $2_1 = $719($1_1 | 0) | 0;
         }
         $13_1 = $2_1 + -48 | 0;
         $14_1 = ($2_1 | 0) == (46 | 0);
         if ($14_1) {
          continue label$17
         }
         if ($13_1 >>> 0 < 10 >>> 0) {
          continue label$17
         }
         break label$17;
        };
       }
       i64toi32_i32$4 = $19$hi;
       i64toi32_i32$4 = $20$hi;
       i64toi32_i32$2 = $8_1;
       i64toi32_i32$4 = $19$hi;
       i64toi32_i32$0 = $20$hi;
       i64toi32_i32$3 = i64toi32_i32$2 ? $19_1 : $20_1;
       i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
       $19_1 = i64toi32_i32$3;
       $19$hi = i64toi32_i32$5;
       label$25 : {
        if (!$11_1) {
         break label$25
        }
        if (($2_1 & -33 | 0 | 0) != (69 | 0)) {
         break label$25
        }
        label$26 : {
         i64toi32_i32$5 = $726($1_1 | 0, $6_1 | 0) | 0;
         i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
         $21_1 = i64toi32_i32$5;
         $21$hi = i64toi32_i32$3;
         i64toi32_i32$2 = i64toi32_i32$5;
         i64toi32_i32$5 = -2147483648;
         i64toi32_i32$4 = 0;
         if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
          break label$26
         }
         if (!$6_1) {
          break label$12
         }
         i64toi32_i32$2 = 0;
         $21_1 = 0;
         $21$hi = i64toi32_i32$2;
         if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
          break label$26
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        i64toi32_i32$2 = $21$hi;
        i64toi32_i32$2 = $19$hi;
        i64toi32_i32$2 = $21$hi;
        i64toi32_i32$4 = $21_1;
        i64toi32_i32$3 = $19$hi;
        i64toi32_i32$5 = $19_1;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $19_1 = i64toi32_i32$0;
        $19$hi = i64toi32_i32$1;
        break label$11;
       }
       $14_1 = !$11_1;
       if (($2_1 | 0) < (0 | 0)) {
        break label$13
       }
      }
      if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
       break label$13
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     if (!$14_1) {
      break label$11
     }
     HEAP32[($680() | 0) >> 2] = 28;
    }
    i64toi32_i32$1 = 0;
    $20_1 = 0;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $718($1_1 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = 0;
    $19_1 = 0;
    $19$hi = i64toi32_i32$1;
    break label$10;
   }
   label$27 : {
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    if ($1_1) {
     break label$27
    }
    $764($7_1 | 0, +(+($5_1 | 0) * 0.0));
    i64toi32_i32$2 = $7_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[$7_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    break label$10;
   }
   label$28 : {
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$2 = $20_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 9;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$4 | 0)) {
     $168_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$5 >>> 0) {
       $169_1 = 0
      } else {
       $169_1 = 1
      }
      $170_1 = $169_1;
     } else {
      $170_1 = 0
     }
     $168_1 = $170_1;
    }
    if ($168_1) {
     break label$28
    }
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$2 = $20$hi;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$5 = $19_1;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$4 = $20_1;
    if ((i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$28
    }
    label$29 : {
     if (($3_1 | 0) > (30 | 0)) {
      break label$29
     }
     if ($1_1 >>> $3_1 | 0) {
      break label$28
     }
    }
    $767($7_1 + 48 | 0 | 0, $5_1 | 0);
    $770($7_1 + 32 | 0 | 0, $1_1 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 48 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 52 | 0) >> 2] | 0;
    $233_1 = i64toi32_i32$5;
    $233$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 48 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $237_1 = i64toi32_i32$2;
    $237$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 36 | 0) >> 2] | 0;
    $239_1 = i64toi32_i32$5;
    $239$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $243_1 = i64toi32_i32$2;
    $243$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $233$hi;
    i64toi32_i32$2 = $237$hi;
    i64toi32_i32$4 = $239$hi;
    i64toi32_i32$1 = $243$hi;
    $765($7_1 + 16 | 0 | 0, $233_1 | 0, i64toi32_i32$5 | 0, $237_1 | 0, i64toi32_i32$2 | 0, $239_1 | 0, i64toi32_i32$4 | 0, $243_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    break label$10;
   }
   label$30 : {
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$1 = 0;
    $253$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$4 = $253$hi;
    i64toi32_i32$5 = ($4_1 | 0) / (-2 | 0) | 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
     $171_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0) {
       $172_1 = 0
      } else {
       $172_1 = 1
      }
      $173_1 = $172_1;
     } else {
      $173_1 = 0
     }
     $171_1 = $173_1;
    }
    if ($171_1) {
     break label$30
    }
    HEAP32[($680() | 0) >> 2] = 68;
    $767($7_1 + 96 | 0 | 0, $5_1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 100 | 0) >> 2] | 0;
    $262_1 = i64toi32_i32$2;
    $262$hi = i64toi32_i32$1;
    i64toi32_i32$5 = (i64toi32_i32$5 + 96 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $266_1 = i64toi32_i32$1;
    $266$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $262$hi;
    i64toi32_i32$1 = $266$hi;
    i64toi32_i32$5 = -1;
    i64toi32_i32$4 = 2147418111;
    $765($7_1 + 80 | 0 | 0, $262_1 | 0, i64toi32_i32$2 | 0, $266_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
    $270_1 = i64toi32_i32$4;
    $270$hi = i64toi32_i32$5;
    i64toi32_i32$1 = (i64toi32_i32$1 + 80 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $274_1 = i64toi32_i32$5;
    $274$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $270$hi;
    i64toi32_i32$5 = $274$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 2147418111;
    $765($7_1 + 64 | 0 | 0, $270_1 | 0, i64toi32_i32$4 | 0, $274_1 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$5 = ($7_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$2;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$1;
    $20$hi = i64toi32_i32$2;
    break label$10;
   }
   label$31 : {
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$1 = $4_1 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $284_1 = i64toi32_i32$1;
    $284$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$5 = $19_1;
    i64toi32_i32$1 = $284$hi;
    i64toi32_i32$4 = $284_1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
     $174_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
       $175_1 = 0
      } else {
       $175_1 = 1
      }
      $176_1 = $175_1;
     } else {
      $176_1 = 0
     }
     $174_1 = $176_1;
    }
    if ($174_1) {
     break label$31
    }
    HEAP32[($680() | 0) >> 2] = 68;
    $767($7_1 + 144 | 0 | 0, $5_1 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 144 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 148 | 0) >> 2] | 0;
    $293_1 = i64toi32_i32$5;
    $293$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 144 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $297_1 = i64toi32_i32$2;
    $297$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $293$hi;
    i64toi32_i32$2 = $297$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 65536;
    $765($7_1 + 128 | 0 | 0, $293_1 | 0, i64toi32_i32$5 | 0, $297_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 128 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 132 | 0) >> 2] | 0;
    $301_1 = i64toi32_i32$1;
    $301$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $305_1 = i64toi32_i32$4;
    $305$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $301$hi;
    i64toi32_i32$4 = $305$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 65536;
    $765($7_1 + 112 | 0 | 0, $301_1 | 0, i64toi32_i32$1 | 0, $305_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$4 = ($7_1 + 112 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$2;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$2;
    $20$hi = i64toi32_i32$5;
    break label$10;
   }
   label$32 : {
    if (!$16_1) {
     break label$32
    }
    label$33 : {
     if (($16_1 | 0) > (8 | 0)) {
      break label$33
     }
     $2_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     label$34 : while (1) {
      $1_1 = Math_imul($1_1, 10);
      $16_1 = $16_1 + 1 | 0;
      if (($16_1 | 0) != (9 | 0)) {
       continue label$34
      }
      break label$34;
     };
     HEAP32[$2_1 >> 2] = $1_1;
    }
    $15_1 = $15_1 + 1 | 0;
   }
   i64toi32_i32$5 = $19$hi;
   $8_1 = $19_1;
   label$35 : {
    if (($12_1 | 0) >= (9 | 0)) {
     break label$35
    }
    if (($12_1 | 0) > ($8_1 | 0)) {
     break label$35
    }
    if (($8_1 | 0) > (17 | 0)) {
     break label$35
    }
    label$36 : {
     if (($8_1 | 0) != (9 | 0)) {
      break label$36
     }
     $767($7_1 + 192 | 0 | 0, $5_1 | 0);
     $770($7_1 + 176 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 192 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 196 | 0) >> 2] | 0;
     $354_1 = i64toi32_i32$5;
     $354$hi = i64toi32_i32$2;
     i64toi32_i32$4 = (i64toi32_i32$4 + 192 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $358_1 = i64toi32_i32$2;
     $358$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
     $360_1 = i64toi32_i32$5;
     $360$hi = i64toi32_i32$2;
     i64toi32_i32$4 = (i64toi32_i32$4 + 176 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $364_1 = i64toi32_i32$2;
     $364$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $354$hi;
     i64toi32_i32$2 = $358$hi;
     i64toi32_i32$4 = $360$hi;
     i64toi32_i32$1 = $364$hi;
     $765($7_1 + 160 | 0 | 0, $354_1 | 0, i64toi32_i32$5 | 0, $358_1 | 0, i64toi32_i32$2 | 0, $360_1 | 0, i64toi32_i32$4 | 0, $364_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7_1 + 160 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 160 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7_1 + 164 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$4;
     $20$hi = i64toi32_i32$1;
     break label$10;
    }
    label$37 : {
     if (($8_1 | 0) > (8 | 0)) {
      break label$37
     }
     $767($7_1 + 272 | 0 | 0, $5_1 | 0);
     $770($7_1 + 256 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 272 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 276 | 0) >> 2] | 0;
     $383_1 = i64toi32_i32$1;
     $383$hi = i64toi32_i32$4;
     i64toi32_i32$2 = ($7_1 + 272 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $387_1 = i64toi32_i32$4;
     $387$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 256 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 260 | 0) >> 2] | 0;
     $389_1 = i64toi32_i32$1;
     $389$hi = i64toi32_i32$4;
     i64toi32_i32$2 = ($7_1 + 256 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $393_1 = i64toi32_i32$4;
     $393$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $383$hi;
     i64toi32_i32$4 = $387$hi;
     i64toi32_i32$2 = $389$hi;
     i64toi32_i32$5 = $393$hi;
     $765($7_1 + 240 | 0 | 0, $383_1 | 0, i64toi32_i32$1 | 0, $387_1 | 0, i64toi32_i32$4 | 0, $389_1 | 0, i64toi32_i32$2 | 0, $393_1 | 0, i64toi32_i32$5 | 0);
     $767($7_1 + 224 | 0 | 0, HEAP32[(((8 - $8_1 | 0) << 2 | 0) + 4832 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 240 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 244 | 0) >> 2] | 0;
     $404_1 = i64toi32_i32$5;
     $404$hi = i64toi32_i32$2;
     i64toi32_i32$4 = (i64toi32_i32$4 + 240 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $408_1 = i64toi32_i32$2;
     $408$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 224 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 228 | 0) >> 2] | 0;
     $410_1 = i64toi32_i32$5;
     $410$hi = i64toi32_i32$2;
     i64toi32_i32$4 = (i64toi32_i32$4 + 224 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $414_1 = i64toi32_i32$2;
     $414$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $404$hi;
     i64toi32_i32$2 = $408$hi;
     i64toi32_i32$4 = $410$hi;
     i64toi32_i32$1 = $414$hi;
     $768($7_1 + 208 | 0 | 0, $404_1 | 0, i64toi32_i32$5 | 0, $408_1 | 0, i64toi32_i32$2 | 0, $410_1 | 0, i64toi32_i32$4 | 0, $414_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7_1 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7_1 + 212 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$4;
     $20$hi = i64toi32_i32$1;
     break label$10;
    }
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    label$38 : {
     $2_1 = ($3_1 + Math_imul($8_1, -3) | 0) + 27 | 0;
     if (($2_1 | 0) > (30 | 0)) {
      break label$38
     }
     if ($1_1 >>> $2_1 | 0) {
      break label$35
     }
    }
    $767($7_1 + 352 | 0 | 0, $5_1 | 0);
    $770($7_1 + 336 | 0 | 0, $1_1 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 352 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 356 | 0) >> 2] | 0;
    $442_1 = i64toi32_i32$1;
    $442$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 352 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $446_1 = i64toi32_i32$4;
    $446$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 336 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 340 | 0) >> 2] | 0;
    $448_1 = i64toi32_i32$1;
    $448$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 336 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $452_1 = i64toi32_i32$4;
    $452$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $442$hi;
    i64toi32_i32$4 = $446$hi;
    i64toi32_i32$2 = $448$hi;
    i64toi32_i32$5 = $452$hi;
    $765($7_1 + 320 | 0 | 0, $442_1 | 0, i64toi32_i32$1 | 0, $446_1 | 0, i64toi32_i32$4 | 0, $448_1 | 0, i64toi32_i32$2 | 0, $452_1 | 0, i64toi32_i32$5 | 0);
    $767($7_1 + 304 | 0 | 0, HEAP32[(($8_1 << 2 | 0) + 4792 | 0) >> 2] | 0 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 320 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 324 | 0) >> 2] | 0;
    $462_1 = i64toi32_i32$5;
    $462$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 320 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $466_1 = i64toi32_i32$2;
    $466$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
    $468_1 = i64toi32_i32$5;
    $468$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 304 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $472_1 = i64toi32_i32$2;
    $472$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $462$hi;
    i64toi32_i32$2 = $466$hi;
    i64toi32_i32$4 = $468$hi;
    i64toi32_i32$1 = $472$hi;
    $765($7_1 + 288 | 0 | 0, $462_1 | 0, i64toi32_i32$5 | 0, $466_1 | 0, i64toi32_i32$2 | 0, $468_1 | 0, i64toi32_i32$4 | 0, $472_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7_1 + 288 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 288 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 292 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    break label$10;
   }
   label$39 : while (1) {
    $2_1 = $15_1;
    $15_1 = $2_1 + -1 | 0;
    if (!(HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0)) {
     continue label$39
    }
    break label$39;
   };
   $16_1 = 0;
   label$40 : {
    label$41 : {
     $1_1 = ($8_1 | 0) % (9 | 0) | 0;
     if ($1_1) {
      break label$41
     }
     $14_1 = 0;
     break label$40;
    }
    $6_1 = ($8_1 | 0) > (-1 | 0) ? $1_1 : $1_1 + 9 | 0;
    label$42 : {
     label$43 : {
      if ($2_1) {
       break label$43
      }
      $14_1 = 0;
      $2_1 = 0;
      break label$42;
     }
     $11_1 = HEAP32[(((8 - $6_1 | 0) << 2 | 0) + 4832 | 0) >> 2] | 0;
     $17_1 = (1e9 | 0) / ($11_1 | 0) | 0;
     $13_1 = 0;
     $1_1 = 0;
     $14_1 = 0;
     label$44 : while (1) {
      $15_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
      $511_1 = $15_1;
      $15_1 = HEAP32[$15_1 >> 2] | 0;
      $12_1 = ($15_1 >>> 0) / ($11_1 >>> 0) | 0;
      $13_1 = $12_1 + $13_1 | 0;
      HEAP32[$511_1 >> 2] = $13_1;
      $13_1 = ($1_1 | 0) == ($14_1 | 0) & !$13_1 | 0;
      $14_1 = $13_1 ? ($14_1 + 1 | 0) & 2047 | 0 : $14_1;
      $8_1 = $13_1 ? $8_1 + -9 | 0 : $8_1;
      $13_1 = Math_imul($17_1, $15_1 - Math_imul($12_1, $11_1) | 0);
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) != ($2_1 | 0)) {
       continue label$44
      }
      break label$44;
     };
     if (!$13_1) {
      break label$42
     }
     HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $13_1;
     $2_1 = $2_1 + 1 | 0;
    }
    $8_1 = ($8_1 - $6_1 | 0) + 9 | 0;
   }
   label$45 : while (1) {
    $12_1 = ($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0;
    label$46 : {
     label$47 : while (1) {
      label$48 : {
       if (($8_1 | 0) < (36 | 0)) {
        break label$48
       }
       if (($8_1 | 0) != (36 | 0)) {
        break label$46
       }
       if ((HEAP32[$12_1 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
        break label$46
       }
      }
      $15_1 = $2_1 + 2047 | 0;
      $13_1 = 0;
      $11_1 = $2_1;
      label$49 : while (1) {
       $2_1 = $11_1;
       label$50 : {
        label$51 : {
         $1_1 = $15_1 & 2047 | 0;
         $11_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
         i64toi32_i32$2 = $11_1;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$4 = 0;
         i64toi32_i32$2 = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$5 = 29;
         i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          $177_1 = 0;
         } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
          $177_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         }
         $589$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $591$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $589$hi;
         i64toi32_i32$4 = $177_1;
         i64toi32_i32$2 = $591$hi;
         i64toi32_i32$5 = $13_1;
         i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
         i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
         }
         $19_1 = i64toi32_i32$3;
         $19$hi = i64toi32_i32$0;
         i64toi32_i32$1 = i64toi32_i32$3;
         i64toi32_i32$4 = 0;
         i64toi32_i32$5 = 1000000001;
         if (i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$5 >>> 0 | 0) | 0) {
          break label$51
         }
         $13_1 = 0;
         break label$50;
        }
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_udiv($19_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $20_1 = i64toi32_i32$0;
        $20$hi = i64toi32_i32$1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $599_1 = i64toi32_i32$0;
        $599$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$5 = $19_1;
        i64toi32_i32$0 = $599$hi;
        i64toi32_i32$4 = $599_1;
        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$3 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) + i64toi32_i32$0 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        $19_1 = i64toi32_i32$2;
        $19$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $20$hi;
        $13_1 = $20_1;
       }
       i64toi32_i32$3 = $19$hi;
       $15_1 = $19_1;
       HEAP32[$11_1 >> 2] = $19_1;
       $11_1 = ($1_1 | 0) != (($2_1 + -1 | 0) & 2047 | 0 | 0) ? $2_1 : ($1_1 | 0) == ($14_1 | 0) ? $2_1 : $19_1 ? $2_1 : $1_1;
       $15_1 = $1_1 + -1 | 0;
       if (($1_1 | 0) != ($14_1 | 0)) {
        continue label$49
       }
       break label$49;
      };
      $16_1 = $16_1 + -29 | 0;
      if (!$13_1) {
       continue label$47
      }
      break label$47;
     };
     label$52 : {
      $14_1 = ($14_1 + -1 | 0) & 2047 | 0;
      if (($14_1 | 0) != ($11_1 | 0)) {
       break label$52
      }
      $1_1 = ($7_1 + 784 | 0) + ((($11_1 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
      $2_1 = ($11_1 + -1 | 0) & 2047 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | 0 | (HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0) | 0;
     }
     $8_1 = $8_1 + 9 | 0;
     HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] = $13_1;
     continue label$45;
    }
    break label$45;
   };
   label$53 : {
    label$54 : while (1) {
     $6_1 = ($2_1 + 1 | 0) & 2047 | 0;
     $18_1 = ($7_1 + 784 | 0) + ((($2_1 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
     label$55 : while (1) {
      $15_1 = ($8_1 | 0) > (45 | 0) ? 9 : 1;
      label$56 : {
       label$57 : while (1) {
        $11_1 = $14_1;
        $1_1 = 0;
        label$58 : {
         label$59 : {
          label$60 : while (1) {
           $14_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
           if (($14_1 | 0) == ($2_1 | 0)) {
            break label$59
           }
           $14_1 = HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] | 0;
           $13_1 = HEAP32[(($1_1 << 2 | 0) + 4816 | 0) >> 2] | 0;
           if ($14_1 >>> 0 < $13_1 >>> 0) {
            break label$59
           }
           if ($14_1 >>> 0 > $13_1 >>> 0) {
            break label$58
           }
           $1_1 = $1_1 + 1 | 0;
           if (($1_1 | 0) != (4 | 0)) {
            continue label$60
           }
           break label$60;
          };
         }
         if (($8_1 | 0) != (36 | 0)) {
          break label$58
         }
         i64toi32_i32$3 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$3;
         $1_1 = 0;
         i64toi32_i32$3 = 0;
         $20_1 = 0;
         $20$hi = i64toi32_i32$3;
         label$61 : while (1) {
          label$62 : {
           $14_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
           if (($14_1 | 0) != ($2_1 | 0)) {
            break label$62
           }
           $2_1 = ($2_1 + 1 | 0) & 2047 | 0;
           HEAP32[((($2_1 << 2 | 0) + ($7_1 + 784 | 0) | 0) + -4 | 0) >> 2] = 0;
          }
          i64toi32_i32$3 = $19$hi;
          i64toi32_i32$3 = $20$hi;
          i64toi32_i32$3 = $19$hi;
          i64toi32_i32$5 = $20$hi;
          i64toi32_i32$1 = 0;
          i64toi32_i32$4 = 1075633366;
          $765($7_1 + 768 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 1342177280 | 0, i64toi32_i32$4 | 0);
          $770($7_1 + 752 | 0 | 0, HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] | 0 | 0);
          i64toi32_i32$5 = $7_1;
          i64toi32_i32$4 = HEAP32[($7_1 + 768 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7_1 + 772 | 0) >> 2] | 0;
          $740_1 = i64toi32_i32$4;
          $740$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7_1 + 768 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $744_1 = i64toi32_i32$1;
          $744$hi = i64toi32_i32$4;
          i64toi32_i32$5 = $7_1;
          i64toi32_i32$4 = HEAP32[($7_1 + 752 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7_1 + 756 | 0) >> 2] | 0;
          $746_1 = i64toi32_i32$4;
          $746$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7_1 + 752 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $750_1 = i64toi32_i32$1;
          $750$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $740$hi;
          i64toi32_i32$1 = $744$hi;
          i64toi32_i32$5 = $746$hi;
          i64toi32_i32$3 = $750$hi;
          $760($7_1 + 736 | 0 | 0, $740_1 | 0, i64toi32_i32$4 | 0, $744_1 | 0, i64toi32_i32$1 | 0, $746_1 | 0, i64toi32_i32$5 | 0, $750_1 | 0, i64toi32_i32$3 | 0);
          i64toi32_i32$1 = ($7_1 + 736 | 0) + 8 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $20_1 = i64toi32_i32$3;
          $20$hi = i64toi32_i32$5;
          i64toi32_i32$1 = $7_1;
          i64toi32_i32$5 = HEAP32[($7_1 + 736 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[($7_1 + 740 | 0) >> 2] | 0;
          $19_1 = i64toi32_i32$5;
          $19$hi = i64toi32_i32$3;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (4 | 0)) {
           continue label$61
          }
          break label$61;
         };
         $767($7_1 + 720 | 0 | 0, $5_1 | 0);
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$3 = $20$hi;
         i64toi32_i32$1 = $7_1;
         i64toi32_i32$3 = HEAP32[($7_1 + 720 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($7_1 + 724 | 0) >> 2] | 0;
         $769_1 = i64toi32_i32$3;
         $769$hi = i64toi32_i32$5;
         i64toi32_i32$1 = ($7_1 + 720 | 0) + 8 | 0;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
         $773_1 = i64toi32_i32$5;
         $773$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$5 = $20$hi;
         i64toi32_i32$1 = $769$hi;
         i64toi32_i32$4 = $773$hi;
         $765($7_1 + 704 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $769_1 | 0, i64toi32_i32$1 | 0, $773_1 | 0, i64toi32_i32$4 | 0);
         i64toi32_i32$5 = ($7_1 + 704 | 0) + 8 | 0;
         i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
         $20_1 = i64toi32_i32$4;
         $20$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$1;
         i64toi32_i32$5 = $7_1;
         i64toi32_i32$1 = HEAP32[($7_1 + 704 | 0) >> 2] | 0;
         i64toi32_i32$4 = HEAP32[($7_1 + 708 | 0) >> 2] | 0;
         $21_1 = i64toi32_i32$1;
         $21$hi = i64toi32_i32$4;
         $13_1 = $16_1 + 113 | 0;
         $1_1 = $13_1 - $4_1 | 0;
         $15_1 = ($1_1 | 0) < ($3_1 | 0);
         $14_1 = $15_1 ? (($1_1 | 0) > (0 | 0) ? $1_1 : 0) : $3_1;
         if (($14_1 | 0) <= (112 | 0)) {
          break label$56
         }
         i64toi32_i32$4 = 0;
         $22_1 = 0;
         $22$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $23_1 = 0;
         $23$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $24_1 = 0;
         $24$hi = i64toi32_i32$4;
         break label$53;
        }
        $16_1 = $15_1 + $16_1 | 0;
        $14_1 = $2_1;
        if (($11_1 | 0) == ($2_1 | 0)) {
         continue label$57
        }
        break label$57;
       };
       $12_1 = 1e9 >>> $15_1 | 0;
       $17_1 = (-1 << $15_1 | 0) ^ -1 | 0;
       $1_1 = 0;
       $14_1 = $11_1;
       label$63 : while (1) {
        $13_1 = ($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0;
        $815_1 = $13_1;
        $13_1 = HEAP32[$13_1 >> 2] | 0;
        $1_1 = ($13_1 >>> $15_1 | 0) + $1_1 | 0;
        HEAP32[$815_1 >> 2] = $1_1;
        $1_1 = ($11_1 | 0) == ($14_1 | 0) & !$1_1 | 0;
        $14_1 = $1_1 ? ($14_1 + 1 | 0) & 2047 | 0 : $14_1;
        $8_1 = $1_1 ? $8_1 + -9 | 0 : $8_1;
        $1_1 = Math_imul($13_1 & $17_1 | 0, $12_1);
        $11_1 = ($11_1 + 1 | 0) & 2047 | 0;
        if (($11_1 | 0) != ($2_1 | 0)) {
         continue label$63
        }
        break label$63;
       };
       if (!$1_1) {
        continue label$55
       }
       label$64 : {
        if (($6_1 | 0) == ($14_1 | 0)) {
         break label$64
        }
        HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $1_1;
        $2_1 = $6_1;
        continue label$54;
       }
       HEAP32[$18_1 >> 2] = HEAP32[$18_1 >> 2] | 0 | 1 | 0;
       $14_1 = $6_1;
       continue label$55;
      }
      break label$55;
     };
     break label$54;
    };
    $764($7_1 + 656 | 0 | 0, +(+$1930(+(1.0), 225 - $14_1 | 0 | 0)));
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 656 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 660 | 0) >> 2] | 0;
    $877_1 = i64toi32_i32$4;
    $877$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7_1 + 656 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $881_1 = i64toi32_i32$1;
    $881$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$4 = $20$hi;
    i64toi32_i32$4 = $877$hi;
    i64toi32_i32$1 = $881$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    $720($7_1 + 688 | 0 | 0, $877_1 | 0, i64toi32_i32$4 | 0, $881_1 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$5 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 696 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 700 | 0) >> 2] | 0;
    $24_1 = i64toi32_i32$3;
    $24$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 688 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 692 | 0) >> 2] | 0;
    $23_1 = i64toi32_i32$5;
    $23$hi = i64toi32_i32$3;
    $764($7_1 + 640 | 0 | 0, +(+$1930(+(1.0), 113 - $14_1 | 0 | 0)));
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 640 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 644 | 0) >> 2] | 0;
    $898_1 = i64toi32_i32$3;
    $898$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 640 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $902_1 = i64toi32_i32$5;
    $902$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$1 = $898$hi;
    i64toi32_i32$4 = $902$hi;
    $1929($7_1 + 672 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $898_1 | 0, i64toi32_i32$1 | 0, $902_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$4 = i64toi32_i32$5;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 672 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 676 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 680 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 684 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$3 = $22$hi;
    $766($7_1 + 624 | 0 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$5 | 0, $22_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$3 = $24$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 624 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 628 | 0) >> 2] | 0;
    $918_1 = i64toi32_i32$3;
    $918$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 624 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $922_1 = i64toi32_i32$5;
    $922$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$5 = $24$hi;
    i64toi32_i32$1 = $918$hi;
    i64toi32_i32$4 = $922$hi;
    $760($7_1 + 608 | 0 | 0, $23_1 | 0, i64toi32_i32$3 | 0, $24_1 | 0, i64toi32_i32$5 | 0, $918_1 | 0, i64toi32_i32$1 | 0, $922_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$5 = ($7_1 + 608 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 608 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 612 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$1;
    $21$hi = i64toi32_i32$4;
   }
   label$65 : {
    $8_1 = ($11_1 + 4 | 0) & 2047 | 0;
    if (($8_1 | 0) == ($2_1 | 0)) {
     break label$65
    }
    label$66 : {
     label$67 : {
      $8_1 = HEAP32[(($7_1 + 784 | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
      if ($8_1 >>> 0 > 499999999 >>> 0) {
       break label$67
      }
      label$68 : {
       if ($8_1) {
        break label$68
       }
       if ((($11_1 + 5 | 0) & 2047 | 0 | 0) == ($2_1 | 0)) {
        break label$66
       }
      }
      $764($7_1 + 496 | 0 | 0, +(+($5_1 | 0) * .25));
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$4 = HEAP32[($7_1 + 496 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 500 | 0) >> 2] | 0;
      $959_1 = i64toi32_i32$4;
      $959$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7_1 + 496 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $963_1 = i64toi32_i32$1;
      $963$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$5 = $959$hi;
      i64toi32_i32$3 = $963$hi;
      $760($7_1 + 480 | 0 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $959_1 | 0, i64toi32_i32$5 | 0, $963_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7_1 + 480 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$3;
      $22$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 480 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7_1 + 484 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$3;
      break label$66;
     }
     label$69 : {
      if (($8_1 | 0) == (5e8 | 0)) {
       break label$69
      }
      $764($7_1 + 592 | 0 | 0, +(+($5_1 | 0) * .75));
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$3 = $22$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$3 = HEAP32[($7_1 + 592 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($7_1 + 596 | 0) >> 2] | 0;
      $982_1 = i64toi32_i32$3;
      $982$hi = i64toi32_i32$5;
      i64toi32_i32$1 = ($7_1 + 592 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $986_1 = i64toi32_i32$5;
      $986$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$1 = $982$hi;
      i64toi32_i32$4 = $986$hi;
      $760($7_1 + 576 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $982_1 | 0, i64toi32_i32$1 | 0, $986_1 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$5 = ($7_1 + 576 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$4;
      $22$hi = i64toi32_i32$1;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$1 = HEAP32[($7_1 + 576 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($7_1 + 580 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$1;
      $19$hi = i64toi32_i32$4;
      break label$66;
     }
     $25_1 = +($5_1 | 0);
     label$70 : {
      if ((($11_1 + 5 | 0) & 2047 | 0 | 0) != ($2_1 | 0)) {
       break label$70
      }
      $764($7_1 + 528 | 0 | 0, +($25_1 * .5));
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$4 = HEAP32[($7_1 + 528 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 532 | 0) >> 2] | 0;
      $1009_1 = i64toi32_i32$4;
      $1009$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7_1 + 528 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $1013_1 = i64toi32_i32$1;
      $1013$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$5 = $1009$hi;
      i64toi32_i32$3 = $1013$hi;
      $760($7_1 + 512 | 0 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $1009_1 | 0, i64toi32_i32$5 | 0, $1013_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7_1 + 512 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$3;
      $22$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 512 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7_1 + 516 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$3;
      break label$66;
     }
     $764($7_1 + 560 | 0 | 0, +($25_1 * .75));
     i64toi32_i32$3 = $19$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$3 = HEAP32[($7_1 + 560 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 564 | 0) >> 2] | 0;
     $1029_1 = i64toi32_i32$3;
     $1029$hi = i64toi32_i32$5;
     i64toi32_i32$1 = ($7_1 + 560 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $1033_1 = i64toi32_i32$5;
     $1033$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $19$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$1 = $1029$hi;
     i64toi32_i32$4 = $1033$hi;
     $760($7_1 + 544 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $1029_1 | 0, i64toi32_i32$1 | 0, $1033_1 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$5 = ($7_1 + 544 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $22_1 = i64toi32_i32$4;
     $22$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 544 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 548 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
    }
    if (($14_1 | 0) > (111 | 0)) {
     break label$65
    }
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    $1929($7_1 + 464 | 0 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 464 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 468 | 0) >> 2] | 0;
    $1047_1 = i64toi32_i32$3;
    $1047$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 472 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 476 | 0) >> 2] | 0;
    $1049_1 = i64toi32_i32$5;
    $1049$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1047$hi;
    i64toi32_i32$5 = $1049$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 0;
    if ($754($1047_1 | 0, i64toi32_i32$3 | 0, $1049_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0) {
     break label$65
    }
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    $760($7_1 + 448 | 0 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1 + 456 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$3;
    $22$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 448 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 452 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$3 = $22$hi;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$5 = $20$hi;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$4 = $22$hi;
   $760($7_1 + 432 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $22_1 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$4 = HEAP32[($7_1 + 432 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7_1 + 436 | 0) >> 2] | 0;
   $1069_1 = i64toi32_i32$4;
   $1069$hi = i64toi32_i32$1;
   i64toi32_i32$5 = ($7_1 + 432 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $1073_1 = i64toi32_i32$1;
   $1073$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$4 = $24$hi;
   i64toi32_i32$4 = $1069$hi;
   i64toi32_i32$1 = $1073$hi;
   i64toi32_i32$5 = $23$hi;
   i64toi32_i32$3 = $24$hi;
   $766($7_1 + 416 | 0 | 0, $1069_1 | 0, i64toi32_i32$4 | 0, $1073_1 | 0, i64toi32_i32$1 | 0, $23_1 | 0, i64toi32_i32$5 | 0, $24_1 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($7_1 + 416 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$3;
   $20$hi = i64toi32_i32$5;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = HEAP32[($7_1 + 416 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($7_1 + 420 | 0) >> 2] | 0;
   $21_1 = i64toi32_i32$5;
   $21$hi = i64toi32_i32$3;
   label$71 : {
    if (($13_1 & 2147483647 | 0 | 0) <= (-2 - $9_1 | 0 | 0)) {
     break label$71
    }
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$5 = $20$hi;
    $722($7_1 + 400 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 1073610752;
    $765($7_1 + 384 | 0 | 0, $21_1 | 0, i64toi32_i32$5 | 0, $20_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 400 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 404 | 0) >> 2] | 0;
    $1096_1 = i64toi32_i32$4;
    $1096$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 408 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 412 | 0) >> 2] | 0;
    $1098_1 = i64toi32_i32$1;
    $1098$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1096$hi;
    i64toi32_i32$1 = $1098$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 1081081856;
    $2_1 = $755($1096_1 | 0, i64toi32_i32$4 | 0, $1098_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$1 = ($7_1 + 384 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $1104_1 = i64toi32_i32$5;
    $1104$hi = i64toi32_i32$3;
    $13_1 = ($2_1 | 0) < (0 | 0);
    i64toi32_i32$0 = $13_1;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$5 = $1104$hi;
    i64toi32_i32$4 = i64toi32_i32$0 ? $20_1 : $1104_1;
    i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$5;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $21$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 388 | 0) >> 2] | 0;
    $1111_1 = i64toi32_i32$1;
    $1111$hi = i64toi32_i32$4;
    i64toi32_i32$5 = $13_1;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = $1111$hi;
    i64toi32_i32$3 = i64toi32_i32$5 ? $21_1 : $1111_1;
    i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$4 : i64toi32_i32$1;
    $21_1 = i64toi32_i32$3;
    $21$hi = i64toi32_i32$0;
    $16_1 = $16_1 + (($2_1 | 0) > (-1 | 0)) | 0;
    label$72 : {
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$0 = $22$hi;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = 0;
     if (($754($19_1 | 0, $19$hi | 0, $22_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0 | 0) != (0 | 0) & ($15_1 & ($13_1 | ($14_1 | 0) != ($1_1 | 0) | 0) | 0) | 0) {
      break label$72
     }
     if (($16_1 + 110 | 0 | 0) <= ($10_1 | 0)) {
      break label$71
     }
    }
    HEAP32[($680() | 0) >> 2] = 68;
   }
   i64toi32_i32$4 = $21$hi;
   i64toi32_i32$4 = $20$hi;
   i64toi32_i32$4 = $21$hi;
   i64toi32_i32$5 = $20$hi;
   $721($7_1 + 368 | 0 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $16_1 | 0);
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$5 = HEAP32[($7_1 + 376 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[($7_1 + 380 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$4;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$4 = HEAP32[($7_1 + 368 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($7_1 + 372 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$4;
   $20$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$4 = $0_1;
  HEAP32[i64toi32_i32$4 >> 2] = $20_1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $19$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $7_1 + 8976 | 0;
 }
 
 function $726($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $6$hi = 0, $5_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $85$hi = 0, $87_1 = 0, $87$hi = 0, $136$hi = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
    $2_1 = HEAPU8[$2_1 >> 0] | 0;
    break label$1;
   }
   $2_1 = $719($0_1 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    switch ($2_1 + -43 | 0 | 0) {
    default:
     $3_1 = $2_1 + -48 | 0;
     $4_1 = 0;
     break label$3;
    case 0:
    case 2:
     break label$4;
    };
   }
   label$6 : {
    label$7 : {
     $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if ($3_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
      break label$7
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
     $5_1 = HEAPU8[$3_1 >> 0] | 0;
     break label$6;
    }
    $5_1 = $719($0_1 | 0) | 0;
   }
   $4_1 = ($2_1 | 0) == (45 | 0);
   $3_1 = $5_1 + -48 | 0;
   label$8 : {
    if (!$1_1) {
     break label$8
    }
    if ($3_1 >>> 0 < 10 >>> 0) {
     break label$8
    }
    if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
     break label$8
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   $2_1 = $5_1;
  }
  label$9 : {
   label$10 : {
    if ($3_1 >>> 0 >= 10 >>> 0) {
     break label$10
    }
    $3_1 = 0;
    label$11 : while (1) {
     $3_1 = $2_1 + Math_imul($3_1, 10) | 0;
     label$12 : {
      label$13 : {
       $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$13
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$12;
      }
      $2_1 = $719($0_1 | 0) | 0;
     }
     $3_1 = $3_1 + -48 | 0;
     label$14 : {
      $5_1 = $2_1 + -48 | 0;
      if ($5_1 >>> 0 > 9 >>> 0) {
       break label$14
      }
      if (($3_1 | 0) < (214748364 | 0)) {
       continue label$11
      }
     }
     break label$11;
    };
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $6_1 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$0;
    label$15 : {
     if ($5_1 >>> 0 >= 10 >>> 0) {
      break label$15
     }
     label$16 : while (1) {
      i64toi32_i32$0 = 0;
      $85$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $87_1 = i64toi32_i32$1;
      $87$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $85$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = $87$hi;
      i64toi32_i32$3 = $87_1;
      i64toi32_i32$4 = $2_1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $6_1 = i64toi32_i32$4;
      $6$hi = i64toi32_i32$5;
      label$17 : {
       label$18 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$18
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$17;
       }
       $2_1 = $719($0_1 | 0) | 0;
      }
      i64toi32_i32$5 = $6$hi;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = -48;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $6_1 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$4;
      $5_1 = $2_1 + -48 | 0;
      if ($5_1 >>> 0 > 9 >>> 0) {
       break label$15
      }
      i64toi32_i32$4 = $6$hi;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$0 = 21474836;
      i64toi32_i32$3 = 2061584302;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$0 | 0)) {
       $18_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
         $19_1 = 0
        } else {
         $19_1 = 1
        }
        $20_1 = $19_1;
       } else {
        $20_1 = 0
       }
       $18_1 = $20_1;
      }
      if ($18_1) {
       continue label$16
      }
      break label$16;
     };
    }
    label$19 : {
     if ($5_1 >>> 0 >= 10 >>> 0) {
      break label$19
     }
     label$20 : while (1) {
      label$21 : {
       label$22 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$22
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$21;
       }
       $2_1 = $719($0_1 | 0) | 0;
      }
      if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
       continue label$20
      }
      break label$20;
     };
    }
    label$23 : {
     if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
      break label$23
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    i64toi32_i32$1 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
    $136$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = $136$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$0;
    i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$3;
    $6_1 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$5;
    break label$9;
   }
   i64toi32_i32$5 = -2147483648;
   $6_1 = 0;
   $6$hi = i64toi32_i32$5;
   if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
    break label$9
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$0 = 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
   return i64toi32_i32$0 | 0;
  }
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$5 = $6_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$5 | 0;
 }
 
 function $727($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $9$hi = 0, i64toi32_i32$1 = 0, $9_1 = 0, $10$hi = 0, $11$hi = 0, $10_1 = 0, $7_1 = 0, $11_1 = 0, $6_1 = 0, $4_1 = 0, $12_1 = 0, $12$hi = 0, $8_1 = 0, $32_1 = 0, $33_1 = 0, $185_1 = 0, $185$hi = 0, $242_1 = 0, $242$hi = 0, $324$hi = 0, $327_1 = 0, $327$hi = 0, $406$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         if ($1_1 >>> 0 > 36 >>> 0) {
          break label$7
         }
         label$8 : while (1) {
          label$9 : {
           label$10 : {
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$10
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
            $5_1 = HEAPU8[$5_1 >> 0] | 0;
            break label$9;
           }
           $5_1 = $719($0_1 | 0) | 0;
          }
          if ($675($5_1 | 0) | 0) {
           continue label$8
          }
          break label$8;
         };
         $6_1 = 0;
         label$11 : {
          label$12 : {
           switch ($5_1 + -43 | 0 | 0) {
           case 0:
           case 2:
            break label$12;
           default:
            break label$11;
           };
          }
          $6_1 = ($5_1 | 0) == (45 | 0) ? -1 : 0;
          label$13 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$13
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break label$11;
          }
          $5_1 = $719($0_1 | 0) | 0;
         }
         label$14 : {
          label$15 : {
           if ($1_1 & -17 | 0) {
            break label$15
           }
           if (($5_1 | 0) != (48 | 0)) {
            break label$15
           }
           label$16 : {
            label$17 : {
             $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$17
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
             $5_1 = HEAPU8[$5_1 >> 0] | 0;
             break label$16;
            }
            $5_1 = $719($0_1 | 0) | 0;
           }
           label$18 : {
            if (($5_1 & -33 | 0 | 0) != (88 | 0)) {
             break label$18
            }
            label$19 : {
             label$20 : {
              $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$20
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
              $5_1 = HEAPU8[$5_1 >> 0] | 0;
              break label$19;
             }
             $5_1 = $719($0_1 | 0) | 0;
            }
            $1_1 = 16;
            if ((HEAPU8[($5_1 + 4897 | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
             break label$5
            }
            label$21 : {
             if (HEAP32[($0_1 + 104 | 0) >> 2] | 0) {
              break label$21
             }
             i64toi32_i32$0 = 0;
             $3_1 = 0;
             $3$hi = i64toi32_i32$0;
             if ($2_1) {
              break label$1
             }
             break label$2;
            }
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -1 | 0;
            if (!$2_1) {
             break label$2
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -2 | 0;
            i64toi32_i32$0 = 0;
            $3_1 = 0;
            $3$hi = i64toi32_i32$0;
            break label$1;
           }
           if ($1_1) {
            break label$14
           }
           $1_1 = 8;
           break label$5;
          }
          $1_1 = $1_1 ? $1_1 : 10;
          if ($1_1 >>> 0 > (HEAPU8[($5_1 + 4897 | 0) >> 0] | 0) >>> 0) {
           break label$14
          }
          label$22 : {
           if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
            break label$22
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
          }
          i64toi32_i32$0 = 0;
          $3_1 = 0;
          $3$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $718($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
          HEAP32[($680() | 0) >> 2] = 28;
          break label$1;
         }
         if (($1_1 | 0) != (10 | 0)) {
          break label$5
         }
         i64toi32_i32$0 = 0;
         $9_1 = 0;
         $9$hi = i64toi32_i32$0;
         label$23 : {
          $2_1 = $5_1 + -48 | 0;
          if ($2_1 >>> 0 > 9 >>> 0) {
           break label$23
          }
          $1_1 = 0;
          label$24 : while (1) {
           $1_1 = Math_imul($1_1, 10);
           label$25 : {
            label$26 : {
             $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$26
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
             $5_1 = HEAPU8[$5_1 >> 0] | 0;
             break label$25;
            }
            $5_1 = $719($0_1 | 0) | 0;
           }
           $1_1 = $1_1 + $2_1 | 0;
           label$27 : {
            $2_1 = $5_1 + -48 | 0;
            if ($2_1 >>> 0 > 9 >>> 0) {
             break label$27
            }
            if ($1_1 >>> 0 < 429496729 >>> 0) {
             continue label$24
            }
           }
           break label$24;
          };
          i64toi32_i32$0 = 0;
          $9_1 = $1_1;
          $9$hi = i64toi32_i32$0;
         }
         if ($2_1 >>> 0 > 9 >>> 0) {
          break label$6
         }
         i64toi32_i32$0 = $9$hi;
         i64toi32_i32$1 = 0;
         i64toi32_i32$1 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
         $10_1 = i64toi32_i32$1;
         $10$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         $11_1 = $2_1;
         $11$hi = i64toi32_i32$0;
         label$28 : while (1) {
          label$29 : {
           label$30 : {
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$30
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
            $5_1 = HEAPU8[$5_1 >> 0] | 0;
            break label$29;
           }
           $5_1 = $719($0_1 | 0) | 0;
          }
          i64toi32_i32$0 = $10$hi;
          i64toi32_i32$0 = $11$hi;
          i64toi32_i32$0 = $10$hi;
          i64toi32_i32$2 = $10_1;
          i64toi32_i32$1 = $11$hi;
          i64toi32_i32$3 = $11_1;
          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $9_1 = i64toi32_i32$4;
          $9$hi = i64toi32_i32$5;
          $2_1 = $5_1 + -48 | 0;
          if ($2_1 >>> 0 > 9 >>> 0) {
           break label$6
          }
          i64toi32_i32$5 = $9$hi;
          i64toi32_i32$0 = $9_1;
          i64toi32_i32$2 = 429496729;
          i64toi32_i32$3 = -1717986918;
          if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
           break label$6
          }
          i64toi32_i32$0 = $9$hi;
          i64toi32_i32$5 = 0;
          i64toi32_i32$5 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
          $10_1 = i64toi32_i32$5;
          $10$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $11_1 = $2_1;
          $11$hi = i64toi32_i32$0;
          i64toi32_i32$3 = $2_1;
          i64toi32_i32$5 = -1;
          i64toi32_i32$2 = -1;
          i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
          $185_1 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
          $185$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $10$hi;
          i64toi32_i32$0 = $10_1;
          i64toi32_i32$3 = $185$hi;
          i64toi32_i32$2 = $185_1;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0 | 0) | 0) {
           continue label$28
          }
          break label$28;
         };
         $1_1 = 10;
         break label$4;
        }
        HEAP32[($680() | 0) >> 2] = 28;
        i64toi32_i32$0 = 0;
        $3_1 = 0;
        $3$hi = i64toi32_i32$0;
        break label$1;
       }
       $1_1 = 10;
       if ($2_1 >>> 0 <= 9 >>> 0) {
        break label$4
       }
       break label$3;
      }
      label$31 : {
       if (!($1_1 & ($1_1 + -1 | 0) | 0)) {
        break label$31
       }
       i64toi32_i32$0 = 0;
       $9_1 = 0;
       $9$hi = i64toi32_i32$0;
       label$32 : {
        $2_1 = HEAPU8[($5_1 + 4897 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $2_1 >>> 0) {
         break label$32
        }
        $7_1 = 0;
        label$33 : while (1) {
         $7_1 = $2_1 + Math_imul($7_1, $1_1) | 0;
         label$34 : {
          label$35 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$35
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break label$34;
          }
          $5_1 = $719($0_1 | 0) | 0;
         }
         $2_1 = HEAPU8[($5_1 + 4897 | 0) >> 0] | 0;
         label$36 : {
          if ($7_1 >>> 0 > 119304646 >>> 0) {
           break label$36
          }
          if ($1_1 >>> 0 > $2_1 >>> 0) {
           continue label$33
          }
         }
         break label$33;
        };
        i64toi32_i32$0 = 0;
        $9_1 = $7_1;
        $9$hi = i64toi32_i32$0;
       }
       if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$4
       }
       i64toi32_i32$0 = 0;
       $10_1 = $1_1;
       $10$hi = i64toi32_i32$0;
       label$37 : while (1) {
        i64toi32_i32$0 = $9$hi;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $9$hi;
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$5 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $11_1 = i64toi32_i32$5;
        $11$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$2 = $2_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$3 = 255;
        i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
        $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $12$hi = i64toi32_i32$5;
        i64toi32_i32$0 = $12_1;
        i64toi32_i32$2 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
        $242_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
        $242$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $11$hi;
        i64toi32_i32$5 = $11_1;
        i64toi32_i32$0 = $242$hi;
        i64toi32_i32$3 = $242_1;
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
         break label$4
        }
        label$38 : {
         label$39 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$39
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$38;
         }
         $5_1 = $719($0_1 | 0) | 0;
        }
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$5 = $12$hi;
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$3 = $11_1;
        i64toi32_i32$2 = $12$hi;
        i64toi32_i32$0 = $12_1;
        i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $9_1 = i64toi32_i32$1;
        $9$hi = i64toi32_i32$4;
        $2_1 = HEAPU8[($5_1 + 4897 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $2_1 >>> 0) {
         break label$4
        }
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$4 = $9$hi;
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$5 = $9$hi;
        i64toi32_i32$0 = 0;
        $756($4_1 | 0, $10_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0, $9_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
        i64toi32_i32$3 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$4 = 0;
        if ((i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$4
        }
        continue label$37;
       };
      }
      $8_1 = HEAP8[(((Math_imul($1_1, 23) >>> 5 | 0) & 7 | 0) + 5153 | 0) >> 0] | 0;
      i64toi32_i32$3 = 0;
      $9_1 = 0;
      $9$hi = i64toi32_i32$3;
      label$40 : {
       $2_1 = HEAPU8[($5_1 + 4897 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$40
       }
       $7_1 = 0;
       label$41 : while (1) {
        $7_1 = $2_1 | ($7_1 << $8_1 | 0) | 0;
        label$42 : {
         label$43 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$43
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$42;
         }
         $5_1 = $719($0_1 | 0) | 0;
        }
        $2_1 = HEAPU8[($5_1 + 4897 | 0) >> 0] | 0;
        label$44 : {
         if ($7_1 >>> 0 > 134217727 >>> 0) {
          break label$44
         }
         if ($1_1 >>> 0 > $2_1 >>> 0) {
          continue label$41
         }
        }
        break label$41;
       };
       i64toi32_i32$3 = 0;
       $9_1 = $7_1;
       $9$hi = i64toi32_i32$3;
      }
      i64toi32_i32$3 = 0;
      $10_1 = $8_1;
      $10$hi = i64toi32_i32$3;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$0 = $10_1;
      i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $32_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
       $32_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
      }
      $11_1 = $32_1;
      $11$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $9$hi;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$3 = $11_1;
      i64toi32_i32$4 = $9$hi;
      i64toi32_i32$0 = $9_1;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
       break label$4
      }
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break label$4
      }
      label$45 : while (1) {
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$0 = $9_1;
       i64toi32_i32$5 = $10$hi;
       i64toi32_i32$4 = $10_1;
       i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
        $33_1 = 0;
       } else {
        i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
        $33_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       }
       $324$hi = i64toi32_i32$5;
       i64toi32_i32$5 = 0;
       i64toi32_i32$3 = $2_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = 255;
       i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
       $327_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
       $327$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $324$hi;
       i64toi32_i32$5 = $33_1;
       i64toi32_i32$3 = $327$hi;
       i64toi32_i32$4 = $327_1;
       i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
       $9_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
       $9$hi = i64toi32_i32$3;
       label$46 : {
        label$47 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
          break label$47
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break label$46;
        }
        $5_1 = $719($0_1 | 0) | 0;
       }
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$0 = $9_1;
       i64toi32_i32$5 = $11$hi;
       i64toi32_i32$4 = $11_1;
       if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
        break label$4
       }
       $2_1 = HEAPU8[($5_1 + 4897 | 0) >> 0] | 0;
       if ($1_1 >>> 0 > $2_1 >>> 0) {
        continue label$45
       }
       break label$45;
      };
     }
     if ($1_1 >>> 0 <= (HEAPU8[($5_1 + 4897 | 0) >> 0] | 0) >>> 0) {
      break label$3
     }
     label$48 : while (1) {
      label$49 : {
       label$50 : {
        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$50
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
        $5_1 = HEAPU8[$5_1 >> 0] | 0;
        break label$49;
       }
       $5_1 = $719($0_1 | 0) | 0;
      }
      if ($1_1 >>> 0 > (HEAPU8[($5_1 + 4897 | 0) >> 0] | 0) >>> 0) {
       continue label$48
      }
      break label$48;
     };
     HEAP32[($680() | 0) >> 2] = 68;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $6_1 = !(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$3 | 0) ? $6_1 : 0;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = i64toi32_i32$0;
     $9_1 = i64toi32_i32$4;
     $9$hi = i64toi32_i32$0;
    }
    label$51 : {
     if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
      break label$51
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    label$52 : {
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$5 = $3_1;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0) {
      break label$52
     }
     label$53 : {
      i64toi32_i32$0 = $3$hi;
      if ($3_1 & 1 | 0) {
       break label$53
      }
      if ($6_1) {
       break label$53
      }
      HEAP32[($680() | 0) >> 2] = 68;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $3_1 = i64toi32_i32$2;
      $3$hi = i64toi32_i32$1;
      break label$1;
     }
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3_1;
     if ($9$hi >>> 0 < i64toi32_i32$5 >>> 0 | (($9$hi | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
      break label$52
     }
     HEAP32[($680() | 0) >> 2] = 68;
     break label$1;
    }
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$4 = $9_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$5 = $3_1;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
    $406$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $406$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    i64toi32_i32$2 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = 0;
   $3_1 = 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   $718($0_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$0 | 0;
 }
 
 function $728($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $5_1 = 0, $8_1 = 0, $4_1 = 0, $7_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = $3_1 ? $3_1 : 19264;
  $3_1 = HEAP32[$5_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($1_1) {
       break label$4
      }
      if ($3_1) {
       break label$3
      }
      $6_1 = 0;
      break label$1;
     }
     $6_1 = -2;
     if (!$2_1) {
      break label$1
     }
     $7_1 = $0_1 ? $0_1 : $4_1 + 12 | 0;
     label$5 : {
      label$6 : {
       if (!$3_1) {
        break label$6
       }
       $0_1 = $2_1;
       break label$5;
      }
      label$7 : {
       $3_1 = HEAPU8[$1_1 >> 0] | 0;
       $0_1 = ($3_1 << 24 | 0) >> 24 | 0;
       if (($0_1 | 0) < (0 | 0)) {
        break label$7
       }
       HEAP32[$7_1 >> 2] = $3_1;
       $6_1 = ($0_1 | 0) != (0 | 0);
       break label$1;
      }
      $3_1 = HEAP32[(HEAP32[(($753() | 0) + 172 | 0) >> 2] | 0) >> 2] | 0;
      $0_1 = HEAP8[$1_1 >> 0] | 0;
      label$8 : {
       if ($3_1) {
        break label$8
       }
       HEAP32[$7_1 >> 2] = $0_1 & 57343 | 0;
       $6_1 = 1;
       break label$1;
      }
      $3_1 = ($0_1 & 255 | 0) + -194 | 0;
      if ($3_1 >>> 0 > 50 >>> 0) {
       break label$3
      }
      $3_1 = HEAP32[(5168 + ($3_1 << 2 | 0) | 0) >> 2] | 0;
      $0_1 = $2_1 + -1 | 0;
      if (!$0_1) {
       break label$2
      }
      $1_1 = $1_1 + 1 | 0;
     }
     $8_1 = HEAPU8[$1_1 >> 0] | 0;
     $9_1 = $8_1 >>> 3 | 0;
     if (($9_1 + -16 | 0 | (($3_1 >> 26 | 0) + $9_1 | 0) | 0) >>> 0 > 7 >>> 0) {
      break label$3
     }
     label$9 : while (1) {
      $0_1 = $0_1 + -1 | 0;
      label$10 : {
       $3_1 = ($8_1 & 255 | 0) + -128 | 0 | ($3_1 << 6 | 0) | 0;
       if (($3_1 | 0) < (0 | 0)) {
        break label$10
       }
       HEAP32[$5_1 >> 2] = 0;
       HEAP32[$7_1 >> 2] = $3_1;
       $6_1 = $2_1 - $0_1 | 0;
       break label$1;
      }
      if (!$0_1) {
       break label$2
      }
      $1_1 = $1_1 + 1 | 0;
      $8_1 = HEAPU8[$1_1 >> 0] | 0;
      if (($8_1 & 192 | 0 | 0) == (128 | 0)) {
       continue label$9
      }
      break label$9;
     };
    }
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[($680() | 0) >> 2] = 25;
    $6_1 = -1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $729($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 1 | 0;
  }
  return !(HEAP32[$0_1 >> 2] | 0) | 0;
 }
 
 function $730($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $7_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $13_1 = 0, $3_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $17$hi = 0, $15_1 = 0, $18$hi = 0, $17_1 = 0, $18_1 = 0, $19$hi = 0, $4_1 = 0, $8_1 = 0, $14_1 = 0, $19_1 = 0, $16_1 = 0, i64toi32_i32$6 = 0, $5_1 = 0, $58_1 = 0, $68$hi = 0, $70$hi = 0, $75_1 = 0, $75$hi = 0, $174_1 = 0, $184_1 = 0, $246$hi = 0, $248$hi = 0, $253_1 = 0, $253$hi = 0, $294_1 = 0, $294$hi = 0, $300_1 = 0, $300$hi = 0, $301$hi = 0, $407_1 = 0, $407$hi = 0, $413_1 = 0, $413$hi = 0, $414$hi = 0, $616_1 = 0, $616$hi = 0, $621_1 = 0, $621$hi = 0, $649$hi = 0, $651$hi = 0, $657_1 = 0, $657$hi = 0;
  $3_1 = global$0 - 304 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $5_1 = $1938($0_1 | 0) | 0;
  }
  label$2 : {
   $6_1 = HEAPU8[$1_1 >> 0] | 0;
   if (!$6_1) {
    break label$2
   }
   i64toi32_i32$0 = 0;
   $17_1 = 0;
   $17$hi = i64toi32_i32$0;
   $4_1 = 0;
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : while (1) {
        label$8 : {
         label$9 : {
          if (!($675($6_1 & 255 | 0 | 0) | 0)) {
           break label$9
          }
          label$10 : while (1) {
           $6_1 = $1_1;
           $1_1 = $1_1 + 1 | 0;
           if ($675(HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
            continue label$10
           }
           break label$10;
          };
          i64toi32_i32$0 = 0;
          $718($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
          label$11 : while (1) {
           label$12 : {
            label$13 : {
             $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($1_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$13
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
             $1_1 = HEAPU8[$1_1 >> 0] | 0;
             break label$12;
            }
            $1_1 = $719($0_1 | 0) | 0;
           }
           if ($675($1_1 | 0) | 0) {
            continue label$11
           }
           break label$11;
          };
          $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          label$14 : {
           if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
            break label$14
           }
           $1_1 = $1_1 + -1 | 0;
           HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
          }
          i64toi32_i32$2 = $0_1;
          i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
          $68$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $17$hi;
          i64toi32_i32$1 = $68$hi;
          i64toi32_i32$2 = i64toi32_i32$0;
          i64toi32_i32$0 = $17$hi;
          i64toi32_i32$3 = $17_1;
          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $70$hi = i64toi32_i32$5;
          i64toi32_i32$2 = $1_1 - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
          i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
          $75_1 = i64toi32_i32$2;
          $75$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $70$hi;
          i64toi32_i32$1 = i64toi32_i32$4;
          i64toi32_i32$2 = $75$hi;
          i64toi32_i32$3 = $75_1;
          i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $17_1 = i64toi32_i32$0;
          $17$hi = i64toi32_i32$4;
          break label$8;
         }
         label$15 : {
          label$16 : {
           label$17 : {
            label$18 : {
             $6_1 = HEAPU8[$1_1 >> 0] | 0;
             if (($6_1 | 0) != (37 | 0)) {
              break label$18
             }
             $7_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
             if (($7_1 | 0) == (42 | 0)) {
              break label$17
             }
             if (($7_1 | 0) != (37 | 0)) {
              break label$16
             }
            }
            i64toi32_i32$4 = 0;
            $718($0_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
            $6_1 = $1_1 + (($6_1 | 0) == (37 | 0)) | 0;
            label$19 : {
             label$20 : {
              $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if ($1_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$20
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
              $1_1 = HEAPU8[$1_1 >> 0] | 0;
              break label$19;
             }
             $1_1 = $719($0_1 | 0) | 0;
            }
            label$21 : {
             if (($1_1 | 0) == (HEAPU8[$6_1 >> 0] | 0 | 0)) {
              break label$21
             }
             label$22 : {
              if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
               break label$22
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
             }
             $8_1 = 0;
             if (($1_1 | 0) >= (0 | 0)) {
              break label$2
             }
             break label$4;
            }
            i64toi32_i32$4 = $17$hi;
            i64toi32_i32$5 = $17_1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = 1;
            i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
            i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
            if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
             i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
            }
            $17_1 = i64toi32_i32$2;
            $17$hi = i64toi32_i32$0;
            break label$8;
           }
           $6_1 = $1_1 + 2 | 0;
           $9_1 = 0;
           break label$15;
          }
          label$23 : {
           if (!($678($7_1 | 0) | 0)) {
            break label$23
           }
           if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
            break label$23
           }
           $6_1 = $1_1 + 3 | 0;
           $9_1 = $731($2_1 | 0, (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) + -48 | 0 | 0) | 0;
           break label$15;
          }
          $6_1 = $1_1 + 1 | 0;
          $9_1 = HEAP32[$2_1 >> 2] | 0;
          $2_1 = $2_1 + 4 | 0;
         }
         $8_1 = 0;
         $1_1 = 0;
         label$24 : {
          if (!($678(HEAPU8[$6_1 >> 0] | 0 | 0) | 0)) {
           break label$24
          }
          label$25 : while (1) {
           $1_1 = (Math_imul($1_1, 10) + (HEAPU8[$6_1 >> 0] | 0) | 0) + -48 | 0;
           $7_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
           $6_1 = $6_1 + 1 | 0;
           if ($678($7_1 | 0) | 0) {
            continue label$25
           }
           break label$25;
          };
         }
         label$26 : {
          label$27 : {
           $10_1 = HEAPU8[$6_1 >> 0] | 0;
           if (($10_1 | 0) == (109 | 0)) {
            break label$27
           }
           $7_1 = $6_1;
           break label$26;
          }
          $7_1 = $6_1 + 1 | 0;
          $11_1 = 0;
          $8_1 = ($9_1 | 0) != (0 | 0);
          $10_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
          $12_1 = 0;
         }
         $6_1 = $7_1 + 1 | 0;
         $13_1 = 3;
         label$28 : {
          label$29 : {
           switch (($10_1 & 255 | 0) + -65 | 0 | 0) {
           case 39:
            $174_1 = $7_1 + 2 | 0;
            $7_1 = (HEAPU8[($7_1 + 1 | 0) >> 0] | 0 | 0) == (104 | 0);
            $6_1 = $7_1 ? $174_1 : $6_1;
            $13_1 = $7_1 ? -2 : -1;
            break label$28;
           case 43:
            $184_1 = $7_1 + 2 | 0;
            $7_1 = (HEAPU8[($7_1 + 1 | 0) >> 0] | 0 | 0) == (108 | 0);
            $6_1 = $7_1 ? $184_1 : $6_1;
            $13_1 = $7_1 ? 3 : 1;
            break label$28;
           case 51:
           case 57:
            $13_1 = 1;
            break label$28;
           case 11:
            $13_1 = 2;
            break label$28;
           case 41:
            break label$28;
           case 0:
           case 2:
           case 4:
           case 5:
           case 6:
           case 18:
           case 23:
           case 26:
           case 32:
           case 34:
           case 35:
           case 36:
           case 37:
           case 38:
           case 40:
           case 45:
           case 46:
           case 47:
           case 50:
           case 52:
           case 55:
            break label$29;
           default:
            break label$4;
           };
          }
          $13_1 = 0;
          $6_1 = $7_1;
         }
         $7_1 = HEAPU8[$6_1 >> 0] | 0;
         $10_1 = ($7_1 & 47 | 0 | 0) == (3 | 0);
         $14_1 = $10_1 ? 1 : $13_1;
         label$34 : {
          $15_1 = $10_1 ? $7_1 | 32 | 0 : $7_1;
          if (($15_1 | 0) == (91 | 0)) {
           break label$34
          }
          label$35 : {
           label$36 : {
            if (($15_1 | 0) == (110 | 0)) {
             break label$36
            }
            if (($15_1 | 0) != (99 | 0)) {
             break label$35
            }
            $1_1 = ($1_1 | 0) > (1 | 0) ? $1_1 : 1;
            break label$34;
           }
           i64toi32_i32$0 = $17$hi;
           $732($9_1 | 0, $14_1 | 0, $17_1 | 0, i64toi32_i32$0 | 0);
           break label$8;
          }
          i64toi32_i32$0 = 0;
          $718($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
          label$37 : while (1) {
           label$38 : {
            label$39 : {
             $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($7_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$39
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
             $7_1 = HEAPU8[$7_1 >> 0] | 0;
             break label$38;
            }
            $7_1 = $719($0_1 | 0) | 0;
           }
           if ($675($7_1 | 0) | 0) {
            continue label$37
           }
           break label$37;
          };
          $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          label$40 : {
           if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
            break label$40
           }
           $7_1 = $7_1 + -1 | 0;
           HEAP32[($0_1 + 4 | 0) >> 2] = $7_1;
          }
          i64toi32_i32$4 = $0_1;
          i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
          i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
          $246$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $17$hi;
          i64toi32_i32$5 = $246$hi;
          i64toi32_i32$4 = i64toi32_i32$0;
          i64toi32_i32$0 = $17$hi;
          i64toi32_i32$3 = $17_1;
          i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
          i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
          }
          $248$hi = i64toi32_i32$2;
          i64toi32_i32$4 = $7_1 - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
          i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
          $253_1 = i64toi32_i32$4;
          $253$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $248$hi;
          i64toi32_i32$5 = i64toi32_i32$1;
          i64toi32_i32$4 = $253$hi;
          i64toi32_i32$3 = $253_1;
          i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
          i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
          }
          $17_1 = i64toi32_i32$0;
          $17$hi = i64toi32_i32$1;
         }
         i64toi32_i32$5 = $1_1;
         i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
         $18_1 = i64toi32_i32$5;
         $18$hi = i64toi32_i32$1;
         $718($0_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0);
         label$41 : {
          label$42 : {
           $13_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           $7_1 = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
           if ($13_1 >>> 0 >= $7_1 >>> 0) {
            break label$42
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $13_1 + 1 | 0;
           break label$41;
          }
          if (($719($0_1 | 0) | 0 | 0) < (0 | 0)) {
           break label$4
          }
          $7_1 = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
         }
         label$43 : {
          if (!$7_1) {
           break label$43
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
         }
         $7_1 = 16;
         label$44 : {
          label$45 : {
           label$46 : {
            label$47 : {
             label$48 : {
              label$49 : {
               label$50 : {
                switch ($15_1 + -88 | 0 | 0) {
                default:
                 $1_1 = $15_1 + -65 | 0;
                 if ($1_1 >>> 0 > 6 >>> 0) {
                  break label$44
                 }
                 if (!((1 << $1_1 | 0) & 113 | 0)) {
                  break label$44
                 }
                case 9:
                case 13:
                case 14:
                case 15:
                 $723($3_1 | 0, $0_1 | 0, $14_1 | 0, 0 | 0);
                 i64toi32_i32$2 = $0_1;
                 i64toi32_i32$1 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
                 i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
                 $294_1 = i64toi32_i32$1;
                 $294$hi = i64toi32_i32$5;
                 i64toi32_i32$1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
                 i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
                 $300_1 = i64toi32_i32$1;
                 $300$hi = i64toi32_i32$5;
                 i64toi32_i32$5 = 0;
                 i64toi32_i32$2 = 0;
                 i64toi32_i32$1 = $300$hi;
                 i64toi32_i32$3 = $300_1;
                 i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
                 i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
                 i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
                 i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
                 $301$hi = i64toi32_i32$0;
                 i64toi32_i32$0 = $294$hi;
                 i64toi32_i32$5 = $294_1;
                 i64toi32_i32$2 = $301$hi;
                 i64toi32_i32$3 = i64toi32_i32$4;
                 if ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0) {
                  break label$3
                 }
                 if (!$9_1) {
                  break label$44
                 }
                 i64toi32_i32$3 = $3_1;
                 i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
                 i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
                 $18_1 = i64toi32_i32$5;
                 $18$hi = i64toi32_i32$0;
                 i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                 i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                 $19_1 = i64toi32_i32$0;
                 $19$hi = i64toi32_i32$5;
                 switch ($14_1 | 0) {
                 case 2:
                  break label$46;
                 case 1:
                  break label$47;
                 case 0:
                  break label$48;
                 default:
                  break label$44;
                 };
                case 3:
                case 11:
                case 27:
                 label$56 : {
                  if (($15_1 & 239 | 0 | 0) != (99 | 0)) {
                   break label$56
                  }
                  $1933($3_1 + 32 | 0 | 0, -1 | 0, 257 | 0) | 0;
                  HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                  if (($15_1 | 0) != (115 | 0)) {
                   break label$45
                  }
                  HEAP8[($3_1 + 65 | 0) >> 0] = 0;
                  HEAP8[($3_1 + 46 | 0) >> 0] = 0;
                  $58_1 = 0;
                  HEAP16[($3_1 + 42 | 0) >> 1] = $58_1;
                  HEAP16[($3_1 + 44 | 0) >> 1] = $58_1 >>> 16 | 0;
                  break label$45;
                 }
                 $13_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
                 $7_1 = ($13_1 | 0) == (94 | 0);
                 $1933($3_1 + 32 | 0 | 0, $7_1 | 0, 257 | 0) | 0;
                 HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                 $10_1 = $7_1 ? $6_1 + 2 | 0 : $6_1 + 1 | 0;
                 label$57 : {
                  label$58 : {
                   label$59 : {
                    label$60 : {
                     $6_1 = HEAPU8[($6_1 + ($7_1 ? 2 : 1) | 0) >> 0] | 0;
                     if (($6_1 | 0) == (45 | 0)) {
                      break label$60
                     }
                     if (($6_1 | 0) == (93 | 0)) {
                      break label$59
                     }
                     $13_1 = ($13_1 | 0) != (94 | 0);
                     $6_1 = $10_1;
                     break label$57;
                    }
                    $13_1 = ($13_1 | 0) != (94 | 0);
                    HEAP8[($3_1 + 78 | 0) >> 0] = $13_1;
                    break label$58;
                   }
                   $13_1 = ($13_1 | 0) != (94 | 0);
                   HEAP8[($3_1 + 126 | 0) >> 0] = $13_1;
                  }
                  $6_1 = $10_1 + 1 | 0;
                 }
                 label$61 : while (1) {
                  label$62 : {
                   label$63 : {
                    $7_1 = HEAPU8[$6_1 >> 0] | 0;
                    if (($7_1 | 0) == (45 | 0)) {
                     break label$63
                    }
                    if (!$7_1) {
                     break label$4
                    }
                    if (($7_1 | 0) != (93 | 0)) {
                     break label$62
                    }
                    break label$45;
                   }
                   $7_1 = 45;
                   $16_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
                   if (!$16_1) {
                    break label$62
                   }
                   if (($16_1 | 0) == (93 | 0)) {
                    break label$62
                   }
                   $10_1 = $6_1 + 1 | 0;
                   label$64 : {
                    label$65 : {
                     $6_1 = HEAPU8[($6_1 + -1 | 0) >> 0] | 0;
                     if ($6_1 >>> 0 < $16_1 >>> 0) {
                      break label$65
                     }
                     $7_1 = $16_1;
                     break label$64;
                    }
                    label$66 : while (1) {
                     $6_1 = $6_1 + 1 | 0;
                     HEAP8[(($3_1 + 32 | 0) + $6_1 | 0) >> 0] = $13_1;
                     $7_1 = HEAPU8[$10_1 >> 0] | 0;
                     if ($6_1 >>> 0 < $7_1 >>> 0) {
                      continue label$66
                     }
                     break label$66;
                    };
                   }
                   $6_1 = $10_1;
                  }
                  HEAP8[(($7_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] = $13_1;
                  $6_1 = $6_1 + 1 | 0;
                  continue label$61;
                 };
                case 23:
                 $7_1 = 8;
                 break label$49;
                case 12:
                case 29:
                 $7_1 = 10;
                 break label$49;
                case 1:
                case 2:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 10:
                case 16:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 25:
                case 26:
                case 28:
                case 30:
                case 31:
                 break label$44;
                case 0:
                case 24:
                case 32:
                 break label$49;
                case 17:
                 break label$50;
                };
               }
               $7_1 = 0;
              }
              i64toi32_i32$5 = -1;
              i64toi32_i32$5 = $727($0_1 | 0, $7_1 | 0, 0 | 0, -1 | 0, i64toi32_i32$5 | 0) | 0;
              i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
              $18_1 = i64toi32_i32$5;
              $18$hi = i64toi32_i32$0;
              i64toi32_i32$3 = $0_1;
              i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
              i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
              $407_1 = i64toi32_i32$0;
              $407$hi = i64toi32_i32$5;
              i64toi32_i32$0 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
              i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
              $413_1 = i64toi32_i32$0;
              $413$hi = i64toi32_i32$5;
              i64toi32_i32$5 = 0;
              i64toi32_i32$3 = 0;
              i64toi32_i32$0 = $413$hi;
              i64toi32_i32$2 = $413_1;
              i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
              i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
              i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
              i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
              $414$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $407$hi;
              i64toi32_i32$5 = $407_1;
              i64toi32_i32$3 = $414$hi;
              i64toi32_i32$2 = i64toi32_i32$1;
              if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0) {
               break label$3
              }
              label$67 : {
               if (!$9_1) {
                break label$67
               }
               if (($15_1 | 0) != (112 | 0)) {
                break label$67
               }
               i64toi32_i32$5 = $18$hi;
               HEAP32[$9_1 >> 2] = $18_1;
               break label$44;
              }
              i64toi32_i32$5 = $18$hi;
              $732($9_1 | 0, $14_1 | 0, $18_1 | 0, i64toi32_i32$5 | 0);
              break label$44;
             }
             i64toi32_i32$5 = $19$hi;
             i64toi32_i32$5 = $18$hi;
             i64toi32_i32$5 = $19$hi;
             i64toi32_i32$4 = $18$hi;
             HEAPF32[$9_1 >> 2] = Math_fround($763($19_1 | 0, i64toi32_i32$5 | 0, $18_1 | 0, i64toi32_i32$4 | 0));
             break label$44;
            }
            i64toi32_i32$4 = $19$hi;
            i64toi32_i32$4 = $18$hi;
            i64toi32_i32$4 = $19$hi;
            i64toi32_i32$5 = $18$hi;
            HEAPF64[$9_1 >> 3] = +$769($19_1 | 0, i64toi32_i32$4 | 0, $18_1 | 0, i64toi32_i32$5 | 0);
            break label$44;
           }
           i64toi32_i32$5 = $19$hi;
           i64toi32_i32$4 = $9_1;
           HEAP32[i64toi32_i32$4 >> 2] = $19_1;
           HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$5;
           i64toi32_i32$5 = $18$hi;
           HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $18_1;
           HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
           break label$44;
          }
          $10_1 = ($15_1 | 0) == (99 | 0);
          $13_1 = $10_1 ? $1_1 + 1 | 0 : 31;
          label$68 : {
           label$69 : {
            $15_1 = ($14_1 | 0) != (1 | 0);
            if ($15_1) {
             break label$69
            }
            $7_1 = $9_1;
            label$70 : {
             if (!$8_1) {
              break label$70
             }
             $7_1 = $1923($13_1 << 2 | 0 | 0) | 0;
             if (!$7_1) {
              break label$5
             }
            }
            i64toi32_i32$4 = $3_1;
            i64toi32_i32$5 = 0;
            HEAP32[(i64toi32_i32$4 + 296 | 0) >> 2] = 0;
            HEAP32[(i64toi32_i32$4 + 300 | 0) >> 2] = i64toi32_i32$5;
            $1_1 = 0;
            label$71 : while (1) {
             $12_1 = $7_1;
             label$72 : {
              label$73 : while (1) {
               label$74 : {
                label$75 : {
                 $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                 if ($7_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                  break label$75
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
                 $7_1 = HEAPU8[$7_1 >> 0] | 0;
                 break label$74;
                }
                $7_1 = $719($0_1 | 0) | 0;
               }
               if (!(HEAPU8[(($7_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0)) {
                break label$72
               }
               HEAP8[($3_1 + 27 | 0) >> 0] = $7_1;
               $7_1 = $728($3_1 + 28 | 0 | 0, $3_1 + 27 | 0 | 0, 1 | 0, $3_1 + 296 | 0 | 0) | 0;
               if (($7_1 | 0) == (-2 | 0)) {
                continue label$73
               }
               if (($7_1 | 0) == (-1 | 0)) {
                break label$6
               }
               label$76 : {
                if (!$12_1) {
                 break label$76
                }
                HEAP32[($12_1 + ($1_1 << 2 | 0) | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
                $1_1 = $1_1 + 1 | 0;
               }
               if (!$8_1) {
                continue label$73
               }
               if (($1_1 | 0) != ($13_1 | 0)) {
                continue label$73
               }
               break label$73;
              };
              $13_1 = $13_1 << 1 | 0 | 1 | 0;
              $7_1 = $1925($12_1 | 0, $13_1 << 2 | 0 | 0) | 0;
              if ($7_1) {
               continue label$71
              }
              break label$6;
             }
             break label$71;
            };
            if (!($729($3_1 + 296 | 0 | 0) | 0)) {
             break label$6
            }
            $11_1 = 0;
            break label$68;
           }
           label$77 : {
            if (!$8_1) {
             break label$77
            }
            $1_1 = 0;
            $7_1 = $1923($13_1 | 0) | 0;
            if (!$7_1) {
             break label$5
            }
            label$78 : while (1) {
             $11_1 = $7_1;
             label$79 : while (1) {
              label$80 : {
               label$81 : {
                $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                if ($7_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                 break label$81
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
                $7_1 = HEAPU8[$7_1 >> 0] | 0;
                break label$80;
               }
               $7_1 = $719($0_1 | 0) | 0;
              }
              label$82 : {
               if (HEAPU8[(($7_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                break label$82
               }
               $12_1 = 0;
               break label$68;
              }
              HEAP8[($11_1 + $1_1 | 0) >> 0] = $7_1;
              $1_1 = $1_1 + 1 | 0;
              if (($1_1 | 0) != ($13_1 | 0)) {
               continue label$79
              }
              break label$79;
             };
             $12_1 = 0;
             $13_1 = $13_1 << 1 | 0 | 1 | 0;
             $7_1 = $1925($11_1 | 0, $13_1 | 0) | 0;
             if (!$7_1) {
              break label$4
             }
             continue label$78;
            };
           }
           $1_1 = 0;
           label$83 : {
            if (!$9_1) {
             break label$83
            }
            label$84 : while (1) {
             label$85 : {
              label$86 : {
               $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
               if ($7_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                break label$86
               }
               HEAP32[($0_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
               $7_1 = HEAPU8[$7_1 >> 0] | 0;
               break label$85;
              }
              $7_1 = $719($0_1 | 0) | 0;
             }
             label$87 : {
              if (HEAPU8[(($7_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
               break label$87
              }
              $12_1 = 0;
              $11_1 = $9_1;
              break label$68;
             }
             HEAP8[($9_1 + $1_1 | 0) >> 0] = $7_1;
             $1_1 = $1_1 + 1 | 0;
             continue label$84;
            };
           }
           label$88 : while (1) {
            label$89 : {
             label$90 : {
              $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if ($1_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$90
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
              $1_1 = HEAPU8[$1_1 >> 0] | 0;
              break label$89;
             }
             $1_1 = $719($0_1 | 0) | 0;
            }
            if (HEAPU8[(($1_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
             continue label$88
            }
            break label$88;
           };
           $11_1 = 0;
           $12_1 = 0;
           $1_1 = 0;
          }
          $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          label$91 : {
           if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
            break label$91
           }
           $7_1 = $7_1 + -1 | 0;
           HEAP32[($0_1 + 4 | 0) >> 2] = $7_1;
          }
          i64toi32_i32$2 = $0_1;
          i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
          i64toi32_i32$4 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
          $616_1 = i64toi32_i32$5;
          $616$hi = i64toi32_i32$4;
          i64toi32_i32$5 = $7_1 - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
          i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
          $621_1 = i64toi32_i32$5;
          $621$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $616$hi;
          i64toi32_i32$2 = $616_1;
          i64toi32_i32$5 = $621$hi;
          i64toi32_i32$3 = $621_1;
          i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
          }
          $19_1 = i64toi32_i32$0;
          $19$hi = i64toi32_i32$1;
          if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
           break label$3
          }
          i64toi32_i32$1 = $19$hi;
          i64toi32_i32$1 = $18$hi;
          i64toi32_i32$1 = $19$hi;
          i64toi32_i32$4 = $19_1;
          i64toi32_i32$2 = $18$hi;
          i64toi32_i32$3 = $18_1;
          if ($10_1 & ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) | 0) {
           break label$3
          }
          label$92 : {
           if (!$8_1) {
            break label$92
           }
           label$93 : {
            if ($15_1) {
             break label$93
            }
            HEAP32[$9_1 >> 2] = $12_1;
            break label$92;
           }
           HEAP32[$9_1 >> 2] = $11_1;
          }
          if ($10_1) {
           break label$44
          }
          label$94 : {
           if (!$12_1) {
            break label$94
           }
           HEAP32[($12_1 + ($1_1 << 2 | 0) | 0) >> 2] = 0;
          }
          label$95 : {
           if ($11_1) {
            break label$95
           }
           $11_1 = 0;
           break label$44;
          }
          HEAP8[($11_1 + $1_1 | 0) >> 0] = 0;
         }
         i64toi32_i32$3 = $0_1;
         i64toi32_i32$4 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
         $649$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $17$hi;
         i64toi32_i32$1 = $649$hi;
         i64toi32_i32$3 = i64toi32_i32$4;
         i64toi32_i32$4 = $17$hi;
         i64toi32_i32$2 = $17_1;
         i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
         i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
         if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
         }
         $651$hi = i64toi32_i32$0;
         i64toi32_i32$3 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$3 >> 31 | 0;
         $657_1 = i64toi32_i32$3;
         $657$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $651$hi;
         i64toi32_i32$1 = i64toi32_i32$5;
         i64toi32_i32$3 = $657$hi;
         i64toi32_i32$2 = $657_1;
         i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
         i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
         }
         $17_1 = i64toi32_i32$4;
         $17$hi = i64toi32_i32$5;
         $4_1 = $4_1 + (($9_1 | 0) != (0 | 0)) | 0;
        }
        $1_1 = $6_1 + 1 | 0;
        $6_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
        if ($6_1) {
         continue label$7
        }
        break label$2;
       };
      }
      $11_1 = 0;
      break label$4;
     }
     $11_1 = 0;
     $12_1 = 0;
    }
    $4_1 = $4_1 ? $4_1 : -1;
   }
   if (!$8_1) {
    break label$2
   }
   $1924($11_1 | 0);
   $1924($12_1 | 0);
  }
  label$96 : {
   if (!$5_1) {
    break label$96
   }
   $1939($0_1 | 0);
  }
  global$0 = $3_1 + 304 | 0;
  return $4_1 | 0;
 }
 
 function $731($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1_1 >>> 0 > 1 >>> 0 ? (($1_1 << 2 | 0) + $0_1 | 0) + -4 | 0 : $0_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = $0_1 + 4 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $732($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + 2 | 0 | 0) {
    case 0:
     i64toi32_i32$0 = $2$hi;
     HEAP8[$0_1 >> 0] = $2_1;
     return;
    case 1:
     i64toi32_i32$0 = $2$hi;
     HEAP16[$0_1 >> 1] = $2_1;
     return;
    case 2:
    case 3:
     i64toi32_i32$0 = $2$hi;
     HEAP32[$0_1 >> 2] = $2_1;
     return;
    case 5:
     break label$2;
    default:
     break label$1;
    };
   }
   i64toi32_i32$0 = $2$hi;
   HEAP32[$0_1 >> 2] = $2_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
 }
 
 function $733($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  $4_1 = $2_1 + 256 | 0;
  $5_1 = $697($3_1 | 0, 0 | 0, $4_1 | 0) | 0;
  $4_1 = $5_1 ? $5_1 - $3_1 | 0 : $4_1;
  $2_1 = $4_1 >>> 0 < $2_1 >>> 0 ? $4_1 : $2_1;
  $1932($1_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
  $4_1 = $3_1 + $4_1 | 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + $2_1 | 0;
  return $2_1 | 0;
 }
 
 function $734($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  $3_1 = $1933($3_1 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($3_1 + 76 | 0) >> 2] = -1;
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = 55;
  HEAP32[($3_1 + 84 | 0) >> 2] = $0_1;
  $0_1 = $730($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 144 | 0;
  return $0_1 | 0;
 }
 
 function $735($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $733($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $736($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $734($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $737() {
  $750(19268 | 0);
  return 19276 | 0;
 }
 
 function $738() {
  $751(19268 | 0);
 }
 
 function $739($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
  $1_1 = $5_1 - $4_1 | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
  $6_1 = $1_1 + $2_1 | 0;
  $7_1 = 2;
  $1_1 = $3_1 + 16 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($752(fimport$14(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
       break label$4
      }
      label$5 : while (1) {
       $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($4_1 | 0)) {
        break label$3
       }
       if (($4_1 | 0) <= (-1 | 0)) {
        break label$2
       }
       $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       $5_1 = $4_1 >>> 0 > $8_1 >>> 0;
       $9_1 = $1_1 + ($5_1 << 3 | 0) | 0;
       $8_1 = $4_1 - ($5_1 ? $8_1 : 0) | 0;
       HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) + $8_1 | 0;
       $9_1 = $1_1 + ($5_1 ? 12 : 4) | 0;
       HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) - $8_1 | 0;
       $6_1 = $6_1 - $4_1 | 0;
       $1_1 = $5_1 ? $1_1 + 8 | 0 : $1_1;
       $7_1 = $7_1 - $5_1 | 0;
       if (!($752(fimport$14(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, $7_1 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     if (($6_1 | 0) != (-1 | 0)) {
      break label$2
     }
    }
    $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
    $4_1 = $2_1;
    break label$1;
   }
   $4_1 = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
   if (($7_1 | 0) == (2 | 0)) {
    break label$1
   }
   $4_1 = $2_1 - (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $740($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$0 = $741($0_1 | 0, $1_1 | 0, $2_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $741($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  $4_1 = global$0 - 144 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 76 | 0) >> 2] = -1;
  HEAP32[($4_1 + 8 | 0) >> 2] = ($0_1 | 0) < (0 | 0) ? -1 : $0_1 + 2147483647 | 0;
  i64toi32_i32$0 = 0;
  $718($4_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $727($4_1 | 0, $2_1 | 0, 1 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $3_1 = i64toi32_i32$0;
  $3$hi = i64toi32_i32$1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $0_1 + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + (HEAP32[($4_1 + 120 | 0) >> 2] | 0) | 0) - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0) | 0;
  }
  global$0 = $4_1 + 144 | 0;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $742($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$0 = $741($0_1 | 0, $1_1 | 0, $2_1 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $743($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11_1 = 0, $11$hi = 0, $13_1 = 0, $13$hi = 0, $3_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $744($2_1 | 0, $0_1 | 0, $1_1 | 0, 0 | 0);
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $13$hi;
  $3_1 = Math_fround($763($11_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0));
  global$0 = $2_1 + 16 | 0;
  return Math_fround($3_1);
 }
 
 function $744($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $36_1 = 0, $36$hi = 0, $42_1 = 0, $42$hi = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $1933($4_1 + 16 | 0 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($4_1 + 92 | 0) >> 2] = -1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = -1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  i64toi32_i32$0 = 0;
  $718($4_1 + 16 | 0 | 0, 0 | 0, i64toi32_i32$0 | 0);
  $723($4_1 | 0, $4_1 + 16 | 0 | 0, $3_1 | 0, 1 | 0);
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$1;
  $6$hi = i64toi32_i32$0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $32_1 = $2_1;
   $33_1 = $1_1;
   $34_1 = $1_1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$0 = HEAP32[($4_1 + 136 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4_1 + 140 | 0) >> 2] | 0;
   $36_1 = i64toi32_i32$0;
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$0 = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) - (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $42_1 = i64toi32_i32$0;
   $42$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $36$hi;
   i64toi32_i32$2 = $36_1;
   i64toi32_i32$0 = $42$hi;
   i64toi32_i32$3 = $42_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   HEAP32[$32_1 >> 2] = !(i64toi32_i32$4 | i64toi32_i32$5 | 0) ? $33_1 : $34_1 + i64toi32_i32$4 | 0;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $4_1 + 160 | 0;
 }
 
 function $745($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11_1 = 0, $11$hi = 0, $13_1 = 0, $13$hi = 0, $3_1 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $744($2_1 | 0, $0_1 | 0, $1_1 | 0, 1 | 0);
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $13$hi;
  $3_1 = +$769($11_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0);
  global$0 = $2_1 + 16 | 0;
  return +$3_1;
 }
 
 function $746($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $12_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $744($3_1 | 0, $1_1 | 0, $2_1 | 0, 2 | 0);
  i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $15_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $747($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return Math_fround(Math_fround($743($0_1 | 0, $1_1 | 0)));
 }
 
 function $748($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return +(+$745($0_1 | 0, $1_1 | 0));
 }
 
 function $749($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $13_1 = 0, $16_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $746($4_1 | 0, $1_1 | 0, $2_1 | 0);
  i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $13_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $750($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $751($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $752($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  HEAP32[($680() | 0) >> 2] = $0_1;
  return -1 | 0;
 }
 
 function $753() {
  return 17632 | 0;
 }
 
 function $754($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = 1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    $4_1 = -1;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   $4_1 = -1;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $755($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = -1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $756($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $53_1 = 0, $54_1 = 0, $6_1 = 0, $9_1 = 0, $9$hi = 0, $12_1 = 0, $12$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $16$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $5_1 = 0, $5$hi = 0, $30$hi = 0, $33_1 = 0, $33$hi = 0, $36$hi = 0, $37_1 = 0, $37$hi = 0, $39_1 = 0, $39$hi = 0, $42_1 = 0, $42$hi = 0, $45$hi = 0, $47_1 = 0, $49$hi = 0, $51_1 = 0, $51$hi = 0, $52_1 = 0;
  $6_1 = $0_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12_1 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13_1 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4_1 = $46_1;
  $4$hi = i64toi32_i32$2;
  $16_1 = $4_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2_1 = $48_1;
  $2$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $2$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20_1 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13_1;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21_1 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $2$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $2_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33_1 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49_1;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33_1;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3_1 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21_1;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50_1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37_1 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42_1 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39_1;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42_1;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $3_1 = i64toi32_i32$4;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37_1;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53_1;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47_1 = $0_1;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54_1;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51_1;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47_1;
  HEAP32[i64toi32_i32$2 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function $757($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2_1 = $18_1;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1_1 = $22_1;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $758() {
  return 0 | 0;
 }
 
 function $759() {
  return 0 | 0;
 }
 
 function $760($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $6_1 = 0, $7_1 = 0, $5_1 = 0, $9$hi = 0, $9_1 = 0, $10$hi = 0, $11$hi = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$6 = 0, $12$hi = 0, $8_1 = 0, $135_1 = 0, $136_1 = 0, $137_1 = 0, $138_1 = 0, $139_1 = 0, $140_1 = 0, $141_1 = 0, $142_1 = 0, $143_1 = 0, $12_1 = 0, $144_1 = 0, $145_1 = 0, $146_1 = 0, $147_1 = 0, $148_1 = 0, $149_1 = 0, $150_1 = 0, $154_1 = 0, $155_1 = 0, $156_1 = 0, $157_1 = 0, $158_1 = 0, $21_1 = 0, $27_1 = 0, $28$hi = 0, $32_1 = 0, $39_1 = 0, $43_1 = 0, $44$hi = 0, $48_1 = 0, $53_1 = 0, $55_1 = 0, $63_1 = 0, $65_1 = 0, $73_1 = 0, $73$hi = 0, $79_1 = 0, $79$hi = 0, $83_1 = 0, $83$hi = 0, $93_1 = 0, $93$hi = 0, $121_1 = 0, $124_1 = 0, $151_1 = 0, $152_1 = 0, $152$hi = 0, $153_1 = 0, $153$hi = 0, $160$hi = 0, $163$hi = 0, $183_1 = 0, $184_1 = 0, $184$hi = 0, $185_1 = 0, $185$hi = 0, $192$hi = 0, $195$hi = 0, $208_1 = 0, $208$hi = 0, $210$hi = 0, $214_1 = 0, $214$hi = 0, $216$hi = 0, $242_1 = 0, $242$hi = 0, $244_1 = 0, $244$hi = 0, $248_1 = 0, $248$hi = 0, $250_1 = 0, $251$hi = 0, $269$hi = 0, $272_1 = 0, $273$hi = 0, $282_1 = 0, $283_1 = 0, $283$hi = 0, $284_1 = 0, $284$hi = 0, $291$hi = 0, $294$hi = 0, $309_1 = 0, $309$hi = 0, $315_1 = 0, $316$hi = 0, $322_1 = 0, $322$hi = 0, $324$hi = 0, $325_1 = 0, $325$hi = 0, $327_1 = 0, $327$hi = 0, $354_1 = 0, $354$hi = 0, $356_1 = 0, $356$hi = 0, $360_1 = 0, $360$hi = 0, $362_1 = 0, $363$hi = 0, $369_1 = 0, $369$hi = 0, $371$hi = 0, $375$hi = 0, $377_1 = 0, $377$hi = 0, $380$hi = 0, $386_1 = 0, $386$hi = 0, $390$hi = 0, $394_1 = 0, $395$hi = 0, $400_1 = 0, $400$hi = 0, $408_1 = 0, $409$hi = 0, $411_1 = 0, $411$hi = 0, $417_1 = 0, $418$hi = 0, $422_1 = 0, $423$hi = 0, $426_1 = 0, $426$hi = 0, $432_1 = 0, $433$hi = 0, $437_1 = 0, $438$hi = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $9_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $9$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$4;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     $21_1 = (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$5 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $11_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     $27_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $28$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$5 = $28$hi;
     i64toi32_i32$3 = $27_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $10_1 = i64toi32_i32$5;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$1 = 2147418111;
     i64toi32_i32$3 = -1;
     $32_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$1 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $21_1 : $32_1) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$0;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = -1;
     $39_1 = (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $43_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $44$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$3 = $44$hi;
     i64toi32_i32$5 = $43_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $10_1 = i64toi32_i32$3;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$5 = -1;
     $48_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$4 = 2147418111;
     i64toi32_i32$2 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0 ? $39_1 : $48_1) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$5 = $1$hi;
     $53_1 = !($1_1 | i64toi32_i32$5 | 0);
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     $55_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$5 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $53_1 : $55_1) {
      break label$4
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$2;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$2 = $3$hi;
     $63_1 = !($3_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$4 = $9_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$5 = 0;
     $65_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $63_1 : $65_1) {
      break label$5
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$4 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $4$hi = i64toi32_i32$4;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
     $73_1 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     $73$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = $73$hi;
     i64toi32_i32$2 = $73_1;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$6
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
     $79_1 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
     $79$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
     i64toi32_i32$0 = -2147483648;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $83_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
     $83$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $79$hi;
     i64toi32_i32$2 = $79_1;
     i64toi32_i32$5 = $83$hi;
     i64toi32_i32$4 = $83_1;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $6_1 = !(i64toi32_i32$2 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$5 = 2147450880;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $2_1;
     i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$2;
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1 ? 0 : $1_1;
     i64toi32_i32$1 = i64toi32_i32$1 ? i64toi32_i32$0 : i64toi32_i32$4;
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$2 = $9_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
    $93_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $93$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = $93$hi;
    i64toi32_i32$0 = $93_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$1
    }
    label$7 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break label$7
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $3_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
     $3$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $4_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $4$hi = i64toi32_i32$5;
     break label$1;
    }
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$0 = $9_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    i64toi32_i32$2 = $1$hi;
    $3_1 = $1_1;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    $4_1 = $2_1;
    $4$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   $121_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$5 = $11$hi;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$0 = $9_1;
   i64toi32_i32$2 = $11$hi;
   i64toi32_i32$1 = $11_1;
   $124_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = $9_1;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = $11_1;
   $7_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) | 0 ? $121_1 : $124_1;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $1_1;
   i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$0;
   $9_1 = i64toi32_i32$5;
   $9$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$4 ? $4_1 : $2_1;
   i64toi32_i32$4 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$5;
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $10_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $10$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = i64toi32_i32$5 ? $2_1 : $4_1;
   i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$1 : i64toi32_i32$0;
   $2_1 = i64toi32_i32$2;
   $2$hi = i64toi32_i32$4;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $135_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $135_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
   }
   $8_1 = $135_1 & 32767 | 0;
   label$8 : {
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$4 = $11_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $136_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $136_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
    }
    $6_1 = $136_1 & 32767 | 0;
    if ($6_1) {
     break label$8
    }
    $151_1 = $5_1 + 96 | 0;
    i64toi32_i32$5 = $9$hi;
    $152_1 = $9_1;
    $152$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    $153_1 = $10_1;
    $153$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $10$hi;
    $6_1 = !($10_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$1 = i64toi32_i32$0 ? $9_1 : $10_1;
    i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$2);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $137_1 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $137_1 = i64toi32_i32$5
    }
    $160$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $163$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $160$hi;
    i64toi32_i32$1 = $137_1;
    i64toi32_i32$2 = $163$hi;
    i64toi32_i32$5 = $6_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $6_1 = i64toi32_i32$4;
    i64toi32_i32$3 = $152$hi;
    i64toi32_i32$1 = $153$hi;
    $757($151_1 | 0, $152_1 | 0, i64toi32_i32$3 | 0, $153_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $6_1 = 16 - i64toi32_i32$4 | 0;
    i64toi32_i32$0 = $5_1 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$1;
    $10$hi = i64toi32_i32$3;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$3;
    $9$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$5 = i64toi32_i32$2 ? $1_1 : $3_1;
   i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$1 : i64toi32_i32$3;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $4$hi = i64toi32_i32$5;
   label$9 : {
    if ($8_1) {
     break label$9
    }
    $183_1 = $5_1 + 80 | 0;
    i64toi32_i32$5 = $3$hi;
    $184_1 = $3_1;
    $184$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    $185_1 = $4_1;
    $185$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $4$hi;
    $7_1 = !($4_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = i64toi32_i32$3 ? $3_1 : $4_1;
    i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$2;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $138_1 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $138_1 = i64toi32_i32$5
    }
    $192$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $195$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $192$hi;
    i64toi32_i32$1 = $138_1;
    i64toi32_i32$0 = $195$hi;
    i64toi32_i32$5 = $7_1 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $7_1 = i64toi32_i32$2;
    i64toi32_i32$4 = $184$hi;
    i64toi32_i32$1 = $185$hi;
    $757($183_1 | 0, $184_1 | 0, i64toi32_i32$4 | 0, $185_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $8_1 = 16 - i64toi32_i32$2 | 0;
    i64toi32_i32$3 = $5_1 + 88 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$4;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $139_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $139_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   $208_1 = $139_1;
   $208$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $140_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $140_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
   }
   $210$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $208$hi;
   i64toi32_i32$4 = $208_1;
   i64toi32_i32$1 = $210$hi;
   i64toi32_i32$5 = $140_1;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   i64toi32_i32$4 = 524288;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $4_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$1 = $10_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $141_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $141_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $214_1 = $141_1;
   $214$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $9$hi;
   i64toi32_i32$4 = $9_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $142_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $142_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $216$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $214$hi;
   i64toi32_i32$3 = $214_1;
   i64toi32_i32$4 = $216$hi;
   i64toi32_i32$5 = $142_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $1_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $143_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $143_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $3_1 = $143_1;
   $3$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$4 = $11_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $10_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $10$hi = i64toi32_i32$1;
   label$10 : {
    $7_1 = $6_1 - $8_1 | 0;
    if (!$7_1) {
     break label$10
    }
    label$11 : {
     if ($7_1 >>> 0 <= 127 >>> 0) {
      break label$11
     }
     i64toi32_i32$1 = 0;
     $4_1 = 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $3_1 = 1;
     $3$hi = i64toi32_i32$1;
     break label$10;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$4 = $4$hi;
    $757($5_1 + 64 | 0 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 128 - $7_1 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    $762($5_1 + 48 | 0 | 0, $3_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 48 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] | 0;
    $242_1 = i64toi32_i32$1;
    $242$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $244_1 = i64toi32_i32$4;
    $244$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 64 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $248_1 = i64toi32_i32$1;
    $248$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $244$hi;
    i64toi32_i32$3 = $244_1;
    i64toi32_i32$1 = $248$hi;
    i64toi32_i32$5 = $248_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $250_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $251$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $242$hi;
    i64toi32_i32$5 = $242_1;
    i64toi32_i32$1 = $251$hi;
    i64toi32_i32$3 = $250_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $3_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$4 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$1 = 524288;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $12_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$5 = $9_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 3;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    $144_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $144_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
   }
   $2_1 = $144_1;
   $2$hi = i64toi32_i32$4;
   label$12 : {
    label$13 : {
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
      $145_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $146_1 = 0
       } else {
        $146_1 = 1
       }
       $147_1 = $146_1;
      } else {
       $147_1 = 0
      }
      $145_1 = $147_1;
     }
     if ($145_1) {
      break label$13
     }
     label$14 : {
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
      $1_1 = i64toi32_i32$0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$1 = $12_1;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$5 = $4_1;
      i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
      $269$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$5 = $3_1;
      $272_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $273$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $269$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = $273$hi;
      i64toi32_i32$1 = $272_1;
      i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
      $4_1 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      if (!!(i64toi32_i32$2 | i64toi32_i32$1 | 0 | i64toi32_i32$5 | 0)) {
       break label$14
      }
      i64toi32_i32$5 = 0;
      $3_1 = 0;
      $3$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      $4_1 = 0;
      $4$hi = i64toi32_i32$5;
      break label$1;
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$4 = $4_1;
     i64toi32_i32$2 = 524287;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$12
     }
     $282_1 = $5_1 + 32 | 0;
     i64toi32_i32$4 = $1$hi;
     $283_1 = $1_1;
     $283$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     $284_1 = $4_1;
     $284$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $4$hi;
     $7_1 = !($4_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$2 = i64toi32_i32$0 ? $1_1 : $4_1;
     i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$4 : i64toi32_i32$5;
     i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (32 | 0)) {
      $148_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
     } else {
      $148_1 = i64toi32_i32$4
     }
     $291$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $294$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $291$hi;
     i64toi32_i32$2 = $148_1;
     i64toi32_i32$1 = $294$hi;
     i64toi32_i32$4 = $7_1 << 6 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $7_1 = i64toi32_i32$5 + -12 | 0;
     i64toi32_i32$3 = $283$hi;
     i64toi32_i32$2 = $284$hi;
     $757($282_1 | 0, $283_1 | 0, i64toi32_i32$3 | 0, $284_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0);
     $6_1 = $6_1 - $7_1 | 0;
     i64toi32_i32$0 = $5_1 + 40 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$2;
     break label$12;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $12$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$4 = $12_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $309_1 = i64toi32_i32$1;
    $309$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $1_1 = i64toi32_i32$3;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $3_1;
    $315_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$5 = 0;
    $316$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $309$hi;
    i64toi32_i32$4 = $309_1;
    i64toi32_i32$1 = $316$hi;
    i64toi32_i32$2 = $315_1;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$4 = 1048576;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    if (!(i64toi32_i32$5 & i64toi32_i32$2 | 0 | i64toi32_i32$4 | 0)) {
     break label$12
    }
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $149_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $149_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    $322_1 = $149_1;
    $322$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     $150_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
     $150_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    }
    $324$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $322$hi;
    i64toi32_i32$5 = $322_1;
    i64toi32_i32$4 = $324$hi;
    i64toi32_i32$2 = $150_1;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $325_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $325$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
    $327_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $327$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $325$hi;
    i64toi32_i32$4 = $325_1;
    i64toi32_i32$3 = $327$hi;
    i64toi32_i32$2 = $327_1;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $1_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$3;
    $6_1 = $6_1 + 1 | 0;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $154_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
     $154_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    $4_1 = $154_1;
    $4$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$3 = $11_1;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
   $2_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $2$hi = i64toi32_i32$5;
   label$15 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $4_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$3;
    break label$1;
   }
   $7_1 = 0;
   label$16 : {
    label$17 : {
     if (($6_1 | 0) <= (0 | 0)) {
      break label$17
     }
     $7_1 = $6_1;
     break label$16;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$4 = $4$hi;
    $757($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$4 | 0, $6_1 + 127 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    $762($5_1 | 0, $1_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $354_1 = i64toi32_i32$3;
    $354$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
    $356_1 = i64toi32_i32$4;
    $356$hi = i64toi32_i32$3;
    i64toi32_i32$5 = (i64toi32_i32$5 + 16 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $360_1 = i64toi32_i32$3;
    $360$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $356$hi;
    i64toi32_i32$5 = $356_1;
    i64toi32_i32$3 = $360$hi;
    i64toi32_i32$2 = $360_1;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 0;
    $362_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$4 = 0;
    $363$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $354$hi;
    i64toi32_i32$2 = $354_1;
    i64toi32_i32$3 = $363$hi;
    i64toi32_i32$5 = $362_1;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    $1_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$4 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $155_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $155_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   $369_1 = $155_1;
   $369$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $156_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
    $156_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $371$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $369$hi;
   i64toi32_i32$3 = $369_1;
   i64toi32_i32$2 = $371$hi;
   i64toi32_i32$5 = $156_1;
   i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $157_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $157_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$2 = $157_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   $375$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = $375$hi;
   i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $377_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $377$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    $158_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
    $158_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
   }
   $380$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $377$hi;
   i64toi32_i32$2 = $377_1;
   i64toi32_i32$4 = $380$hi;
   i64toi32_i32$5 = $158_1;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $4_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $1$hi;
   $6_1 = $1_1 & 7 | 0;
   label$18 : {
    label$19 : {
     label$20 : {
      switch ($758() | 0 | 0) {
      case 0:
       i64toi32_i32$4 = $4$hi;
       $386_1 = $4_1;
       $386$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = 0;
       $390$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$2 = $390$hi;
       i64toi32_i32$5 = $6_1 >>> 0 > 4 >>> 0;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $1_1 = i64toi32_i32$1;
       $1$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$0 = $1$hi;
       i64toi32_i32$4 = i64toi32_i32$1;
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$5 = $3_1;
       $394_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $395$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $386$hi;
       i64toi32_i32$5 = $386_1;
       i64toi32_i32$0 = $395$hi;
       i64toi32_i32$3 = $394_1;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $4_1 = i64toi32_i32$2;
       $4$hi = i64toi32_i32$1;
       label$23 : {
        if (($6_1 | 0) == (4 | 0)) {
         break label$23
        }
        i64toi32_i32$1 = $1$hi;
        $3_1 = $1_1;
        $3$hi = i64toi32_i32$1;
        break label$19;
       }
       i64toi32_i32$1 = $4$hi;
       $400_1 = $4_1;
       $400$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $1$hi;
       i64toi32_i32$4 = $1_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$3 = 1;
       i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
       $2_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
       $2$hi = i64toi32_i32$5;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$5 = $2$hi;
       i64toi32_i32$1 = $2_1;
       i64toi32_i32$4 = $1$hi;
       i64toi32_i32$3 = $1_1;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $3_1 = i64toi32_i32$0;
       $3$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $2$hi;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$1 = $2$hi;
       i64toi32_i32$3 = $2_1;
       $408_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $409$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $400$hi;
       i64toi32_i32$3 = $400_1;
       i64toi32_i32$2 = $409$hi;
       i64toi32_i32$1 = $408_1;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $4_1 = i64toi32_i32$4;
       $4$hi = i64toi32_i32$0;
       break label$18;
      case 1:
       i64toi32_i32$0 = $4$hi;
       $411_1 = $4_1;
       $411$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$0 = $2$hi;
       i64toi32_i32$5 = $2_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 0;
       $417_1 = ((i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) & ($6_1 | 0) != (0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $418$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$1 = $3_1;
       i64toi32_i32$0 = $418$hi;
       i64toi32_i32$3 = $417_1;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $1_1 = i64toi32_i32$2;
       $1$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = $1$hi;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3_1;
       $422_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $423$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $411$hi;
       i64toi32_i32$3 = $411_1;
       i64toi32_i32$4 = $423$hi;
       i64toi32_i32$1 = $422_1;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $4_1 = i64toi32_i32$0;
       $4$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1$hi;
       $3_1 = $1_1;
       $3$hi = i64toi32_i32$2;
       break label$19;
      case 2:
       break label$20;
      default:
       break label$19;
      };
     }
     i64toi32_i32$2 = $4$hi;
     $426_1 = $4_1;
     $426$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     $432_1 = !($2_1 | i64toi32_i32$2 | 0) & ($6_1 | 0) != (0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $433$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$3 = $433$hi;
     i64toi32_i32$1 = $432_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1_1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $437_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $438$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $426$hi;
     i64toi32_i32$1 = $426_1;
     i64toi32_i32$0 = $438$hi;
     i64toi32_i32$5 = $437_1;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$4;
    }
    if (!$6_1) {
     break label$1
    }
   }
   $759() | 0;
  }
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$4;
  global$0 = $5_1 + 112 | 0;
 }
 
 function $761($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $3_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $30_1 = 0, $38_1 = 0, $38$hi = 0, $42$hi = 0, $48_1 = 0, $49_1 = 0, $49$hi = 0, $53$hi = 0, $54_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
    $4_1 = $3_1 & 2147483647 | 0;
    if (($4_1 + -8388608 | 0) >>> 0 > 2130706431 >>> 0) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $24_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $24_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    i64toi32_i32$0 = $24_1;
    i64toi32_i32$2 = 1065353216;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$5;
    break label$1;
   }
   label$3 : {
    if ($4_1 >>> 0 < 2139095040 >>> 0) {
     break label$3
    }
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $25_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $25_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    i64toi32_i32$5 = $25_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$1;
    break label$1;
   }
   label$4 : {
    if ($4_1) {
     break label$4
    }
    i64toi32_i32$1 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = 0;
   $30_1 = $4_1;
   $4_1 = Math_clz32($4_1);
   i64toi32_i32$5 = 0;
   $757($2_1 | 0, $30_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 + 81 | 0 | 0);
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
   $38_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 16265 - $4_1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $26_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $26_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $42$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $38$hi;
   i64toi32_i32$5 = $38_1;
   i64toi32_i32$1 = $42$hi;
   i64toi32_i32$3 = $26_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  $48_1 = i64toi32_i32$1;
  i64toi32_i32$5 = $5$hi;
  $49_1 = $5_1;
  $49$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = $3_1 & -2147483648 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $27_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $27_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $53$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $49$hi;
  i64toi32_i32$5 = $49_1;
  i64toi32_i32$0 = $53$hi;
  i64toi32_i32$3 = $27_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $54_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  i64toi32_i32$5 = $48_1;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $54_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $762($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1_1 = $18_1;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2_1 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $22_1;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $763($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $5$hi = 0, $4_1 = 0, $3_1 = 0, $2_1 = 0, i64toi32_i32$2 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $20_1 = 0, $24_1 = 0, $34_1 = 0, $34$hi = 0, $42_1 = 0, $44_1 = 0, $81_1 = 0, $81$hi = 0, $83_1 = 0, $83$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $90$hi = 0, $93_1 = 0, $97_1 = 0, $105_1 = 0, $105$hi = 0, $114_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = $1_1 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = -1065418752;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = -1082064896;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 25;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $37_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $37_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $3_1 = $37_1;
    label$3 : {
     i64toi32_i32$4 = $0$hi;
     $20_1 = !($0_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 33554431;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $5_1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     $5$hi = i64toi32_i32$3;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 16777216;
     $24_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 16777216;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0 ? $20_1 : $24_1) {
      break label$3
     }
     $4_1 = $3_1 + 1073741825 | 0;
     break label$1;
    }
    $4_1 = $3_1 + 1073741824 | 0;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
    $34_1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
    $34$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$5 = $34$hi;
    i64toi32_i32$3 = $34_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$1
    }
    $4_1 = $4_1 + ($3_1 & 1 | 0) | 0;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $42_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$1 = 0;
    $44_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $42_1 : $44_1) {
     break label$4
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 25;
    i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $38_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     $38_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $4_1 = $38_1 & 4194303 | 0 | 2143289344 | 0;
    break label$1;
   }
   $4_1 = 2139095040;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$5 = 1082064895;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   $4_1 = 0;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $39_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    $39_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $3_1 = $39_1;
   if ($3_1 >>> 0 < 16145 >>> 0) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
   $5_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $5$hi;
   $757($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$1 | 0, $5_1 | 0, i64toi32_i32$3 | 0, $3_1 + -16129 | 0 | 0);
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$1 = $5$hi;
   $762($2_1 | 0, $0_1 | 0, i64toi32_i32$3 | 0, $5_1 | 0, i64toi32_i32$1 | 0, 16257 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$1;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 25;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $40_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $40_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $4_1 = $40_1;
   label$5 : {
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $81_1 = i64toi32_i32$1;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$1;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$3 = $83_1;
    i64toi32_i32$1 = $87$hi;
    i64toi32_i32$5 = $87_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $89_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$5 = $81_1;
    i64toi32_i32$1 = $90$hi;
    i64toi32_i32$3 = $89_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $0_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $0$hi = i64toi32_i32$1;
    $93_1 = !($0_1 | i64toi32_i32$1 | 0);
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 33554431;
    i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $5_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    $97_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 16777216;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $93_1 : $97_1) {
     break label$5
    }
    $4_1 = $4_1 + 1 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 16777216;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $105_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $105$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$4 = $105$hi;
   i64toi32_i32$5 = $105_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | 0) {
    break label$1
   }
   $4_1 = ($4_1 & 1 | 0) + $4_1 | 0;
  }
  global$0 = $2_1 + 32 | 0;
  $114_1 = $4_1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $41_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   $41_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
  }
  return Math_fround((wasm2js_scratch_store_i32(2, $114_1 | ($41_1 & -2147483648 | 0) | 0), wasm2js_scratch_load_f32()));
 }
 
 function $764($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $5$hi = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $6_1 = 0, $6$hi = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $3_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $33$hi = 0, $37_1 = 0, $50_1 = 0, $50$hi = 0, $54$hi = 0, $63_1 = 0, $63$hi = 0, $64_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$1_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = -1048576;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = 2145386495;
    i64toi32_i32$3 = -1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 60;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $26_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $26_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $6_1 = $26_1;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 4;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $27_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $27_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    i64toi32_i32$5 = $27_1;
    i64toi32_i32$1 = 1006632960;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$2;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$3 : {
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 2146435072;
    i64toi32_i32$0 = 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 60;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $28_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $28_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $6_1 = $28_1;
    $6$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 4;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $29_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $29_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    i64toi32_i32$4 = $29_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $5_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $5$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $5$hi;
    if (!!($5_1 | i64toi32_i32$3 | 0)) {
     break label$4
    }
    i64toi32_i32$3 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$3;
    break label$1;
   }
   $32_1 = $2_1;
   i64toi32_i32$3 = $5$hi;
   $33_1 = $5_1;
   $33$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   $37_1 = Math_clz32($4_1) + 32 | 0;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $30_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $30_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$0 = 1;
   i64toi32_i32$5 = 0;
   $3_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0 ? $37_1 : Math_clz32($30_1);
   i64toi32_i32$3 = $33$hi;
   i64toi32_i32$4 = 0;
   $757($32_1 | 0, $33_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, $3_1 + 49 | 0 | 0);
   i64toi32_i32$5 = $2_1 + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
   $50_1 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
   $50$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 15372 - $3_1 | 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $31_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $31_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $54$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $50$hi;
   i64toi32_i32$4 = $50_1;
   i64toi32_i32$3 = $54$hi;
   i64toi32_i32$0 = $31_1;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$3;
   $6$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$5 = $4_1;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $63_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  $63$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = $63$hi;
  i64toi32_i32$0 = $63_1;
  i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
  $64_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
  i64toi32_i32$4 = $0_1;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $64_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $765($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $14$hi = 0, $14_1 = 0, $12$hi = 0, $11$hi = 0, $10$hi = 0, $15$hi = 0, $12_1 = 0, $6_1 = 0, $15_1 = 0, $11_1 = 0, $10_1 = 0, $18$hi = 0, $8_1 = 0, $18_1 = 0, $13$hi = 0, $16$hi = 0, $17$hi = 0, $7_1 = 0, $13_1 = 0, $16_1 = 0, $17_1 = 0, $19$hi = 0, $22$hi = 0, $19_1 = 0, $9_1 = 0, $20$hi = 0, $21$hi = 0, $23$hi = 0, $24$hi = 0, $228_1 = 0, $229_1 = 0, $230_1 = 0, $231_1 = 0, $232_1 = 0, $233_1 = 0, $234_1 = 0, $235_1 = 0, $237_1 = 0, $238_1 = 0, $239_1 = 0, $240_1 = 0, $241_1 = 0, $242_1 = 0, $244_1 = 0, $246_1 = 0, $248_1 = 0, $249_1 = 0, $251_1 = 0, $252_1 = 0, $254_1 = 0, $256_1 = 0, $20_1 = 0, $257_1 = 0, $258_1 = 0, $21_1 = 0, $22_1 = 0, $259_1 = 0, $24_1 = 0, $260_1 = 0, $261_1 = 0, $262_1 = 0, $263_1 = 0, $265_1 = 0, $266_1 = 0, $267_1 = 0, $268_1 = 0, $270_1 = 0, $271_1 = 0, $272_1 = 0, $273_1 = 0, $274_1 = 0, $275_1 = 0, $276_1 = 0, $278_1 = 0, $29_1 = 0, $29$hi = 0, $31$hi = 0, $34_1 = 0, $34$hi = 0, $36$hi = 0, $39_1 = 0, $39$hi = 0, $43$hi = 0, $70_1 = 0, $74_1 = 0, $81_1 = 0, $85_1 = 0, $94_1 = 0, $94$hi = 0, $106_1 = 0, $106$hi = 0, $128_1 = 0, $129_1 = 0, $129$hi = 0, $130_1 = 0, $130$hi = 0, $137$hi = 0, $140$hi = 0, $150_1 = 0, $150$hi = 0, $155$hi = 0, $162_1 = 0, $163_1 = 0, $163$hi = 0, $164_1 = 0, $164$hi = 0, $171$hi = 0, $174$hi = 0, $186_1 = 0, $186$hi = 0, $191$hi = 0, $194_1 = 0, $194$hi = 0, $196$hi = 0, $207_1 = 0, $207$hi = 0, $215_1 = 0, $215$hi = 0, $222_1 = 0, $222$hi = 0, $227_1 = 0, $227$hi = 0, $236_1 = 0, $236$hi = 0, $243_1 = 0, $243$hi = 0, $245_1 = 0, $245$hi = 0, $247_1 = 0, $247$hi = 0, $250_1 = 0, $252$hi = 0, $253_1 = 0, $253$hi = 0, $255_1 = 0, $255$hi = 0, $264_1 = 0, $264$hi = 0, $269_1 = 0, $269$hi = 0, $277_1 = 0, $277$hi = 0, $280$hi = 0, $23_1 = 0, $296_1 = 0, $296$hi = 0, $300_1 = 0, $301_1 = 0, $301$hi = 0, $305_1 = 0, $305$hi = 0, $309_1 = 0, $310$hi = 0, $311_1 = 0, $311$hi = 0, $312_1 = 0, $312$hi = 0, $315_1 = 0, $316$hi = 0, $319_1 = 0, $320$hi = 0, $321$hi = 0, $325_1 = 0, $326$hi = 0, $327$hi = 0, $330_1 = 0, $330$hi = 0, $331_1 = 0, $331$hi = 0, $338_1 = 0, $338$hi = 0, $344_1 = 0, $344$hi = 0, $346$hi = 0, $347_1 = 0, $347$hi = 0, $348_1 = 0, $348$hi = 0, $349_1 = 0, $349$hi = 0, $351$hi = 0, $355_1 = 0, $356$hi = 0, $357_1 = 0, $357$hi = 0, $358_1 = 0, $358$hi = 0, $360_1 = 0, $360$hi = 0, $363_1 = 0, $364$hi = 0, $367_1 = 0, $368$hi = 0, $369$hi = 0, $372_1 = 0, $373$hi = 0, $375$hi = 0, $376_1 = 0, $376$hi = 0, $380_1 = 0, $381$hi = 0, $382_1 = 0, $382$hi = 0, $383_1 = 0, $383$hi = 0, $386_1 = 0, $387$hi = 0, $390_1 = 0, $391$hi = 0, $392$hi = 0, $396_1 = 0, $397$hi = 0, $407_1 = 0, $407$hi = 0, $409$hi = 0, $412_1 = 0, $412$hi = 0, $414$hi = 0, $418_1 = 0, $418$hi = 0, $420$hi = 0, $454_1 = 0, $454$hi = 0, $456_1 = 0, $456$hi = 0, $457_1 = 0, $457$hi = 0, $459_1 = 0, $459$hi = 0, $463_1 = 0, $463$hi = 0, $465_1 = 0, $466$hi = 0, $471_1 = 0, $471$hi = 0, $475_1 = 0, $475$hi = 0, $484$hi = 0, $486_1 = 0, $486$hi = 0, $492_1 = 0, $498_1 = 0, $498$hi = 0, $503_1 = 0, $504$hi = 0, $508_1 = 0, $508$hi = 0, $512_1 = 0, $512$hi = 0, $515_1 = 0, $515$hi = 0, $519_1 = 0, $520$hi = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $228_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $228_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $228_1;
  $29$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $229_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $229_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $31$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $29$hi;
  i64toi32_i32$1 = $29_1;
  i64toi32_i32$0 = $31$hi;
  i64toi32_i32$3 = $229_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $10_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $230_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $230_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $34_1 = $230_1;
  $34$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 47;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $231_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $231_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $36$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $34$hi;
  i64toi32_i32$1 = $34_1;
  i64toi32_i32$0 = $36$hi;
  i64toi32_i32$3 = $231_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $11_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 49;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $232_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $232_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $39_1 = $232_1;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $12_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$2;
  i64toi32_i32$1 = $12_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 15;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $233_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $233_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $43$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $39$hi;
  i64toi32_i32$2 = $39_1;
  i64toi32_i32$1 = $43$hi;
  i64toi32_i32$3 = $233_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $13_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $13$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $14_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $15_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $15_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $234_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $234_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $16_1 = $234_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$1 = $12_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $235_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $235_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $17_1 = $235_1;
  $17$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $237_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $237_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $237_1 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $238_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $238_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $238_1 & 32767 | 0;
     if (($7_1 + -1 | 0) >>> 0 > 32765 >>> 0) {
      break label$3
     }
     $8_1 = 0;
     if (($6_1 + -1 | 0) >>> 0 < 32766 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$2 = $1$hi;
     $70_1 = !($1_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $18_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     $74_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$3 = $18_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $70_1 : $74_1) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $14$hi = i64toi32_i32$2;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$2 = $3$hi;
     $81_1 = !($3_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     $85_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) | 0 ? $81_1 : $85_1) {
      break label$5
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $14$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$0 = $18_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
     $94_1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
     $94$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = $94$hi;
     i64toi32_i32$1 = $94_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      if (!!(i64toi32_i32$1 | i64toi32_i32$2 | 0 | i64toi32_i32$0 | 0)) {
       break label$7
      }
      i64toi32_i32$0 = 2147450880;
      $14_1 = 0;
      $14$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $14$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $106_1 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
     $106$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$0 = $106$hi;
     i64toi32_i32$2 = $106_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $2_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     label$9 : {
      i64toi32_i32$0 = $2$hi;
      if (!!($2_1 | i64toi32_i32$0 | 0)) {
       break label$9
      }
      i64toi32_i32$0 = 2147450880;
      $14_1 = 0;
      $14$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $14$hi = i64toi32_i32$2;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    label$11 : {
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$11
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    $8_1 = 0;
    label$12 : {
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$0 = $18_1;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$12
     }
     $128_1 = $5_1 + 80 | 0;
     i64toi32_i32$0 = $1$hi;
     $129_1 = $1_1;
     $129$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $15$hi;
     $130_1 = $15_1;
     $130$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $15$hi;
     $8_1 = !($15_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$4 = $8_1;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1_1 : $15_1;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$2;
     i64toi32_i32$0 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$0 | 0) == (32 | 0)) {
      $239_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $239_1 = i64toi32_i32$0
     }
     $137$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $140$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $137$hi;
     i64toi32_i32$3 = $239_1;
     i64toi32_i32$1 = $140$hi;
     i64toi32_i32$0 = $8_1 << 6 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$2;
     i64toi32_i32$5 = $129$hi;
     i64toi32_i32$3 = $130$hi;
     $757($128_1 | 0, $129_1 | 0, i64toi32_i32$5 | 0, $130_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$2 | 0;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $240_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $240_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $150_1 = $240_1;
     $150$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5_1 + 88 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $241_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
      $241_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $155$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $150$hi;
     i64toi32_i32$4 = $150_1;
     i64toi32_i32$5 = $155$hi;
     i64toi32_i32$0 = $241_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $10_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$3 = $15_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $242_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $242_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $16_1 = $242_1;
     $16$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$2
    }
    $162_1 = $5_1 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $163_1 = $3_1;
    $163$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $12$hi;
    $164_1 = $12_1;
    $164$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $12$hi;
    $9_1 = !($12_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $3_1 : $12_1;
    i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $244_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $244_1 = i64toi32_i32$5
    }
    $171$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $174$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $171$hi;
    i64toi32_i32$3 = $244_1;
    i64toi32_i32$0 = $174$hi;
    i64toi32_i32$5 = $9_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $9_1 = i64toi32_i32$4;
    i64toi32_i32$2 = $163$hi;
    i64toi32_i32$3 = $164$hi;
    $757($162_1 | 0, $163_1 | 0, i64toi32_i32$2 | 0, $164_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $8_1 = ($8_1 - i64toi32_i32$4 | 0) + 16 | 0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 49;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $246_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $246_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $186_1 = $246_1;
    $186$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5_1 + 72 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 15;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $248_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $248_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $191$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $186$hi;
    i64toi32_i32$1 = $186_1;
    i64toi32_i32$2 = $191$hi;
    i64toi32_i32$5 = $248_1;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $13_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $13$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $249_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $249_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $194_1 = $249_1;
    $194$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 47;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $251_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $251_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $196$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $194$hi;
    i64toi32_i32$1 = $194_1;
    i64toi32_i32$2 = $196$hi;
    i64toi32_i32$5 = $251_1;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $11_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $11$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $252_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $252_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17_1 = $252_1;
    $17$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $2_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $19_1 = i64toi32_i32$1;
   $19$hi = i64toi32_i32$2;
   $207_1 = i64toi32_i32$1;
   $207$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 15;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $254_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $254_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   i64toi32_i32$2 = $254_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -32768;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $1_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $10$hi;
   i64toi32_i32$1 = $10_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $215_1 = i64toi32_i32$1;
   $215$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $207$hi;
   i64toi32_i32$3 = $207_1;
   i64toi32_i32$1 = $215$hi;
   i64toi32_i32$5 = $215_1;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $10_1 = i64toi32_i32$0;
   $10$hi = i64toi32_i32$4;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $256_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $256_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $12_1 = $256_1;
   $12$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $222_1 = i64toi32_i32$2;
   $222$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$4 = $12_1;
   i64toi32_i32$2 = $222$hi;
   i64toi32_i32$5 = $222_1;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$0 = $11$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$5 = $12_1;
   i64toi32_i32$3 = 0;
   $227_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   $227$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $20_1 = i64toi32_i32$0;
   $20$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$5 = $15_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $12_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
   $12$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$5 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $12_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $236_1 = i64toi32_i32$5;
   $236$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$3 = $20_1;
   i64toi32_i32$5 = $236$hi;
   i64toi32_i32$4 = $236_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $18_1 = i64toi32_i32$2;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $13$hi;
   i64toi32_i32$0 = $13_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $15_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $15$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $243_1 = i64toi32_i32$0;
   $243$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $18$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$0 = $243$hi;
   i64toi32_i32$4 = $243_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $13_1 = i64toi32_i32$5;
   $13$hi = i64toi32_i32$2;
   $245_1 = i64toi32_i32$5;
   $245$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $257_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    $257_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
   }
   $247_1 = $257_1;
   $247$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$4 = $19_1;
   $250_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = $250_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
    $258_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $258_1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
   }
   $252$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $247$hi;
   i64toi32_i32$2 = $247_1;
   i64toi32_i32$4 = $252$hi;
   i64toi32_i32$3 = $258_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $253_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $253$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $245$hi;
   i64toi32_i32$1 = $245_1;
   i64toi32_i32$2 = $253$hi;
   i64toi32_i32$3 = $253_1;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $19_1 = i64toi32_i32$0;
   $19$hi = i64toi32_i32$5;
   $255_1 = i64toi32_i32$0;
   $255$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
   $21_1 = i64toi32_i32$1;
   $21$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = $16$hi;
   i64toi32_i32$4 = $16_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 65536;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $10_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $10$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$4 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $264_1 = i64toi32_i32$4;
   $264$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $21$hi;
   i64toi32_i32$5 = $21_1;
   i64toi32_i32$4 = $264$hi;
   i64toi32_i32$3 = $264_1;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $16_1 = i64toi32_i32$2;
   $16$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $269_1 = i64toi32_i32$5;
   $269$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$5 = $269$hi;
   i64toi32_i32$3 = $269_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $22_1 = i64toi32_i32$4;
   $22$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $17$hi;
   i64toi32_i32$0 = $17_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 2147483647;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $277_1 = i64toi32_i32$2;
   $277$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $22$hi;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$2 = $277$hi;
   i64toi32_i32$3 = $277_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $17_1 = i64toi32_i32$5;
   $17$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    $259_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
    $259_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   }
   $280$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $255$hi;
   i64toi32_i32$4 = $255_1;
   i64toi32_i32$0 = $280$hi;
   i64toi32_i32$3 = $259_1;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $23_1 = i64toi32_i32$2;
   $23$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $227$hi;
   i64toi32_i32$1 = $227_1;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $4_1 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$2;
   $6_1 = (($7_1 + $6_1 | 0) + $8_1 | 0) + -16383 | 0;
   label$13 : {
    label$14 : {
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$2 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $24_1 = i64toi32_i32$1;
     $24$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $296_1 = i64toi32_i32$1;
     $296$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $24$hi;
     i64toi32_i32$5 = $24_1;
     i64toi32_i32$1 = $296$hi;
     i64toi32_i32$3 = $296_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2_1 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$3 = $24_1;
     $300_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $301_1 = $300_1;
     $301$hi = i64toi32_i32$2;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $305_1 = i64toi32_i32$0;
     $305$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$0 = $305$hi;
     i64toi32_i32$5 = $305_1;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$1;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = $2_1;
     $309_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $310$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $301$hi;
     i64toi32_i32$5 = $301_1;
     i64toi32_i32$4 = $310$hi;
     i64toi32_i32$3 = $309_1;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $311_1 = i64toi32_i32$0;
     $311$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $312_1 = $3_1;
     $312$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$3 = $20_1;
     $315_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $316$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$5 = $18_1;
     $319_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $320$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $316$hi;
     i64toi32_i32$5 = $315_1;
     i64toi32_i32$2 = $320$hi;
     i64toi32_i32$1 = $319_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $321$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $312$hi;
     i64toi32_i32$3 = $312_1;
     i64toi32_i32$5 = $321$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $325_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $326$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $311$hi;
     i64toi32_i32$1 = $311_1;
     i64toi32_i32$4 = $326$hi;
     i64toi32_i32$3 = $325_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $327$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $330_1 = i64toi32_i32$1;
     $330$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $327$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $330$hi;
     i64toi32_i32$3 = $330_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $331_1 = i64toi32_i32$4;
     $331$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$5 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $338_1 = i64toi32_i32$0;
     $338$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = $338$hi;
     i64toi32_i32$3 = $338_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $1_1 = i64toi32_i32$1;
     $1$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $260_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $260_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $344_1 = $260_1;
     $344$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $261_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $261_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
     }
     $346$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $344$hi;
     i64toi32_i32$4 = $344_1;
     i64toi32_i32$5 = $346$hi;
     i64toi32_i32$2 = $261_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $347_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $347$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $331$hi;
     i64toi32_i32$3 = $331_1;
     i64toi32_i32$4 = $347$hi;
     i64toi32_i32$2 = $347_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $348_1 = i64toi32_i32$0;
     $348$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     $349_1 = $2_1;
     $349$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
      $262_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $262_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     }
     $351$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $349$hi;
     i64toi32_i32$1 = $349_1;
     i64toi32_i32$5 = $351$hi;
     i64toi32_i32$2 = $262_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1_1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$2 = $2_1;
     $355_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $356$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $348$hi;
     i64toi32_i32$2 = $348_1;
     i64toi32_i32$0 = $356$hi;
     i64toi32_i32$1 = $355_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $357_1 = i64toi32_i32$5;
     $357$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     $358_1 = $1_1;
     $358$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$3 = $17_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $263_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $263_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $360_1 = $263_1;
     $360$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$1 = $21_1;
     $363_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $364$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$1 = $22_1;
     i64toi32_i32$3 = $16_1;
     $367_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $368$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $364$hi;
     i64toi32_i32$3 = $363_1;
     i64toi32_i32$4 = $368$hi;
     i64toi32_i32$2 = $367_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $369$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$1 = $17_1;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$2 = $22_1;
     $372_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $373$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $369$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $373$hi;
     i64toi32_i32$3 = $372_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      $265_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $265_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     }
     $375$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $360$hi;
     i64toi32_i32$0 = $360_1;
     i64toi32_i32$1 = $375$hi;
     i64toi32_i32$3 = $265_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $376_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $376$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $358$hi;
     i64toi32_i32$2 = $358_1;
     i64toi32_i32$0 = $376$hi;
     i64toi32_i32$3 = $376_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$3 = $1_1;
     $380_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $381$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $357$hi;
     i64toi32_i32$3 = $357_1;
     i64toi32_i32$4 = $381$hi;
     i64toi32_i32$2 = $380_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $382_1 = i64toi32_i32$0;
     $382$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     $383_1 = $3_1;
     $383$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$1 = $19_1;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$2 = $13_1;
     $386_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $387$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$2 = $23_1;
     i64toi32_i32$3 = $19_1;
     $390_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $391$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $387$hi;
     i64toi32_i32$3 = $386_1;
     i64toi32_i32$1 = $391$hi;
     i64toi32_i32$5 = $390_1;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $392$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $383$hi;
     i64toi32_i32$2 = $383_1;
     i64toi32_i32$3 = $392$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2_1 = i64toi32_i32$1;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3_1;
     $396_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $397$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $382$hi;
     i64toi32_i32$5 = $382_1;
     i64toi32_i32$4 = $397$hi;
     i64toi32_i32$2 = $396_1;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$5 = 65536;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     if (!(i64toi32_i32$0 & i64toi32_i32$2 | 0 | i64toi32_i32$5 | 0)) {
      break label$14
     }
     $6_1 = $6_1 + 1 | 0;
     break label$13;
    }
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$1 = $11_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $266_1 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
     $266_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $266_1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $267_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $267_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $407_1 = $267_1;
    $407$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $268_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $268_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $409$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $407$hi;
    i64toi32_i32$1 = $407_1;
    i64toi32_i32$0 = $409$hi;
    i64toi32_i32$2 = $268_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $1_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $270_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $270_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $412_1 = $270_1;
    $412$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $271_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $271_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $414$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $412$hi;
    i64toi32_i32$1 = $412_1;
    i64toi32_i32$0 = $414$hi;
    i64toi32_i32$2 = $271_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$5 = $11_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $272_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $272_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $11_1 = $272_1;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    $418_1 = $3_1;
    $418$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $273_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $273_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $420$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $418$hi;
    i64toi32_i32$1 = $418_1;
    i64toi32_i32$0 = $420$hi;
    i64toi32_i32$2 = $273_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$0;
   }
   label$15 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$5 = $14_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $14_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $14$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   label$16 : {
    label$17 : {
     if (($6_1 | 0) > (0 | 0)) {
      break label$17
     }
     label$18 : {
      $7_1 = 1 - $6_1 | 0;
      if ($7_1 >>> 0 < 128 >>> 0) {
       break label$18
      }
      i64toi32_i32$1 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$1;
     }
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $4$hi;
     $6_1 = $6_1 + 127 | 0;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$5 = $4$hi;
     $757($5_1 + 48 | 0 | 0, $11_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $6_1 | 0);
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$1 = $1$hi;
     $757($5_1 + 32 | 0 | 0, $2_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $6_1 | 0);
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$5 = $4$hi;
     $762($5_1 + 16 | 0 | 0, $11_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $7_1 | 0);
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$1 = $1$hi;
     $762($5_1 | 0, $2_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $454_1 = i64toi32_i32$1;
     $454$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
     $456_1 = i64toi32_i32$5;
     $456$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $454$hi;
     i64toi32_i32$0 = $454_1;
     i64toi32_i32$5 = $456$hi;
     i64toi32_i32$2 = $456_1;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
     $457_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $457$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
     $459_1 = i64toi32_i32$5;
     $459$hi = i64toi32_i32$0;
     i64toi32_i32$1 = (i64toi32_i32$1 + 48 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $463_1 = i64toi32_i32$0;
     $463$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $459$hi;
     i64toi32_i32$1 = $459_1;
     i64toi32_i32$0 = $463$hi;
     i64toi32_i32$2 = $463_1;
     i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     $465_1 = (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$5 = 0;
     $466$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $457$hi;
     i64toi32_i32$2 = $457_1;
     i64toi32_i32$0 = $466$hi;
     i64toi32_i32$1 = $465_1;
     i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     $11_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$5 = ($5_1 + 32 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $471_1 = i64toi32_i32$0;
     $471$hi = i64toi32_i32$2;
     i64toi32_i32$5 = ($5_1 + 16 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $475_1 = i64toi32_i32$2;
     $475$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $471$hi;
     i64toi32_i32$5 = $471_1;
     i64toi32_i32$2 = $475$hi;
     i64toi32_i32$1 = $475_1;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $5_1 + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$2;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$5;
     $2$hi = i64toi32_i32$2;
     break label$16;
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $274_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $274_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $484$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    $486_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $486$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $484$hi;
    i64toi32_i32$5 = $274_1;
    i64toi32_i32$2 = $486$hi;
    i64toi32_i32$1 = $486_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $1_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $1$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$1 = $14_1;
   i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $14_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $14$hi = i64toi32_i32$5;
   label$19 : {
    i64toi32_i32$5 = $11$hi;
    $492_1 = !($11_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$1 = -1;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $275_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $276_1 = 0
      } else {
       $276_1 = 1
      }
      $278_1 = $276_1;
     } else {
      $278_1 = 0
     }
     $275_1 = $278_1;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $492_1 : $275_1) {
     break label$19
    }
    i64toi32_i32$1 = $14$hi;
    $498_1 = $14_1;
    $498$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $1_1 = i64toi32_i32$4;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$5 = $2_1;
    $503_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$1 = 0;
    $504$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $498$hi;
    i64toi32_i32$5 = $498_1;
    i64toi32_i32$3 = $504$hi;
    i64toi32_i32$0 = $503_1;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14_1 = i64toi32_i32$2;
    $14$hi = i64toi32_i32$4;
    break label$1;
   }
   label$20 : {
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
    $508_1 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
    $508$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$4 = $11_1;
    i64toi32_i32$1 = $508$hi;
    i64toi32_i32$0 = $508_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) | 0) {
     break label$20
    }
    i64toi32_i32$5 = $2$hi;
    $1_1 = $2_1;
    $1$hi = i64toi32_i32$5;
    break label$1;
   }
   i64toi32_i32$5 = $14$hi;
   $512_1 = $14_1;
   $512$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $515_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $515$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = $515$hi;
   i64toi32_i32$4 = $515_1;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$3;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$4 = $2_1;
   $519_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $520$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $512$hi;
   i64toi32_i32$4 = $512_1;
   i64toi32_i32$2 = $520$hi;
   i64toi32_i32$5 = $519_1;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $14_1 = i64toi32_i32$0;
   $14$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$4 = $0_1;
  HEAP32[i64toi32_i32$4 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $14$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $14_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $5_1 + 96 | 0;
 }
 
 function $766($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $14_1 = 0, $14$hi = 0, $17_1 = 0, $20_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $14_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $14$hi;
  $760($5_1 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $17_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $20_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $20_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 16 | 0;
 }
 
 function $767($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $5_1 = 0, $5$hi = 0, $21_1 = 0, $22_1 = 0, $19_1 = 0, $27_1 = 0, $27$hi = 0, $31$hi = 0, $32_1 = 0, $32$hi = 0, $36$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   $3_1 = $1_1 >> 31 | 0;
   $3_1 = ($1_1 + $3_1 | 0) ^ $3_1 | 0;
   i64toi32_i32$0 = 0;
   $19_1 = $3_1;
   $3_1 = Math_clz32($3_1);
   i64toi32_i32$1 = 0;
   $757($2_1 | 0, $19_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $3_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $27_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $27$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $3_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $31$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $27$hi;
   i64toi32_i32$1 = $27_1;
   i64toi32_i32$0 = $31$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $32_1 = i64toi32_i32$4;
   $32$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $1_1 & -2147483648 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $22_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $32$hi;
   i64toi32_i32$5 = $32_1;
   i64toi32_i32$2 = $36$hi;
   i64toi32_i32$3 = $22_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $768($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $15$hi = 0, $13$hi = 0, $15_1 = 0, $16$hi = 0, $13_1 = 0, i64toi32_i32$6 = 0, $5_1 = 0, $18$hi = 0, $19$hi = 0, $17$hi = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0, $11$hi = 0, $17_1 = 0, $12$hi = 0, $20$hi = 0, $11_1 = 0, $12_1 = 0, $20_1 = 0, $10$hi = 0, $10_1 = 0, $8_1 = 0, $6_1 = 0, $14_1 = 0, $14$hi = 0, $7_1 = 0, $21$hi = 0, $9_1 = 0, $470_1 = 0, $471_1 = 0, $475_1 = 0, $476_1 = 0, $478_1 = 0, $479_1 = 0, $480_1 = 0, $481_1 = 0, $482_1 = 0, $484_1 = 0, $485_1 = 0, $486_1 = 0, $488_1 = 0, $489_1 = 0, $490_1 = 0, $491_1 = 0, $494_1 = 0, $495_1 = 0, $496_1 = 0, $497_1 = 0, $498_1 = 0, $499_1 = 0, $501_1 = 0, $502_1 = 0, $503_1 = 0, $504_1 = 0, $505_1 = 0, $507_1 = 0, $508_1 = 0, $512_1 = 0, $513_1 = 0, $514_1 = 0, $515_1 = 0, $516_1 = 0, $518_1 = 0, $521_1 = 0, $522_1 = 0, $523_1 = 0, $524_1 = 0, $525_1 = 0, $526_1 = 0, $527_1 = 0, $528_1 = 0, $530_1 = 0, $21_1 = 0, $531_1 = 0, $532_1 = 0, $533_1 = 0, $537_1 = 0, $538_1 = 0, $539_1 = 0, $540_1 = 0, $542_1 = 0, $543_1 = 0, $544_1 = 0, $546_1 = 0, $547_1 = 0, $548_1 = 0, $549_1 = 0, $550_1 = 0, $552_1 = 0, $555_1 = 0, $556_1 = 0, $557_1 = 0, $558_1 = 0, $559_1 = 0, $560_1 = 0, $562_1 = 0, $563_1 = 0, $564_1 = 0, $565_1 = 0, $567_1 = 0, $568_1 = 0, $569_1 = 0, $570_1 = 0, $572_1 = 0, $573_1 = 0, $575_1 = 0, $576_1 = 0, $48_1 = 0, $52_1 = 0, $59_1 = 0, $63_1 = 0, $72_1 = 0, $72$hi = 0, $77_1 = 0, $77$hi = 0, $85_1 = 0, $85$hi = 0, $101_1 = 0, $102_1 = 0, $102$hi = 0, $103_1 = 0, $103$hi = 0, $110$hi = 0, $113$hi = 0, $128_1 = 0, $129_1 = 0, $129$hi = 0, $130_1 = 0, $130$hi = 0, $137$hi = 0, $140$hi = 0, $155_1 = 0, $157_1 = 0, $157$hi = 0, $161$hi = 0, $172_1 = 0, $172$hi = 0, $173$hi = 0, $176_1 = 0, $179_1 = 0, $179$hi = 0, $184$hi = 0, $194_1 = 0, $194$hi = 0, $195$hi = 0, $197_1 = 0, $200_1 = 0, $200$hi = 0, $205$hi = 0, $215_1 = 0, $215$hi = 0, $216$hi = 0, $218_1 = 0, $221_1 = 0, $221$hi = 0, $226$hi = 0, $236_1 = 0, $236$hi = 0, $237$hi = 0, $239_1 = 0, $242_1 = 0, $242$hi = 0, $247$hi = 0, $256_1 = 0, $256$hi = 0, $257$hi = 0, $265_1 = 0, $265$hi = 0, $269$hi = 0, $274_1 = 0, $274$hi = 0, $279_1 = 0, $279$hi = 0, $286_1 = 0, $286$hi = 0, $289_1 = 0, $289$hi = 0, $292_1 = 0, $294$hi = 0, $295_1 = 0, $295$hi = 0, $298_1 = 0, $298$hi = 0, $299_1 = 0, $299$hi = 0, $305_1 = 0, $305$hi = 0, $309_1 = 0, $310$hi = 0, $311_1 = 0, $311$hi = 0, $312_1 = 0, $312$hi = 0, $313_1 = 0, $313$hi = 0, $319_1 = 0, $319$hi = 0, $320_1 = 0, $320$hi = 0, $325_1 = 0, $325$hi = 0, $332_1 = 0, $332$hi = 0, $333$hi = 0, $335_1 = 0, $336_1 = 0, $336$hi = 0, $338_1 = 0, $338$hi = 0, $341_1 = 0, $343$hi = 0, $344_1 = 0, $344$hi = 0, $347_1 = 0, $347$hi = 0, $348$hi = 0, $349$hi = 0, $353_1 = 0, $354$hi = 0, $355$hi = 0, $357_1 = 0, $358$hi = 0, $359$hi = 0, $366_1 = 0, $366$hi = 0, $370_1 = 0, $370$hi = 0, $371_1 = 0, $371$hi = 0, $375_1 = 0, $375$hi = 0, $378$hi = 0, $383_1 = 0, $383$hi = 0, $385_1 = 0, $385$hi = 0, $388_1 = 0, $390$hi = 0, $391_1 = 0, $391$hi = 0, $394_1 = 0, $394$hi = 0, $395$hi = 0, $396_1 = 0, $396$hi = 0, $397_1 = 0, $397$hi = 0, $410_1 = 0, $410$hi = 0, $417_1 = 0, $417$hi = 0, $418$hi = 0, $420_1 = 0, $421_1 = 0, $421$hi = 0, $423_1 = 0, $423$hi = 0, $426_1 = 0, $428$hi = 0, $429_1 = 0, $429$hi = 0, $432_1 = 0, $432$hi = 0, $433$hi = 0, $434$hi = 0, $438_1 = 0, $439$hi = 0, $440_1 = 0, $440$hi = 0, $445_1 = 0, $446$hi = 0, $451_1 = 0, $451$hi = 0, $453_1 = 0, $453$hi = 0, $455$hi = 0, $460_1 = 0, $460$hi = 0, $464_1 = 0, $464$hi = 0, $468_1 = 0, $468$hi = 0, $472_1 = 0, $473_1 = 0, $473$hi = 0, $474_1 = 0, $474$hi = 0, $477_1 = 0, $477$hi = 0, $483_1 = 0, $483$hi = 0, $487_1 = 0, $488$hi = 0, $489$hi = 0, $492_1 = 0, $492$hi = 0, $493_1 = 0, $493$hi = 0, $500_1 = 0, $500$hi = 0, $506_1 = 0, $506$hi = 0, $508$hi = 0, $509_1 = 0, $509$hi = 0, $510_1 = 0, $510$hi = 0, $511_1 = 0, $511$hi = 0, $513$hi = 0, $517_1 = 0, $518$hi = 0, $519_1 = 0, $519$hi = 0, $520_1 = 0, $520$hi = 0, $529_1 = 0, $529$hi = 0, $534_1 = 0, $534$hi = 0, $535_1 = 0, $535$hi = 0, $536_1 = 0, $536$hi = 0, $541_1 = 0, $541$hi = 0, $545_1 = 0, $546$hi = 0, $547$hi = 0, $551_1 = 0, $552$hi = 0, $553_1 = 0, $553$hi = 0, $554_1 = 0, $554$hi = 0, $561_1 = 0, $561$hi = 0, $566_1 = 0, $566$hi = 0, $571_1 = 0, $571$hi = 0, $574_1 = 0, $574$hi = 0, $577_1 = 0, $578$hi = 0, $581_1 = 0, $582$hi = 0, $583$hi = 0, $586_1 = 0, $587$hi = 0, $589$hi = 0, $590_1 = 0, $590$hi = 0, $594_1 = 0, $595$hi = 0, $596_1 = 0, $596$hi = 0, $597_1 = 0, $597$hi = 0, $598_1 = 0, $598$hi = 0, $605_1 = 0, $605$hi = 0, $608_1 = 0, $608$hi = 0, $611_1 = 0, $613$hi = 0, $614_1 = 0, $614$hi = 0, $618_1 = 0, $619_1 = 0, $619$hi = 0, $620_1 = 0, $620$hi = 0, $622$hi = 0, $623$hi = 0, $625_1 = 0, $626$hi = 0, $627$hi = 0, $631_1 = 0, $632$hi = 0, $637$hi = 0, $646_1 = 0, $647$hi = 0, $648_1 = 0, $648$hi = 0, $651_1 = 0, $651$hi = 0, $657_1 = 0, $657$hi = 0, $658_1 = 0, $658$hi = 0, $662_1 = 0, $662$hi = 0, $667_1 = 0, $668$hi = 0, $669_1 = 0, $669$hi = 0, $670_1 = 0, $670$hi = 0, $672$hi = 0, $673_1 = 0, $673$hi = 0, $674_1 = 0, $674$hi = 0, $676$hi = 0, $677_1 = 0, $677$hi = 0, $678$hi = 0, $681_1 = 0, $681$hi = 0, $682$hi = 0, $685_1 = 0, $685$hi = 0, $687_1 = 0, $687$hi = 0, $689$hi = 0, $578_1 = 0, $691_1 = 0, $691$hi = 0, $694_1 = 0, $694$hi = 0, $695_1 = 0, $695$hi = 0, $696$hi = 0, $699_1 = 0, $699$hi = 0, $700_1 = 0, $700$hi = 0, $702_1 = 0, $702$hi = 0, $705_1 = 0, $707$hi = 0, $708_1 = 0, $708$hi = 0, $709$hi = 0, $710$hi = 0, $720_1 = 0, $720$hi = 0, $722_1 = 0, $722$hi = 0, $724$hi = 0, $734_1 = 0, $735$hi = 0, $736_1 = 0, $736$hi = 0, $739_1 = 0, $739$hi = 0, $740_1 = 0, $740$hi = 0, $745_1 = 0, $745$hi = 0, $746_1 = 0, $746$hi = 0, $748$hi = 0, $754_1 = 0, $754$hi = 0, $759_1 = 0, $760$hi = 0, $761_1 = 0, $761$hi = 0, $762_1 = 0, $762$hi = 0, $764$hi = 0, $765_1 = 0, $765$hi = 0, $766_1 = 0, $766$hi = 0, $768$hi = 0, $769_1 = 0, $769$hi = 0, $770_1 = 0, $770$hi = 0, $775_1 = 0, $775$hi = 0, $776$hi = 0, $779_1 = 0, $779$hi = 0, $781_1 = 0, $781$hi = 0, $784_1 = 0, $784$hi = 0, $786$hi = 0, $579_1 = 0, $788_1 = 0, $788$hi = 0, $789$hi = 0, $792_1 = 0, $792$hi = 0, $793_1 = 0, $793$hi = 0, $794_1 = 0, $794$hi = 0, $796_1 = 0, $796$hi = 0, $799_1 = 0, $801$hi = 0, $802_1 = 0, $802$hi = 0, $803$hi = 0, $804$hi = 0, $820_1 = 0, $820$hi = 0, $821_1 = 0, $821$hi = 0, $823$hi = 0, $825_1 = 0, $827_1 = 0, $827$hi = 0, $829$hi = 0, $833_1 = 0, $837_1 = 0, $838$hi = 0, $842_1 = 0, $843$hi = 0, $852_1 = 0, $852$hi = 0, $853_1 = 0, $853$hi = 0, $855$hi = 0, $857_1 = 0, $859_1 = 0, $859$hi = 0, $861$hi = 0, $865_1 = 0, $869_1 = 0, $870$hi = 0, $874_1 = 0, $875$hi = 0, $876_1 = 0, $876$hi = 0, $879$hi = 0, $880$hi = 0, $896_1 = 0;
  $5_1 = global$0 - 192 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $11_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $470_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $470_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $470_1 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 48;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $471_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $471_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $7_1 = $471_1 & 32767 | 0;
      if (($7_1 + -1 | 0) >>> 0 > 32765 >>> 0) {
       break label$4
      }
      $8_1 = 0;
      if (($6_1 + -1 | 0) >>> 0 < 32766 >>> 0) {
       break label$3
      }
     }
     label$5 : {
      i64toi32_i32$0 = $1$hi;
      $48_1 = !($1_1 | i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147483647;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $13_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $13$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $13_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      $52_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $48_1 : $52_1) {
       break label$5
      }
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = 32768;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $12$hi = i64toi32_i32$0;
      break label$2;
     }
     label$6 : {
      i64toi32_i32$0 = $3$hi;
      $59_1 = !($3_1 | i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$2 = 2147483647;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
      $2_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$1 = 0;
      $63_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $59_1 : $63_1) {
       break label$6
      }
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$0 = 32768;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $12_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $12$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $3$hi;
      $1_1 = $3_1;
      $1$hi = i64toi32_i32$0;
      break label$2;
     }
     label$7 : {
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$1 = $13_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
      $72_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
      $72$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$1 = $72$hi;
      i64toi32_i32$2 = $72_1;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
       break label$7
      }
      label$8 : {
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$3 = $2$hi;
       i64toi32_i32$2 = $2_1;
       i64toi32_i32$1 = 2147418112;
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
       $77_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
       $77$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$2 = $77$hi;
       i64toi32_i32$0 = $77_1;
       i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
       if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
        break label$8
       }
       i64toi32_i32$2 = 0;
       $1_1 = 0;
       $1$hi = i64toi32_i32$2;
       i64toi32_i32$2 = 2147450880;
       $12_1 = 0;
       $12$hi = i64toi32_i32$2;
       break label$2;
      }
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$1 = $12_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $12_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $12$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$3;
      break label$2;
     }
     label$9 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $85_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $85$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $85$hi;
      i64toi32_i32$0 = $85_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$9
      }
      i64toi32_i32$1 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$2;
     }
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break label$1
     }
     label$10 : {
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$10
      }
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$0 = $12_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      $12_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $12$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      break label$2;
     }
     $8_1 = 0;
     label$11 : {
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$1 = $13_1;
      i64toi32_i32$0 = 65535;
      i64toi32_i32$3 = -1;
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$11
      }
      $101_1 = $5_1 + 176 | 0;
      i64toi32_i32$1 = $1$hi;
      $102_1 = $1_1;
      $102$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $11$hi;
      $103_1 = $11_1;
      $103$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $11$hi;
      $8_1 = !($11_1 | i64toi32_i32$1 | 0);
      i64toi32_i32$4 = $8_1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$0 = i64toi32_i32$4 ? $1_1 : $11_1;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
      i64toi32_i32$1 = Math_clz32(i64toi32_i32$3);
      i64toi32_i32$4 = 0;
      if ((i64toi32_i32$1 | 0) == (32 | 0)) {
       $475_1 = Math_clz32(i64toi32_i32$0) + 32 | 0
      } else {
       $475_1 = i64toi32_i32$1
      }
      $110$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      $113$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $110$hi;
      i64toi32_i32$0 = $475_1;
      i64toi32_i32$3 = $113$hi;
      i64toi32_i32$1 = $8_1 << 6 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $8_1 = i64toi32_i32$2;
      i64toi32_i32$5 = $102$hi;
      i64toi32_i32$0 = $103$hi;
      $757($101_1 | 0, $102_1 | 0, i64toi32_i32$5 | 0, $103_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$2 + -15 | 0 | 0);
      $8_1 = 16 - i64toi32_i32$2 | 0;
      i64toi32_i32$4 = $5_1 + 184 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $11_1 = i64toi32_i32$0;
      $11$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $5_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
      $1_1 = i64toi32_i32$5;
      $1$hi = i64toi32_i32$0;
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$5 = 65535;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     $128_1 = $5_1 + 160 | 0;
     i64toi32_i32$4 = $3$hi;
     $129_1 = $3_1;
     $129$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $10$hi;
     $130_1 = $10_1;
     $130$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $10$hi;
     $9_1 = !($10_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$5 = i64toi32_i32$3 ? $3_1 : $10_1;
     i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$4 : i64toi32_i32$0;
     i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$4 | 0) == (32 | 0)) {
      $476_1 = Math_clz32(i64toi32_i32$5) + 32 | 0
     } else {
      $476_1 = i64toi32_i32$4
     }
     $137$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $140$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $137$hi;
     i64toi32_i32$5 = $476_1;
     i64toi32_i32$1 = $140$hi;
     i64toi32_i32$4 = $9_1 << 6 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $9_1 = i64toi32_i32$0;
     i64toi32_i32$2 = $129$hi;
     i64toi32_i32$5 = $130$hi;
     $757($128_1 | 0, $129_1 | 0, i64toi32_i32$2 | 0, $130_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 + -15 | 0 | 0);
     $8_1 = (i64toi32_i32$0 + $8_1 | 0) + -16 | 0;
     i64toi32_i32$3 = $5_1 + 168 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$5;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 160 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 164 | 0) >> 2] | 0;
     $3_1 = i64toi32_i32$2;
     $3$hi = i64toi32_i32$5;
    }
    $155_1 = $5_1 + 144 | 0;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 49;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $478_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     $478_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    $157_1 = $478_1;
    $157$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$3 = 65536;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $14_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $14$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $14_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 15;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
     $479_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $479_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    }
    $161$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $157$hi;
    i64toi32_i32$3 = $157_1;
    i64toi32_i32$2 = $161$hi;
    i64toi32_i32$4 = $479_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $2_1 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 1963258675;
    i64toi32_i32$5 = -102865788;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$4 = 0;
    $756($155_1 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$5 = ($5_1 + 144 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $172_1 = i64toi32_i32$4;
    $172$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $172$hi;
    i64toi32_i32$0 = $172_1;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
    $173$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $173$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = 0;
    $756($5_1 + 128 | 0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $176_1 = $5_1 + 112 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 128 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 132 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $480_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $480_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $179_1 = $480_1;
    $179$hi = i64toi32_i32$0;
    i64toi32_i32$2 = ($5_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $481_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $481_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $184$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $179$hi;
    i64toi32_i32$5 = $179_1;
    i64toi32_i32$2 = $184$hi;
    i64toi32_i32$1 = $481_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = 0;
    $756($176_1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$5 = ($5_1 + 112 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $194_1 = i64toi32_i32$1;
    $194$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $194$hi;
    i64toi32_i32$2 = $194_1;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
    $195$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $195$hi;
    i64toi32_i32$2 = 0;
    $756($5_1 + 96 | 0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    $197_1 = $5_1 + 80 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 96 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 100 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 63;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $482_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
     $482_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    $200_1 = $482_1;
    $200$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($5_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $484_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
     $484_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $205$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $200$hi;
    i64toi32_i32$5 = $200_1;
    i64toi32_i32$0 = $205$hi;
    i64toi32_i32$3 = $484_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    $756($197_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$5 = ($5_1 + 80 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $215_1 = i64toi32_i32$3;
    $215$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = $215$hi;
    i64toi32_i32$0 = $215_1;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
    $216$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $216$hi;
    i64toi32_i32$0 = 0;
    $756($5_1 + 64 | 0 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $218_1 = $5_1 + 48 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $485_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $485_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
    }
    $221_1 = $485_1;
    $221$hi = i64toi32_i32$0;
    i64toi32_i32$2 = ($5_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $486_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $486_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $226$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $221$hi;
    i64toi32_i32$5 = $221_1;
    i64toi32_i32$2 = $226$hi;
    i64toi32_i32$4 = $486_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$4 = 0;
    $756($218_1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$5 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $236_1 = i64toi32_i32$4;
    $236$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $236$hi;
    i64toi32_i32$2 = $236_1;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    $237$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $237$hi;
    i64toi32_i32$2 = 0;
    $756($5_1 + 32 | 0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    $239_1 = $5_1 + 16 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $488_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $488_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $242_1 = $488_1;
    $242$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($5_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $489_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $489_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $247$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $242$hi;
    i64toi32_i32$5 = $242_1;
    i64toi32_i32$0 = $247$hi;
    i64toi32_i32$1 = $489_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    $756($239_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$5 = ($5_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $256_1 = i64toi32_i32$1;
    $256$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $256$hi;
    i64toi32_i32$0 = $256_1;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    $257$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $257$hi;
    i64toi32_i32$0 = 0;
    $756($5_1 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $6_1 = $8_1 + ($7_1 - $6_1 | 0) | 0;
    label$12 : {
     label$13 : {
      i64toi32_i32$5 = $5_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 63;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $490_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
       $490_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
      }
      $265_1 = $490_1;
      $265$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $5_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       $491_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
       $491_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      }
      $269$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $265$hi;
      i64toi32_i32$5 = $265_1;
      i64toi32_i32$2 = $269$hi;
      i64toi32_i32$3 = $491_1;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $13_1 = i64toi32_i32$1;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $4_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $4$hi = i64toi32_i32$0;
      $274_1 = $4_1;
      $274$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$4 = $2_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $494_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
       $494_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
      }
      $15_1 = $494_1;
      $15$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $274$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = __wasm_i64_mul($274_1 | 0, i64toi32_i32$2 | 0, $15_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $16_1 = i64toi32_i32$4;
      $16$hi = i64toi32_i32$2;
      $279_1 = i64toi32_i32$4;
      $279$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$0 = $13_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $495_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
       $495_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
      }
      $13_1 = $495_1;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $17_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $17$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $286_1 = i64toi32_i32$2;
      $286$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $279$hi;
      i64toi32_i32$4 = $279_1;
      i64toi32_i32$2 = $286$hi;
      i64toi32_i32$3 = $286_1;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $2_1 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $496_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
       $496_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
      }
      $289_1 = $496_1;
      $289$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$3 = $16_1;
      $292_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = $292_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
       $497_1 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
       $497_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
      }
      $294$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $289$hi;
      i64toi32_i32$1 = $289_1;
      i64toi32_i32$3 = $294$hi;
      i64toi32_i32$0 = $497_1;
      i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
      $295_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $295$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $298_1 = i64toi32_i32$1;
      $298$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $295$hi;
      i64toi32_i32$4 = $295_1;
      i64toi32_i32$1 = $298$hi;
      i64toi32_i32$0 = $298_1;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $299_1 = i64toi32_i32$2;
      $299$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
       $498_1 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
       $498_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
      }
      $15_1 = $498_1;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$3 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$4 | 0, $17_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $305_1 = i64toi32_i32$3;
      $305$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$3 = $305$hi;
      i64toi32_i32$0 = $305_1;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $2_1 = i64toi32_i32$1;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$0 = $15_1;
      $309_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $310$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $299$hi;
      i64toi32_i32$0 = $299_1;
      i64toi32_i32$2 = $310$hi;
      i64toi32_i32$5 = $309_1;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $311_1 = i64toi32_i32$3;
      $311$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      $312_1 = $2_1;
      $312$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      $313_1 = $4_1;
      $313$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$4 = $3_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 17;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $499_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
       $499_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
      }
      i64toi32_i32$1 = $499_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
      $16_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
      $16$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $313$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = __wasm_i64_mul($313_1 | 0, i64toi32_i32$4 | 0, $16_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $17_1 = i64toi32_i32$1;
      $17$hi = i64toi32_i32$4;
      $319_1 = i64toi32_i32$1;
      $319$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $13$hi;
      $320_1 = $13_1;
      $320$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 15;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       $501_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
       $501_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      }
      i64toi32_i32$4 = $501_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = -32768;
      i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
      $18_1 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $320$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = __wasm_i64_mul($320_1 | 0, i64toi32_i32$0 | 0, $18_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $325_1 = i64toi32_i32$4;
      $325$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $319$hi;
      i64toi32_i32$1 = $319_1;
      i64toi32_i32$4 = $325$hi;
      i64toi32_i32$5 = $325_1;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $15_1 = i64toi32_i32$2;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
       $502_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
       $502_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      }
      $19_1 = $502_1;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, $18_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $332_1 = i64toi32_i32$0;
      $332$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$3 = $19_1;
      i64toi32_i32$0 = $332$hi;
      i64toi32_i32$5 = $332_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $333$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $333$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $335_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $336_1 = $335_1;
      $336$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $503_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
       $503_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
      }
      $338_1 = $503_1;
      $338$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$1 = $15_1;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$3 = $17_1;
      $341_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = $341_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
       $504_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
       $504_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      }
      $343$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $338$hi;
      i64toi32_i32$1 = $338_1;
      i64toi32_i32$3 = $343$hi;
      i64toi32_i32$5 = $504_1;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $344_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      $344$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $347_1 = i64toi32_i32$1;
      $347$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $344$hi;
      i64toi32_i32$2 = $344_1;
      i64toi32_i32$1 = $347$hi;
      i64toi32_i32$5 = $347_1;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $348$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $336$hi;
      i64toi32_i32$3 = $336_1;
      i64toi32_i32$2 = $348$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $349$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $312$hi;
      i64toi32_i32$4 = $312_1;
      i64toi32_i32$3 = $349$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $15_1 = i64toi32_i32$2;
      $15$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$5 = $2_1;
      $353_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $354$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $311$hi;
      i64toi32_i32$5 = $311_1;
      i64toi32_i32$1 = $354$hi;
      i64toi32_i32$4 = $353_1;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $355$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$0 = $15_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = 0;
      $357_1 = (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = 0;
      $358$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $355$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$2 = $358$hi;
      i64toi32_i32$5 = $357_1;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $359$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = $359$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
      $16_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
      $16$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $17_1 = i64toi32_i32$3;
      $17$hi = i64toi32_i32$0;
      $366_1 = i64toi32_i32$3;
      $366$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $18_1 = i64toi32_i32$3;
      $18$hi = i64toi32_i32$0;
      $370_1 = i64toi32_i32$3;
      $370$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      $371_1 = $4_1;
      $371$hi = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $505_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $505_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $19_1 = $505_1;
      $19$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $371$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = __wasm_i64_mul($371_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $375_1 = i64toi32_i32$1;
      $375$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $370$hi;
      i64toi32_i32$0 = $370_1;
      i64toi32_i32$1 = $375$hi;
      i64toi32_i32$5 = $375_1;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $2_1 = i64toi32_i32$4;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
       $507_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
       $507_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
      }
      $378$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $366$hi;
      i64toi32_i32$2 = $366_1;
      i64toi32_i32$3 = $378$hi;
      i64toi32_i32$5 = $507_1;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$5 = $17_1;
      i64toi32_i32$0 = 0;
      $383_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      $383$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$5 = $2_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $508_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
       $508_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
      }
      $385_1 = $508_1;
      $385$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $18_1;
      $388_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = $388_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
       $512_1 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
       $512_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
      }
      $390$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $385$hi;
      i64toi32_i32$0 = $385_1;
      i64toi32_i32$2 = $390$hi;
      i64toi32_i32$5 = $512_1;
      i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
      $391_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
      $391$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$2 | 0, $19_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $394_1 = i64toi32_i32$0;
      $394$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $391$hi;
      i64toi32_i32$4 = $391_1;
      i64toi32_i32$0 = $394$hi;
      i64toi32_i32$5 = $394_1;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $395$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $383$hi;
      i64toi32_i32$2 = $383_1;
      i64toi32_i32$4 = $395$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $396_1 = i64toi32_i32$0;
      $396$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $16$hi;
      $397_1 = $16_1;
      $397$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
      $2_1 = i64toi32_i32$4;
      $2$hi = i64toi32_i32$0;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $513_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
       $513_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
      }
      $15_1 = $513_1;
      $15$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $17_1 = i64toi32_i32$3;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $18_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
      $18$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$0 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $410_1 = i64toi32_i32$0;
      $410$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$1 = $17_1;
      i64toi32_i32$0 = $410$hi;
      i64toi32_i32$5 = $410_1;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$4;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
       $514_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
       $514_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      }
      $19_1 = $514_1;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $417_1 = i64toi32_i32$3;
      $417$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$4 = $19_1;
      i64toi32_i32$3 = $417$hi;
      i64toi32_i32$5 = $417_1;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $418$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $418$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $420_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $421_1 = $420_1;
      $421$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$5 = $2_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$4 = 32;
      i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $515_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
       $515_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
      }
      $423_1 = $515_1;
      $423$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$4 = $17_1;
      $426_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$4 = $426_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
       $516_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
       $516_1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
      }
      $428$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $423$hi;
      i64toi32_i32$1 = $423_1;
      i64toi32_i32$4 = $428$hi;
      i64toi32_i32$5 = $516_1;
      i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
      $429_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      $429$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $432_1 = i64toi32_i32$1;
      $432$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $429$hi;
      i64toi32_i32$2 = $429_1;
      i64toi32_i32$1 = $432$hi;
      i64toi32_i32$5 = $432_1;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $433$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $421$hi;
      i64toi32_i32$4 = $421_1;
      i64toi32_i32$2 = $433$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $434$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $397$hi;
      i64toi32_i32$0 = $397_1;
      i64toi32_i32$4 = $434$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$5 = $16_1;
      $438_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $439$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $396$hi;
      i64toi32_i32$5 = $396_1;
      i64toi32_i32$1 = $439$hi;
      i64toi32_i32$0 = $438_1;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $440_1 = i64toi32_i32$4;
      $440$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$5 = -1;
      i64toi32_i32$0 = -2;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $17_1 = i64toi32_i32$1;
      $17$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$0 = $2_1;
      $445_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $446$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $440$hi;
      i64toi32_i32$0 = $440_1;
      i64toi32_i32$4 = $446$hi;
      i64toi32_i32$3 = $445_1;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$0 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $15_1 = i64toi32_i32$4;
      $15$hi = i64toi32_i32$5;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
      $2_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $2$hi = i64toi32_i32$2;
      $451_1 = $2_1;
      $451$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$5 = $1_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 62;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $518_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
       $518_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
      }
      $453_1 = $518_1;
      $453$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$2 = $11_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 2;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
       $521_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
       $521_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      }
      $455$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $453$hi;
      i64toi32_i32$1 = $453_1;
      i64toi32_i32$2 = $455$hi;
      i64toi32_i32$3 = $521_1;
      i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      $4_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $451$hi;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = __wasm_i64_mul($451_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $16_1 = i64toi32_i32$5;
      $16$hi = i64toi32_i32$1;
      $460_1 = i64toi32_i32$5;
      $460$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 30;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $522_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
       $522_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
      }
      i64toi32_i32$1 = $522_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
      $13_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $13$hi = i64toi32_i32$2;
      $464_1 = $13_1;
      $464$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $523_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
       $523_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
      }
      $15_1 = $523_1;
      $15$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $464$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = __wasm_i64_mul($464_1 | 0, i64toi32_i32$1 | 0, $15_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $468_1 = i64toi32_i32$5;
      $468$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $460$hi;
      i64toi32_i32$2 = $460_1;
      i64toi32_i32$5 = $468$hi;
      i64toi32_i32$3 = $468_1;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $18_1 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$3 = $16_1;
      $472_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $473_1 = $472_1;
      $473$hi = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$4;
      $474_1 = i64toi32_i32$0;
      $474$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$3 = $17_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $524_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
       $524_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
      }
      $16_1 = $524_1;
      $16$hi = i64toi32_i32$4;
      $477_1 = $16_1;
      $477$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$1 = $11_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 30;
      i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $525_1 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
       $525_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
      }
      i64toi32_i32$4 = $525_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = -262145;
      i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 262144;
      i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
      $11_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $11$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $477$hi;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = __wasm_i64_mul($477_1 | 0, i64toi32_i32$4 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $483_1 = i64toi32_i32$3;
      $483$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $474$hi;
      i64toi32_i32$1 = $474_1;
      i64toi32_i32$3 = $483$hi;
      i64toi32_i32$2 = $483_1;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$2 = $18_1;
      $487_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $488$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $473$hi;
      i64toi32_i32$2 = $473_1;
      i64toi32_i32$0 = $488$hi;
      i64toi32_i32$1 = $487_1;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $489$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $492_1 = i64toi32_i32$2;
      $492$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $489$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$2 = $492$hi;
      i64toi32_i32$1 = $492_1;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $493_1 = i64toi32_i32$0;
      $493$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $11_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $20_1 = i64toi32_i32$4;
      $20$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $500_1 = i64toi32_i32$4;
      $500$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$5 = $20_1;
      i64toi32_i32$4 = $500$hi;
      i64toi32_i32$1 = $500_1;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $18_1 = i64toi32_i32$2;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$1 = $20_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $526_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
       $526_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $506_1 = $526_1;
      $506$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = $18_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $527_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $527_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      $508$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $506$hi;
      i64toi32_i32$0 = $506_1;
      i64toi32_i32$3 = $508$hi;
      i64toi32_i32$5 = $527_1;
      i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      $509_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
      $509$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $493$hi;
      i64toi32_i32$1 = $493_1;
      i64toi32_i32$0 = $509$hi;
      i64toi32_i32$5 = $509_1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $510_1 = i64toi32_i32$4;
      $510$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      $511_1 = $19_1;
      $511$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$3 = $18_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
       $528_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
       $528_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      }
      $513$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $511$hi;
      i64toi32_i32$2 = $511_1;
      i64toi32_i32$3 = $513$hi;
      i64toi32_i32$5 = $528_1;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $18_1 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $517_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $518$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $510$hi;
      i64toi32_i32$5 = $510_1;
      i64toi32_i32$4 = $518$hi;
      i64toi32_i32$2 = $517_1;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $519_1 = i64toi32_i32$3;
      $519$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      $520_1 = $18_1;
      $520$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $20_1 = i64toi32_i32$5;
      $20$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$1 = $17_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = -1;
      i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
      $17_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $17$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $529_1 = i64toi32_i32$1;
      $529$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$0 = $20_1;
      i64toi32_i32$1 = $529$hi;
      i64toi32_i32$2 = $529_1;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$2 = $20_1;
      i64toi32_i32$5 = 0;
      $534_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      $534$hi = i64toi32_i32$5;
      i64toi32_i32$5 = i64toi32_i32$3;
      $535_1 = i64toi32_i32$4;
      $535$hi = i64toi32_i32$3;
      i64toi32_i32$5 = $2$hi;
      $536_1 = $2_1;
      $536$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 2;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       $530_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
       $530_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      }
      i64toi32_i32$5 = $530_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = -4;
      i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
      $20_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
      $20$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $536$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = __wasm_i64_mul($536_1 | 0, i64toi32_i32$2 | 0, $20_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $541_1 = i64toi32_i32$5;
      $541$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $535$hi;
      i64toi32_i32$3 = $535_1;
      i64toi32_i32$5 = $541$hi;
      i64toi32_i32$0 = $541_1;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $21_1 = i64toi32_i32$1;
      $21$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$0 = $19_1;
      $545_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $546$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $534$hi;
      i64toi32_i32$0 = $534_1;
      i64toi32_i32$4 = $546$hi;
      i64toi32_i32$3 = $545_1;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $547$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $520$hi;
      i64toi32_i32$2 = $520_1;
      i64toi32_i32$0 = $547$hi;
      i64toi32_i32$3 = i64toi32_i32$5;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$3 = $18_1;
      $551_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $552$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $519$hi;
      i64toi32_i32$3 = $519_1;
      i64toi32_i32$5 = $552$hi;
      i64toi32_i32$2 = $551_1;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $553_1 = i64toi32_i32$0;
      $553$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      $554_1 = $19_1;
      $554$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$4 | 0, $15_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $18_1 = i64toi32_i32$3;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$4 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $561_1 = i64toi32_i32$3;
      $561$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$1 = $18_1;
      i64toi32_i32$3 = $561$hi;
      i64toi32_i32$2 = $561_1;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $15_1 = i64toi32_i32$5;
      $15$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $566_1 = i64toi32_i32$1;
      $566$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$1 = $566$hi;
      i64toi32_i32$2 = $566_1;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $4_1 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $13_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $571_1 = i64toi32_i32$4;
      $571$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$4 = $571$hi;
      i64toi32_i32$2 = $571_1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $2_1 = i64toi32_i32$1;
      $2$hi = i64toi32_i32$3;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $531_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $531_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
      }
      $574_1 = $531_1;
      $574$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$3 = $15_1;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $18_1;
      $577_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $578$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$5 = $15_1;
      $581_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $582$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $578$hi;
      i64toi32_i32$5 = $577_1;
      i64toi32_i32$3 = $582$hi;
      i64toi32_i32$0 = $581_1;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $583$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$0 = $4_1;
      $586_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $587$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $583$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$1 = $587$hi;
      i64toi32_i32$5 = $586_1;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       $532_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
       $532_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      }
      $589$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $574$hi;
      i64toi32_i32$4 = $574_1;
      i64toi32_i32$2 = $589$hi;
      i64toi32_i32$5 = $532_1;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $590_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $590$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $554$hi;
      i64toi32_i32$0 = $554_1;
      i64toi32_i32$4 = $590$hi;
      i64toi32_i32$5 = $590_1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $15_1 = i64toi32_i32$1;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $594_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $595$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $553$hi;
      i64toi32_i32$5 = $553_1;
      i64toi32_i32$3 = $595$hi;
      i64toi32_i32$0 = $594_1;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $596_1 = i64toi32_i32$4;
      $596$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      $597_1 = $15_1;
      $597$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $21$hi;
      $598_1 = $21_1;
      $598$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$1 | 0, $20_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $4_1 = i64toi32_i32$5;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$1 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $605_1 = i64toi32_i32$5;
      $605$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$5 = $605$hi;
      i64toi32_i32$0 = $605_1;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $13_1 = i64toi32_i32$3;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $533_1 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
       $533_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
      }
      $608_1 = $533_1;
      $608$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$4 = $13_1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$0 = $4_1;
      $611_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = $611_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
       $537_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
       $537_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
      }
      $613$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $608$hi;
      i64toi32_i32$4 = $608_1;
      i64toi32_i32$0 = $613$hi;
      i64toi32_i32$1 = $537_1;
      i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      $614_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
      $614$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $598$hi;
      i64toi32_i32$2 = $598_1;
      i64toi32_i32$4 = $614$hi;
      i64toi32_i32$1 = $614_1;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $4_1 = i64toi32_i32$5;
      $4$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$1 = $21_1;
      $618_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $619_1 = $618_1;
      $619$hi = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$3;
      $620_1 = i64toi32_i32$5;
      $620$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $538_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $538_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $622$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $620$hi;
      i64toi32_i32$0 = $620_1;
      i64toi32_i32$1 = $622$hi;
      i64toi32_i32$2 = $538_1;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $623$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = $623$hi;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$2 = $4_1;
      $625_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $626$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $619$hi;
      i64toi32_i32$2 = $619_1;
      i64toi32_i32$5 = $626$hi;
      i64toi32_i32$0 = $625_1;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $627$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $597$hi;
      i64toi32_i32$3 = $597_1;
      i64toi32_i32$2 = $627$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $4_1 = i64toi32_i32$5;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$0 = $15_1;
      $631_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $632$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $596$hi;
      i64toi32_i32$0 = $596_1;
      i64toi32_i32$1 = $632$hi;
      i64toi32_i32$3 = $631_1;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$5;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$0 = 131071;
      i64toi32_i32$3 = -1;
      if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$13
      }
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 49;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
       $539_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
       $539_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
      }
      $637$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$4 = $4_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = -1;
      i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $1_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $1$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
      $13_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $15_1 = i64toi32_i32$5;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$3 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 0;
      $646_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$3 = 0;
      $647$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $637$hi;
      i64toi32_i32$0 = $539_1;
      i64toi32_i32$4 = $647$hi;
      i64toi32_i32$5 = $646_1;
      i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
      $648_1 = i64toi32_i32$1;
      $648$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
      $17_1 = i64toi32_i32$4;
      $17$hi = i64toi32_i32$1;
      $651_1 = i64toi32_i32$4;
      $651$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $540_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
       $540_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
      }
      $15_1 = $540_1;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$2 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $18_1 = i64toi32_i32$2;
      $18$hi = i64toi32_i32$3;
      $657_1 = i64toi32_i32$2;
      $657$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      $658_1 = $1_1;
      $658$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $542_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
       $542_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
      }
      $16_1 = $542_1;
      $16$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $658$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = __wasm_i64_mul($658_1 | 0, i64toi32_i32$2 | 0, $16_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $662_1 = i64toi32_i32$1;
      $662$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $657$hi;
      i64toi32_i32$3 = $657_1;
      i64toi32_i32$1 = $662$hi;
      i64toi32_i32$5 = $662_1;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $11_1 = i64toi32_i32$0;
      $11$hi = i64toi32_i32$4;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       $543_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
       $543_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      }
      $19_1 = $543_1;
      $19$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $651$hi;
      i64toi32_i32$4 = $651_1;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $667_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $668$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $648$hi;
      i64toi32_i32$5 = $648_1;
      i64toi32_i32$3 = $668$hi;
      i64toi32_i32$2 = $667_1;
      i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
      $669_1 = i64toi32_i32$1;
      $669$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      $670_1 = $4_1;
      $670$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$4 = $14_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $544_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
       $544_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
      }
      $672$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $670$hi;
      i64toi32_i32$4 = $672$hi;
      i64toi32_i32$4 = __wasm_i64_mul($670_1 | 0, i64toi32_i32$5 | 0, $544_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $673_1 = i64toi32_i32$4;
      $673$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $3$hi;
      $674_1 = $3_1;
      $674$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $546_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
       $546_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
      }
      $676$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $674$hi;
      i64toi32_i32$0 = $676$hi;
      i64toi32_i32$0 = __wasm_i64_mul($674_1 | 0, i64toi32_i32$4 | 0, $546_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $677_1 = i64toi32_i32$0;
      $677$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $673$hi;
      i64toi32_i32$5 = $673_1;
      i64toi32_i32$0 = $677$hi;
      i64toi32_i32$2 = $677_1;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $678$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $16_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $681_1 = i64toi32_i32$5;
      $681$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $678$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$5 = $681$hi;
      i64toi32_i32$2 = $681_1;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $682$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$4 = $10$hi;
      i64toi32_i32$4 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $685_1 = i64toi32_i32$4;
      $685$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $682$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$4 = $685$hi;
      i64toi32_i32$2 = $685_1;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      i64toi32_i32$3 = i64toi32_i32$5;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
       $547_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $547_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      }
      $687_1 = $547_1;
      $687$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $689$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $689$hi;
      $578_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$0 = __wasm_i64_mul($578_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $691_1 = i64toi32_i32$0;
      $691$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$1 = $10_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = -1;
      i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
      $694_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $694$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$1 = $694$hi;
      i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $694_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $695_1 = i64toi32_i32$1;
      $695$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $691$hi;
      i64toi32_i32$3 = $691_1;
      i64toi32_i32$1 = $695$hi;
      i64toi32_i32$2 = $695_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $696$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$5 | 0, $16_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $699_1 = i64toi32_i32$3;
      $699$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $696$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$3 = $699$hi;
      i64toi32_i32$2 = $699_1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $700_1 = i64toi32_i32$1;
      $700$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$5 = $11_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $548_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
       $548_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
      }
      $702_1 = $548_1;
      $702$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$4 = $11_1;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $18_1;
      $705_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = $705_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
       $549_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
       $549_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
      }
      $707$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $702$hi;
      i64toi32_i32$4 = $702_1;
      i64toi32_i32$2 = $707$hi;
      i64toi32_i32$5 = $549_1;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $708_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $708$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $700$hi;
      i64toi32_i32$0 = $700_1;
      i64toi32_i32$4 = $708$hi;
      i64toi32_i32$5 = $708_1;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $709$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $687$hi;
      i64toi32_i32$2 = $687_1;
      i64toi32_i32$0 = $709$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $710$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $669$hi;
      i64toi32_i32$1 = $669_1;
      i64toi32_i32$2 = $710$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
      $13_1 = i64toi32_i32$0;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$3 = $17_1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$5 = $19_1;
      i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
      $1_1 = i64toi32_i32$2;
      $1$hi = i64toi32_i32$0;
      $6_1 = $6_1 + -1 | 0;
      break label$12;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$4 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 33;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $550_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
      $550_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $16_1 = $550_1;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 48;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
      $552_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
      $552_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     }
     $720_1 = $552_1;
     $720$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $555_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
      $555_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $722_1 = $555_1;
     $722$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      $556_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
      $556_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     }
     $724$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $722$hi;
     i64toi32_i32$0 = $722_1;
     i64toi32_i32$4 = $724$hi;
     i64toi32_i32$5 = $556_1;
     i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = -1;
     i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
     $1_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $13_1 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
     $13$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $15_1 = i64toi32_i32$4;
     $15$hi = i64toi32_i32$3;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 0;
     $734_1 = (i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = 0;
     $735$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $720$hi;
     i64toi32_i32$5 = $720_1;
     i64toi32_i32$3 = $735$hi;
     i64toi32_i32$4 = $734_1;
     i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
     $736_1 = i64toi32_i32$1;
     $736$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$4 = $15_1;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$3;
     $11$hi = i64toi32_i32$1;
     $739_1 = i64toi32_i32$3;
     $739$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     $740_1 = $1_1;
     $740$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $557_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      $557_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
     }
     $15_1 = $557_1;
     $15$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $740$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = __wasm_i64_mul($740_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $17_1 = i64toi32_i32$2;
     $17$hi = i64toi32_i32$0;
     $745_1 = i64toi32_i32$2;
     $745$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $16$hi;
     $746_1 = $16_1;
     $746$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = 31;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      $558_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $558_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     }
     $748$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $746$hi;
     i64toi32_i32$0 = $746_1;
     i64toi32_i32$1 = $748$hi;
     i64toi32_i32$4 = $558_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $18_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
     $18$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $19_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $754_1 = i64toi32_i32$2;
     $754$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $745$hi;
     i64toi32_i32$1 = $745_1;
     i64toi32_i32$2 = $754$hi;
     i64toi32_i32$4 = $754_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $16_1 = i64toi32_i32$5;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      $559_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
      $559_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
     }
     $20_1 = $559_1;
     $20$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $739$hi;
     i64toi32_i32$3 = $739_1;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$4 = $20_1;
     $759_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $760$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $736$hi;
     i64toi32_i32$4 = $736_1;
     i64toi32_i32$1 = $760$hi;
     i64toi32_i32$0 = $759_1;
     i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $761_1 = i64toi32_i32$2;
     $761$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     $762_1 = $4_1;
     $762$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $560_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $560_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $764$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $762$hi;
     i64toi32_i32$3 = $764$hi;
     i64toi32_i32$3 = __wasm_i64_mul($762_1 | 0, i64toi32_i32$4 | 0, $560_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $765_1 = i64toi32_i32$3;
     $765$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     $766_1 = $3_1;
     $766$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$5 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 33;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $562_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
      $562_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
     }
     $768$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $766$hi;
     i64toi32_i32$5 = $768$hi;
     i64toi32_i32$5 = __wasm_i64_mul($766_1 | 0, i64toi32_i32$3 | 0, $562_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $769_1 = i64toi32_i32$5;
     $769$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $765$hi;
     i64toi32_i32$4 = $765_1;
     i64toi32_i32$5 = $769$hi;
     i64toi32_i32$0 = $769_1;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $770_1 = i64toi32_i32$1;
     $770$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $563_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      $563_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
     }
     $2_1 = $563_1;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$4 | 0, $15_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $775_1 = i64toi32_i32$3;
     $775$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $770$hi;
     i64toi32_i32$2 = $770_1;
     i64toi32_i32$3 = $775$hi;
     i64toi32_i32$0 = $775_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $776$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $779_1 = i64toi32_i32$2;
     $779$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $776$hi;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$2 = $779$hi;
     i64toi32_i32$0 = $779_1;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      $564_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
      $564_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     }
     $781_1 = $564_1;
     $781$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$1 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$4 | 0, $15_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $784_1 = i64toi32_i32$1;
     $784$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$5 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
     $786$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $786$hi;
     $579_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = __wasm_i64_mul($579_1 | 0, i64toi32_i32$1 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $788_1 = i64toi32_i32$5;
     $788$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $784$hi;
     i64toi32_i32$4 = $784_1;
     i64toi32_i32$5 = $788$hi;
     i64toi32_i32$0 = $788_1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $789$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
     $792_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $792$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$1 = $792$hi;
     i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$4 | 0, $792_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $793_1 = i64toi32_i32$1;
     $793$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $789$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$1 = $793$hi;
     i64toi32_i32$0 = $793_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $794_1 = i64toi32_i32$5;
     $794$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $565_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      $565_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $796_1 = $565_1;
     $796$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $17$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$2 = $16_1;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$0 = $17_1;
     $799_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = $799_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
      $567_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
      $567_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     }
     $801$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $796$hi;
     i64toi32_i32$2 = $796_1;
     i64toi32_i32$0 = $801$hi;
     i64toi32_i32$4 = $567_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $802_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $802$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $794$hi;
     i64toi32_i32$3 = $794_1;
     i64toi32_i32$2 = $802$hi;
     i64toi32_i32$4 = $802_1;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $803$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $781$hi;
     i64toi32_i32$0 = $781_1;
     i64toi32_i32$3 = $803$hi;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $804$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $761$hi;
     i64toi32_i32$5 = $761_1;
     i64toi32_i32$0 = $804$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
     $13_1 = i64toi32_i32$3;
     $13$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$1 = $11_1;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$4 = $20_1;
     i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
     $1_1 = i64toi32_i32$0;
     $1$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     $2$hi = i64toi32_i32$3;
    }
    label$14 : {
     if (($6_1 | 0) < (16384 | 0)) {
      break label$14
     }
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $12_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$2;
    }
    $7_1 = $6_1 + 16383 | 0;
    label$15 : {
     if (($6_1 | 0) > (-16383 | 0)) {
      break label$15
     }
     label$16 : {
      if ($7_1) {
       break label$16
      }
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$2 = 65535;
      i64toi32_i32$4 = -1;
      i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $820_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
      $820$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $4$hi;
      $821_1 = $4_1;
      $821$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 1;
      i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
       $568_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
       $568_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      }
      $823$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $823$hi;
      i64toi32_i32$2 = $568_1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$4 = $3_1;
      $825_1 = i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$4 = $13_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 1;
      i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
       $569_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
       $569_1 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
      }
      $827_1 = $569_1;
      $827$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = 63;
      i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $570_1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
       $570_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
      }
      $829$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $827$hi;
      i64toi32_i32$3 = $827_1;
      i64toi32_i32$2 = $829$hi;
      i64toi32_i32$1 = $570_1;
      i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
      $1_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$4 = $1_1;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$1 = $14_1;
      $833_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$3 = $14_1;
      $837_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $825_1 : $833_1;
      i64toi32_i32$1 = 0;
      $838$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $821$hi;
      i64toi32_i32$3 = $821_1;
      i64toi32_i32$4 = $838$hi;
      i64toi32_i32$2 = $837_1;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $1_1 = i64toi32_i32$5;
      $1$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$2 = $4_1;
      $842_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $843$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $820$hi;
      i64toi32_i32$2 = $820_1;
      i64toi32_i32$0 = $843$hi;
      i64toi32_i32$3 = $842_1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $3_1 = i64toi32_i32$4;
      $3$hi = i64toi32_i32$5;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = 65536;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
      if (!(i64toi32_i32$1 & i64toi32_i32$3 | 0 | i64toi32_i32$2 | 0)) {
       break label$16
      }
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$3 = $12_1;
      i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $12_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      $12$hi = i64toi32_i32$1;
      break label$2;
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$2;
    }
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$5 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $852_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $852$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    $853_1 = $4_1;
    $853$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     $572_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
     $572_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    }
    $855$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $855$hi;
    i64toi32_i32$5 = $572_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$3 = $3_1;
    $857_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$5 = $13$hi;
    i64toi32_i32$3 = $13_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     $573_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
     $573_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    }
    $859_1 = $573_1;
    $859$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $575_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $575_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $861$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $859$hi;
    i64toi32_i32$2 = $859_1;
    i64toi32_i32$5 = $861$hi;
    i64toi32_i32$1 = $575_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $1_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $1$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$1 = $14_1;
    $865_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$5;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$5;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $14_1;
    $869_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) | 0 ? $857_1 : $865_1;
    i64toi32_i32$1 = 0;
    $870$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $853$hi;
    i64toi32_i32$2 = $853_1;
    i64toi32_i32$3 = $870$hi;
    i64toi32_i32$5 = $869_1;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $1_1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = $4_1;
    $874_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$1 = 0;
    $875$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $852$hi;
    i64toi32_i32$5 = $852_1;
    i64toi32_i32$4 = $875$hi;
    i64toi32_i32$2 = $874_1;
    i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $876_1 = i64toi32_i32$3;
    $876$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $576_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $576_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $879$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $876$hi;
    i64toi32_i32$0 = $876_1;
    i64toi32_i32$1 = $879$hi;
    i64toi32_i32$2 = $576_1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $880$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$3 = $880$hi;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$2 = $12_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $12_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $12$hi = i64toi32_i32$0;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $0_1;
   HEAP32[i64toi32_i32$5 >> 2] = $1_1;
   HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $12$hi;
   HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $12_1;
   HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
   global$0 = $5_1 + 192 | 0;
   return;
  }
  i64toi32_i32$5 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$5 >> 2] = 0;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $3_1;
  i64toi32_i32$5 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
  i64toi32_i32$1 = !(i64toi32_i32$3 | i64toi32_i32$2 | 0 | i64toi32_i32$5 | 0);
  i64toi32_i32$5 = 2147450880;
  i64toi32_i32$3 = $12$hi;
  i64toi32_i32$2 = i64toi32_i32$1 ? 0 : $12_1;
  i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$3;
  $896_1 = i64toi32_i32$2;
  i64toi32_i32$2 = $0_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $896_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $5_1 + 192 | 0;
 }
 
 function $769($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $4$hi = 0, $5$hi = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0, $43_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $17_1 = 0, $17$hi = 0, $19$hi = 0, $34_1 = 0, $34$hi = 0, $37_1 = 0, $39_1 = 0, $44_1 = 0, $44$hi = 0, $46$hi = 0, $74_1 = 0, $74$hi = 0, $78$hi = 0, $81_1 = 0, $81$hi = 0, $83_1 = 0, $83$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $90$hi = 0, $100$hi = 0, $107_1 = 0, $107$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $43_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $43_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17_1 = $43_1;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $45_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $45_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $19$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$4 = $17_1;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$1 = $45_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$5;
    label$3 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0_1;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$1
    }
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $34_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $34$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$3 = $34$hi;
    i64toi32_i32$2 = $34_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$1;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $37_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$2 = 0;
    $39_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) | 0 ? $37_1 : $39_1) {
     break label$4
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $46_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
    }
    $44_1 = $46_1;
    $44$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $47_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $47_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $46$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $44$hi;
    i64toi32_i32$5 = $44_1;
    i64toi32_i32$2 = $46$hi;
    i64toi32_i32$4 = $47_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    i64toi32_i32$5 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $5_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 2146435072;
   $5_1 = 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$2 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$5 = 0;
   $5_1 = 0;
   $5$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $48_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    $48_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $3_1 = $48_1;
   if ($3_1 >>> 0 < 15249 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$0 = $4$hi;
   $757($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 + -15233 | 0 | 0);
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   $762($2_1 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0, 15361 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$5;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 60;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $49_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $49_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $74_1 = $49_1;
   $74$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 4;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $50_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $50_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $78$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $74$hi;
   i64toi32_i32$4 = $74_1;
   i64toi32_i32$0 = $78$hi;
   i64toi32_i32$2 = $50_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $5$hi = i64toi32_i32$0;
   label$5 : {
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$2 = -1;
    i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $81_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$5;
    i64toi32_i32$0 = (i64toi32_i32$0 + 16 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$5;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$0 = $83_1;
    i64toi32_i32$5 = $87$hi;
    i64toi32_i32$2 = $87_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    $89_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$2 = $81_1;
    i64toi32_i32$5 = $90$hi;
    i64toi32_i32$0 = $89_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$2 = 134217728;
    i64toi32_i32$0 = 1;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $5_1 = i64toi32_i32$3;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = 134217728;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $100$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$0 = $100$hi;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $5_1 = i64toi32_i32$5;
   $5$hi = i64toi32_i32$3;
  }
  global$0 = $2_1 + 32 | 0;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $107_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
  $107$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = $107$hi;
  i64toi32_i32$4 = $107_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$4 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $770($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $3_1 = 0, $3$hi = 0, $4_1 = 0, $4$hi = 0, $17_1 = 0, $11_1 = 0, $19_1 = 0, $19$hi = 0, $23$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $11_1 = $1_1;
   $1_1 = Math_clz32($1_1);
   i64toi32_i32$1 = 0;
   $757($2_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $1_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $19_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $1_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $17_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $17_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $23$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $19_1;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$3 = $17_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $4_1 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $771($0_1) {
  $0_1 = $0_1 | 0;
  $196(5372 | 0);
  abort();
 }
 
 function $772($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $0_1;
   label$2 : while (1) {
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $773($0_1) {
  $0_1 = $0_1 | 0;
  $774($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $774($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 5636;
  $775($0_1 | 0, 0 | 0);
  $911($0_1 + 28 | 0 | 0) | 0;
  $1924(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0);
  $1924(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0);
  $1924(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0);
  $1924(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0);
  return $0_1 | 0;
 }
 
 function $775($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    if ($2_1) {
     break label$2
    }
    return;
   }
   $2_1 = $2_1 + -1 | 0;
   $3_1 = $2_1 << 2 | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 32 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0 | 0]($1_1, $0_1, HEAP32[((HEAP32[($0_1 + 36 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0);
   continue label$1;
  };
 }
 
 function $776($0_1) {
  $0_1 = $0_1 | 0;
  $1807($773($0_1 | 0) | 0 | 0);
 }
 
 function $777($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 5388;
  $911($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $778($0_1) {
  $0_1 = $0_1 | 0;
  $1807($777($0_1 | 0) | 0 | 0);
 }
 
 function $779($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 5388;
  $1463($0_1 + 4 | 0 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $780($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $781($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $0_1 | 0;
 }
 
 function $782($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $476($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $783($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $476($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $784($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $785($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $786($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ($5_1 >>> 0 >= $6_1 >>> 0) {
       break label$4
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = 2147483647;
      HEAP32[($3_1 + 8 | 0) >> 2] = $6_1 - $5_1 | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 - $4_1 | 0;
      $5_1 = $787($3_1 + 12 | 0 | 0, $787($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0 | 0) | 0;
      $5_1 = HEAP32[$5_1 >> 2] | 0;
      $788($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
      $789($0_1 | 0, $5_1 | 0);
      break label$3;
     }
     $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0;
     if (($5_1 | 0) == (-1 | 0)) {
      break label$1
     }
     HEAP8[$1_1 >> 0] = $493($5_1 | 0) | 0;
     $5_1 = 1;
    }
    $1_1 = $1_1 + $5_1 | 0;
    $4_1 = $5_1 + $4_1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $787($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $790($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $788($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $1932($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $789($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $1_1 | 0;
 }
 
 function $790($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $863($2_1 + 8 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $791($0_1) {
  $0_1 = $0_1 | 0;
  return $489() | 0 | 0;
 }
 
 function $792($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0) != ($489() | 0 | 0)) {
    break label$1
   }
   return $489() | 0 | 0;
  }
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 1 | 0;
  return $488(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
 }
 
 function $793($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $489() | 0 | 0;
 }
 
 function $794($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = $489() | 0;
  label$1 : {
   label$2 : while (1) {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     if ($6_1 >>> 0 < $7_1 >>> 0) {
      break label$3
     }
     if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $488(HEAP8[$1_1 >> 0] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($5_1 | 0)) {
      break label$1
     }
     $4_1 = $4_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$2;
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = $7_1 - $6_1 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $2_1 - $4_1 | 0;
    $6_1 = $787($3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    $6_1 = HEAP32[$6_1 >> 2] | 0;
    $788(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0) | 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = $6_1 + (HEAP32[($0_1 + 24 | 0) >> 2] | 0) | 0;
    $4_1 = $6_1 + $4_1 | 0;
    $1_1 = $1_1 + $6_1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $795($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $489() | 0 | 0;
 }
 
 function $796($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $0_1 = $772($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $797() {
  return -1 | 0;
 }
 
 function $798($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $799($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $800($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $799($0_1 | 0, 5484 | 0) | 0;
  $773($0_1 + 8 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $801($0_1) {
  $0_1 = $0_1 | 0;
  return $800($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $802($0_1) {
  $0_1 = $0_1 | 0;
  $1807($800($0_1 | 0) | 0 | 0);
 }
 
 function $803($0_1) {
  $0_1 = $0_1 | 0;
  $802($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $804($0_1) {
  $0_1 = $0_1 | 0;
  return $813($0_1 | 0) | 0 | 0;
 }
 
 function $805($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0;
 }
 
 function $806($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!($518($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    $2_1 = $814($1_1 + 8 | 0 | 0, $0_1 | 0) | 0;
    if (!($507($2_1 | 0) | 0)) {
     break label$2
    }
    if (($815($518($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
     break label$2
    }
    $513($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
   }
   $816($2_1 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $807($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1461($0_1 | 0, $1_1 + 28 | 0 | 0) | 0;
 }
 
 function $808($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($817($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $809($0_1) {
  $0_1 = $0_1 | 0;
  return (($818(HEAP32[$0_1 >> 2] | 0 | 0) | 0) << 24 | 0) >> 24 | 0 | 0;
 }
 
 function $810($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 0;
  label$1 : {
   if (($2_1 | 0) < (0 | 0)) {
    break label$1
   }
   $3_1 = ((HEAPU16[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + (($2_1 & 255 | 0) << 1 | 0) | 0) >> 1] | 0) & $1_1 | 0 | 0) != (0 | 0);
  }
  return $3_1 | 0;
 }
 
 function $811($0_1) {
  $0_1 = $0_1 | 0;
  $819(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $812($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $817($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $813($0_1) {
  $0_1 = $0_1 | 0;
  return !(HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0;
 }
 
 function $814($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP8[$0_1 >> 0] = 0;
  label$1 : {
   if (!($804($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    if (!($805($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
     break label$2
    }
    $806($805($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0;
   }
   HEAP8[$0_1 >> 0] = 1;
  }
  return $0_1 | 0;
 }
 
 function $815($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $816($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($518($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($804($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!(($509($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 8192 | 0)) {
    break label$1
   }
   if ($1859() | 0) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($815($518($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $513($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $817($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($864($0_1 | 0) | 0) ^ ($864($1_1 | 0) | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $818($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  return $488(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
 }
 
 function $819($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 1 | 0;
  return $488(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
 }
 
 function $820($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = !(HEAP32[($0_1 + 24 | 0) >> 2] | 0) | $1_1 | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $1_1 | 0)) {
    break label$1
   }
   $859(5644 | 0);
   abort();
  }
 }
 
 function $821($0_1) {
  $0_1 = $0_1 | 0;
  return $916($0_1 | 0, 19496 | 0) | 0 | 0;
 }
 
 function $822($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($827($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $823($0_1) {
  $0_1 = $0_1 | 0;
  return $828(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $824($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $825($0_1) {
  $0_1 = $0_1 | 0;
  $829(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $826($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $827($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $827($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($865($0_1 | 0) | 0) ^ ($865($1_1 | 0) | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $828($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  return $798(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $829($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 4 | 0;
  return $798(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $830($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($0_1 | 0) == ($1_1 | 0) | 0;
 }
 
 function $831($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   if (($2_1 | 0) != (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return (((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $798($1_1 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0;
  }
  HEAP32[($0_1 + 24 | 0) >> 2] = $2_1 + 4 | 0;
  HEAP32[$2_1 >> 2] = $1_1;
  return $798($1_1 | 0) | 0 | 0;
 }
 
 function $832($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $833($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $832($0_1 | 0, 5532 | 0) | 0;
  $773($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $834($0_1) {
  $0_1 = $0_1 | 0;
  return $833($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $835($0_1) {
  $0_1 = $0_1 | 0;
  $1807($833($0_1 | 0) | 0 | 0);
 }
 
 function $836($0_1) {
  $0_1 = $0_1 | 0;
  $835($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $837($0_1) {
  $0_1 = $0_1 | 0;
  return $916($0_1 | 0, 19332 | 0) | 0 | 0;
 }
 
 function $838($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $839($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $840($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   $3_1 = $814($2_1 + 24 | 0 | 0, $0_1 | 0) | 0;
   if (!($507($3_1 | 0) | 0)) {
    break label$1
   }
   $509($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
   $807($2_1 + 16 | 0 | 0, $0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
   $4_1 = $837($2_1 + 16 | 0 | 0) | 0;
   $911($2_1 + 16 | 0 | 0) | 0;
   $5_1 = $508($2_1 + 8 | 0 | 0, $0_1 | 0) | 0;
   $6_1 = $0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
   $7_1 = $510($6_1 | 0) | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = $838($4_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0, $6_1 | 0, $7_1 | 0, $1_1 | 0) | 0;
   if (!($512($2_1 + 16 | 0 | 0) | 0)) {
    break label$1
   }
   $513($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 5 | 0);
  }
  $816($3_1 | 0) | 0;
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $841($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   $3_1 = $814($2_1 + 24 | 0 | 0, $0_1 | 0) | 0;
   if (!($507($3_1 | 0) | 0)) {
    break label$1
   }
   $807($2_1 + 16 | 0 | 0, $0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
   $4_1 = $837($2_1 + 16 | 0 | 0) | 0;
   $911($2_1 + 16 | 0 | 0) | 0;
   $5_1 = $508($2_1 + 8 | 0 | 0, $0_1 | 0) | 0;
   $6_1 = $0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
   $7_1 = $510($6_1 | 0) | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = $839($4_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0, $6_1 | 0, $7_1 | 0, $1_1 | 0) | 0;
   if (!($512($2_1 + 16 | 0 | 0) | 0)) {
    break label$1
   }
   $513($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 5 | 0);
  }
  $816($3_1 | 0) | 0;
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $842($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   $3_1 = $814($2_1 + 24 | 0 | 0, $0_1 | 0) | 0;
   if (!($507($3_1 | 0) | 0)) {
    break label$1
   }
   $807($2_1 + 16 | 0 | 0, $0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
   $4_1 = $837($2_1 + 16 | 0 | 0) | 0;
   $911($2_1 + 16 | 0 | 0) | 0;
   $5_1 = $508($2_1 + 8 | 0 | 0, $0_1 | 0) | 0;
   $6_1 = $0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
   $7_1 = $510($6_1 | 0) | 0;
   i64toi32_i32$0 = $1$hi;
   HEAP32[($2_1 + 16 | 0) >> 2] = $843($4_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0, $6_1 | 0, $7_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
   if (!($512($2_1 + 16 | 0 | 0) | 0)) {
    break label$1
   }
   $513($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 5 | 0);
  }
  $816($3_1 | 0) | 0;
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $843($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, i64toi32_i32$0) | 0 | 0;
 }
 
 function $844($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $845($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   if (!($491($500($2_1 | 0, $1_1 | 0) | 0 | 0, $489() | 0 | 0) | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return $0_1 | 0;
 }
 
 function $846($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $847($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $848($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   if (!($830($831($2_1 | 0, $1_1 | 0) | 0 | 0, $797() | 0 | 0) | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return $0_1 | 0;
 }
 
 function $849($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $850($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $851($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $832($0_1 + 8 | 0 | 0, $1_1 + 12 | 0 | 0) | 0;
  $799($0_1 | 0, $1_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $852($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $851($0_1 | 0, 5600 | 0) | 0;
  $773($0_1 + 12 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $853($0_1) {
  $0_1 = $0_1 | 0;
  return $852($0_1 + -8 | 0 | 0) | 0 | 0;
 }
 
 function $854($0_1) {
  $0_1 = $0_1 | 0;
  return $852($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $855($0_1) {
  $0_1 = $0_1 | 0;
  $1807($852($0_1 | 0) | 0 | 0);
 }
 
 function $856($0_1) {
  $0_1 = $0_1 | 0;
  $855($0_1 + -8 | 0 | 0);
 }
 
 function $857($0_1) {
  $0_1 = $0_1 | 0;
  $855($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $858($0_1) {
  $0_1 = $0_1 | 0;
  $1807($774($0_1 | 0) | 0 | 0);
 }
 
 function $859($0_1) {
  $0_1 = $0_1 | 0;
  fimport$1();
  abort();
 }
 
 function $860($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 4098;
  HEAP32[($0_1 + 8 | 0) >> 2] = 6;
  HEAP32[($0_1 + 16 | 0) >> 2] = !$1_1;
  $1933($0_1 + 32 | 0 | 0, 0 | 0, 40 | 0) | 0;
  $1463($0_1 + 28 | 0 | 0) | 0;
 }
 
 function $861($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $862($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($288($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($288($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($288($2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $863($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0 | 0) < (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
 }
 
 function $864($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if ($491($818($1_1 | 0) | 0 | 0, $489() | 0 | 0) | 0) {
     break label$2
    }
    return !(HEAP32[$0_1 >> 2] | 0) | 0;
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return 1 | 0;
 }
 
 function $865($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if ($830($828($1_1 | 0) | 0 | 0, $797() | 0 | 0) | 0) {
     break label$2
    }
    return !(HEAP32[$0_1 >> 2] | 0) | 0;
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return 1 | 0;
 }
 
 function $866($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $867($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $868($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($867($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $869($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $870() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  label$1 : {
   if (fimport$15($0_1 + 12 | 0 | 0, $0_1 + 8 | 0 | 0) | 0) {
    break label$1
   }
   $1_1 = $1923(((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) + 4 | 0 | 0) | 0;
   HEAP32[(0 + 19280 | 0) >> 2] = $1_1;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    $1_1 = $1923(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    if ($1_1) {
     break label$2
    }
    HEAP32[(0 + 19280 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[(0 + 19280 | 0) >> 2] | 0) + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
   if (!(fimport$16(HEAP32[(0 + 19280 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0)) {
    break label$1
   }
   HEAP32[(0 + 19280 | 0) >> 2] = 0;
  }
  global$0 = $0_1 + 16 | 0;
 }
 
 function $871($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $4_1 = 0, $2_1 = 0;
  $1_1 = 0;
  $2_1 = $1940($0_1 | 0) | 0;
  label$1 : {
   if (!(HEAP32[(0 + 19280 | 0) >> 2] | 0)) {
    break label$1
   }
   if (!(HEAPU8[$0_1 >> 0] | 0)) {
    break label$1
   }
   if ($682($0_1 | 0, 61 | 0) | 0) {
    break label$1
   }
   $1_1 = 0;
   $3_1 = HEAP32[(HEAP32[(0 + 19280 | 0) >> 2] | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   label$2 : {
    label$3 : while (1) {
     $4_1 = $684($0_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
     $3_1 = HEAP32[(0 + 19280 | 0) >> 2] | 0;
     label$4 : {
      if ($4_1) {
       break label$4
      }
      $4_1 = (HEAP32[($3_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0) + $2_1 | 0;
      if ((HEAPU8[$4_1 >> 0] | 0 | 0) == (61 | 0)) {
       break label$2
      }
     }
     $1_1 = $1_1 + 1 | 0;
     $3_1 = HEAP32[($3_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
     if ($3_1) {
      continue label$3
     }
     break label$3;
    };
    return 0 | 0;
   }
   $1_1 = $4_1 + 1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $872($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   if (HEAPU8[$1_1 >> 0] | 0) {
    break label$1
   }
   label$2 : {
    $1_1 = $871(6224 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$1
    }
   }
   label$3 : {
    $1_1 = $871(Math_imul($0_1, 12) + 6240 | 0 | 0) | 0;
    if (!$1_1) {
     break label$3
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$1
    }
   }
   label$4 : {
    $1_1 = $871(6312 | 0) | 0;
    if (!$1_1) {
     break label$4
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$1
    }
   }
   $1_1 = 6317;
  }
  $2_1 = 0;
  label$5 : {
   label$6 : {
    label$7 : while (1) {
     $3_1 = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
     if (!$3_1) {
      break label$6
     }
     if (($3_1 | 0) == (47 | 0)) {
      break label$6
     }
     $3_1 = 15;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != (15 | 0)) {
      continue label$7
     }
     break label$5;
    };
   }
   $3_1 = $2_1;
  }
  $4_1 = 6317;
  label$8 : {
   label$9 : {
    label$10 : {
     label$11 : {
      label$12 : {
       $2_1 = HEAPU8[$1_1 >> 0] | 0;
       if (($2_1 | 0) == (46 | 0)) {
        break label$12
       }
       if (HEAPU8[($1_1 + $3_1 | 0) >> 0] | 0) {
        break label$12
       }
       $4_1 = $1_1;
       if (($2_1 | 0) != (67 | 0)) {
        break label$11
       }
      }
      if (!(HEAPU8[($4_1 + 1 | 0) >> 0] | 0)) {
       break label$10
      }
     }
     if (!($683($4_1 | 0, 6317 | 0) | 0)) {
      break label$10
     }
     if ($683($4_1 | 0, 6325 | 0) | 0) {
      break label$9
     }
    }
    label$13 : {
     if ($0_1) {
      break label$13
     }
     $2_1 = 6148;
     if ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0 | 0) == (46 | 0)) {
      break label$8
     }
    }
    return 0 | 0;
   }
   label$14 : {
    $2_1 = HEAP32[(0 + 19292 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$14
    }
    label$15 : while (1) {
     if (!($683($4_1 | 0, $2_1 + 8 | 0 | 0) | 0)) {
      break label$8
     }
     $2_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
     if ($2_1) {
      continue label$15
     }
     break label$15;
    };
   }
   $750(19284 | 0);
   label$16 : {
    $2_1 = HEAP32[(0 + 19292 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$16
    }
    label$17 : while (1) {
     label$18 : {
      if ($683($4_1 | 0, $2_1 + 8 | 0 | 0) | 0) {
       break label$18
      }
      $751(19284 | 0);
      return $2_1 | 0;
     }
     $2_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
     if ($2_1) {
      continue label$17
     }
     break label$17;
    };
   }
   label$19 : {
    label$20 : {
     $2_1 = $1923(28 | 0) | 0;
     if ($2_1) {
      break label$20
     }
     $2_1 = 0;
     break label$19;
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 6152 | 0) >> 2] | 0;
    HEAP32[$2_1 >> 2] = HEAP32[(i64toi32_i32$2 + 6148 | 0) >> 2] | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    $1_1 = $2_1 + 8 | 0;
    $1932($1_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
    HEAP8[($1_1 + $3_1 | 0) >> 0] = 0;
    HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[(0 + 19292 | 0) >> 2] | 0;
    HEAP32[(0 + 19292 | 0) >> 2] = $2_1;
   }
   $751(19284 | 0);
   $2_1 = $0_1 | $2_1 | 0 ? $2_1 : 6148;
  }
  return $2_1 | 0;
 }
 
 function $873($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) != (6200 | 0) & (($0_1 | 0) != (0 | 0) & ($0_1 | 0) != (6176 | 0) | 0) | 0 | 0;
 }
 
 function $874($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($873($2_1 | 0) | 0)) {
      break label$3
     }
     $4_1 = 0;
     label$4 : while (1) {
      label$5 : {
       if (!(($0_1 >>> $4_1 | 0) & 1 | 0)) {
        break label$5
       }
       HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] = $872($4_1 | 0, $1_1 | 0) | 0;
      }
      $4_1 = $4_1 + 1 | 0;
      if (($4_1 | 0) != (6 | 0)) {
       continue label$4
      }
      break label$2;
     };
    }
    $5_1 = 0;
    $4_1 = 0;
    label$6 : while (1) {
     $6_1 = (1 << $4_1 | 0) & $0_1 | 0;
     label$7 : {
      label$8 : {
       if (!$2_1) {
        break label$8
       }
       if ($6_1) {
        break label$8
       }
       $6_1 = HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
       break label$7;
      }
      $6_1 = $872($4_1 | 0, ($6_1 ? $1_1 : 6331) | 0) | 0;
     }
     HEAP32[(($3_1 + 8 | 0) + ($4_1 << 2 | 0) | 0) >> 2] = $6_1;
     $5_1 = $5_1 + (($6_1 | 0) != (0 | 0)) | 0;
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) != (6 | 0)) {
      continue label$6
     }
     break label$6;
    };
    $4_1 = 6176;
    label$9 : {
     switch ($5_1 | 0) {
     case 0:
      break label$1;
     case 1:
      break label$9;
     default:
      break label$2;
     };
    }
    if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != (6148 | 0)) {
     break label$2
    }
    $4_1 = 6200;
    break label$1;
   }
   $4_1 = $2_1;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $875($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  $4_1 = -1;
  label$1 : {
   $2_1 = $693(0 | 0, 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   if (($2_1 | 0) < (0 | 0)) {
    break label$1
   }
   $5_1 = $2_1 + 1 | 0;
   $2_1 = $1923($5_1 | 0) | 0;
   HEAP32[$0_1 >> 2] = $2_1;
   if (!$2_1) {
    break label$1
   }
   $4_1 = $693($2_1 | 0, $5_1 | 0, $1_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $876($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return -1 | 0;
 }
 
 function $877($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return $3_1 | 0;
 }
 
 function $878($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $879($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($873($0_1 | 0) | 0)) {
    break label$1
   }
   $1924($0_1 | 0);
  }
 }
 
 function $880($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = $0_1;
  label$1 : while (1) {
   $2_1 = $1_1;
   $1_1 = $2_1 + 4 | 0;
   if (HEAP32[$2_1 >> 2] | 0) {
    continue label$1
   }
   break label$1;
  };
  return ($2_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $881() {
  return 6332 | 0;
 }
 
 function $882() {
  return 7104 | 0;
 }
 
 function $883() {
  return 8656 | 0;
 }
 
 function $884($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $5_1 = 0, $8_1 = 0, $7_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (!$0_1) {
        break label$5
       }
       if ($2_1 >>> 0 >= 4 >>> 0) {
        break label$4
       }
       $5_1 = $2_1;
       break label$3;
      }
      $6_1 = 0;
      label$6 : {
       $0_1 = HEAP32[$1_1 >> 2] | 0;
       $5_1 = HEAP32[$0_1 >> 2] | 0;
       if ($5_1) {
        break label$6
       }
       $7_1 = 0;
       break label$1;
      }
      label$7 : while (1) {
       $8_1 = 1;
       label$8 : {
        if ($5_1 >>> 0 < 128 >>> 0) {
         break label$8
        }
        $7_1 = -1;
        $8_1 = $698($4_1 + 12 | 0 | 0, $5_1 | 0, 0 | 0) | 0;
        if (($8_1 | 0) == (-1 | 0)) {
         break label$1
        }
       }
       $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       $0_1 = $0_1 + 4 | 0;
       $6_1 = $8_1 + $6_1 | 0;
       $7_1 = $6_1;
       if ($5_1) {
        continue label$7
       }
       break label$1;
      };
     }
     $8_1 = HEAP32[$1_1 >> 2] | 0;
     $5_1 = $2_1;
     label$9 : while (1) {
      label$10 : {
       label$11 : {
        $6_1 = HEAP32[$8_1 >> 2] | 0;
        if (($6_1 + -1 | 0) >>> 0 < 127 >>> 0) {
         break label$11
        }
        label$12 : {
         if ($6_1) {
          break label$12
         }
         HEAP8[$0_1 >> 0] = 0;
         HEAP32[$1_1 >> 2] = 0;
         break label$2;
        }
        $7_1 = -1;
        $6_1 = $698($0_1 | 0, $6_1 | 0, 0 | 0) | 0;
        if (($6_1 | 0) == (-1 | 0)) {
         break label$1
        }
        $5_1 = $5_1 - $6_1 | 0;
        $0_1 = $0_1 + $6_1 | 0;
        break label$10;
       }
       HEAP8[$0_1 >> 0] = $6_1;
       $5_1 = $5_1 + -1 | 0;
       $0_1 = $0_1 + 1 | 0;
       $8_1 = HEAP32[$1_1 >> 2] | 0;
      }
      $8_1 = $8_1 + 4 | 0;
      HEAP32[$1_1 >> 2] = $8_1;
      if ($5_1 >>> 0 > 3 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    label$13 : {
     if (!$5_1) {
      break label$13
     }
     $8_1 = HEAP32[$1_1 >> 2] | 0;
     label$14 : while (1) {
      label$15 : {
       label$16 : {
        $6_1 = HEAP32[$8_1 >> 2] | 0;
        if (($6_1 + -1 | 0) >>> 0 < 127 >>> 0) {
         break label$16
        }
        label$17 : {
         if ($6_1) {
          break label$17
         }
         HEAP8[$0_1 >> 0] = 0;
         HEAP32[$1_1 >> 2] = 0;
         break label$2;
        }
        $7_1 = -1;
        $6_1 = $698($4_1 + 12 | 0 | 0, $6_1 | 0, 0 | 0) | 0;
        if (($6_1 | 0) == (-1 | 0)) {
         break label$1
        }
        if ($5_1 >>> 0 < $6_1 >>> 0) {
         break label$2
        }
        $698($0_1 | 0, HEAP32[$8_1 >> 2] | 0 | 0, 0 | 0) | 0;
        $5_1 = $5_1 - $6_1 | 0;
        $0_1 = $0_1 + $6_1 | 0;
        break label$15;
       }
       HEAP8[$0_1 >> 0] = $6_1;
       $5_1 = $5_1 + -1 | 0;
       $0_1 = $0_1 + 1 | 0;
       $8_1 = HEAP32[$1_1 >> 2] | 0;
      }
      $8_1 = $8_1 + 4 | 0;
      HEAP32[$1_1 >> 2] = $8_1;
      if ($5_1) {
       continue label$14
      }
      break label$14;
     };
    }
    $7_1 = $2_1;
    break label$1;
   }
   $7_1 = $2_1 - $5_1 | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $885($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $9_1 = 0, $5_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 272 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
  $7_1 = $0_1 ? $0_1 : $5_1 + 16 | 0;
  $8_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $3_1 = $0_1 ? $3_1 : 256;
     if (!$3_1) {
      break label$3
     }
     if (!$6_1) {
      break label$3
     }
     label$4 : {
      label$5 : {
       $9_1 = $3_1 >>> 0 <= $2_1 >>> 0;
       if (!$9_1) {
        break label$5
       }
       $8_1 = 0;
       break label$4;
      }
      $8_1 = 0;
      if ($2_1 >>> 0 > 32 >>> 0) {
       break label$4
      }
      $8_1 = 0;
      break label$2;
     }
     label$6 : while (1) {
      $9_1 = $9_1 & 1 | 0 ? $3_1 : $2_1;
      $2_1 = $2_1 - $9_1 | 0;
      label$7 : {
       $9_1 = $884($7_1 | 0, $5_1 + 12 | 0 | 0, $9_1 | 0, 0 | 0) | 0;
       if (($9_1 | 0) != (-1 | 0)) {
        break label$7
       }
       $3_1 = 0;
       $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       $8_1 = -1;
       break label$3;
      }
      $10_1 = ($7_1 | 0) == ($5_1 + 16 | 0 | 0);
      $7_1 = $10_1 ? $7_1 : $7_1 + $9_1 | 0;
      $8_1 = $9_1 + $8_1 | 0;
      $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
      $3_1 = $3_1 - ($10_1 ? 0 : $9_1) | 0;
      if (!$3_1) {
       break label$3
      }
      if (!$6_1) {
       break label$3
      }
      $9_1 = $2_1 >>> 0 >= $3_1 >>> 0;
      if ($9_1) {
       continue label$6
      }
      if ($2_1 >>> 0 < 33 >>> 0) {
       break label$2
      }
      continue label$6;
     };
    }
    if (!$6_1) {
     break label$1
    }
   }
   if (!$3_1) {
    break label$1
   }
   if (!$2_1) {
    break label$1
   }
   $10_1 = $8_1;
   label$8 : while (1) {
    label$9 : {
     label$10 : {
      label$11 : {
       $9_1 = $698($7_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0;
       if (($9_1 + 1 | 0) >>> 0 > 1 >>> 0) {
        break label$11
       }
       $8_1 = -1;
       if ($9_1) {
        break label$1
       }
       HEAP32[($5_1 + 12 | 0) >> 2] = 0;
       break label$10;
      }
      $6_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0;
      HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
      $10_1 = $9_1 + $10_1 | 0;
      $3_1 = $3_1 - $9_1 | 0;
      if ($3_1) {
       break label$9
      }
     }
     $8_1 = $10_1;
     break label$1;
    }
    $7_1 = $7_1 + $9_1 | 0;
    $8_1 = $10_1;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$8
    }
    break label$8;
   };
  }
  label$12 : {
   if (!$0_1) {
    break label$12
   }
   HEAP32[$1_1 >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $5_1 + 272 | 0;
  return $8_1 | 0;
 }
 
 function $886($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              if (!$3_1) {
               break label$12
              }
              $5_1 = HEAP32[$3_1 >> 2] | 0;
              if (!$5_1) {
               break label$12
              }
              label$13 : {
               if ($0_1) {
                break label$13
               }
               $3_1 = $2_1;
               break label$10;
              }
              HEAP32[$3_1 >> 2] = 0;
              $3_1 = $2_1;
              break label$11;
             }
             label$14 : {
              label$15 : {
               if (HEAP32[(HEAP32[(($753() | 0) + 172 | 0) >> 2] | 0) >> 2] | 0) {
                break label$15
               }
               if (!$0_1) {
                break label$14
               }
               if (!$2_1) {
                break label$1
               }
               $5_1 = $2_1;
               label$16 : {
                label$17 : while (1) {
                 $3_1 = HEAP8[$4_1 >> 0] | 0;
                 if (!$3_1) {
                  break label$16
                 }
                 HEAP32[$0_1 >> 2] = $3_1 & 57343 | 0;
                 $0_1 = $0_1 + 4 | 0;
                 $4_1 = $4_1 + 1 | 0;
                 $5_1 = $5_1 + -1 | 0;
                 if ($5_1) {
                  continue label$17
                 }
                 break label$1;
                };
               }
               HEAP32[$0_1 >> 2] = 0;
               HEAP32[$1_1 >> 2] = 0;
               return $2_1 - $5_1 | 0 | 0;
              }
              $3_1 = $2_1;
              if (!$0_1) {
               break label$9
              }
              $3_1 = $2_1;
              $6_1 = 0;
              break label$7;
             }
             return $1940($4_1 | 0) | 0 | 0;
            }
            $6_1 = 1;
            break label$7;
           }
           $6_1 = 0;
           break label$8;
          }
          $6_1 = 1;
         }
         label$18 : while (1) {
          label$19 : {
           switch ($6_1 | 0) {
           case 0:
            $6_1 = (HEAPU8[$4_1 >> 0] | 0) >>> 3 | 0;
            if (($6_1 + -16 | 0 | (($5_1 >> 26 | 0) + $6_1 | 0) | 0) >>> 0 > 7 >>> 0) {
             break label$6
            }
            $6_1 = $4_1 + 1 | 0;
            label$21 : {
             label$22 : {
              if ($5_1 & 33554432 | 0) {
               break label$22
              }
              $4_1 = $6_1;
              break label$21;
             }
             if (((HEAPU8[$6_1 >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
              break label$6
             }
             $6_1 = $4_1 + 2 | 0;
             label$23 : {
              if ($5_1 & 524288 | 0) {
               break label$23
              }
              $4_1 = $6_1;
              break label$21;
             }
             if (((HEAPU8[$6_1 >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
              break label$6
             }
             $4_1 = $4_1 + 3 | 0;
            }
            $3_1 = $3_1 + -1 | 0;
            $6_1 = 1;
            continue label$18;
           default:
            break label$19;
           };
          }
          label$24 : while (1) {
           label$25 : {
            $5_1 = HEAPU8[$4_1 >> 0] | 0;
            if (($5_1 + -1 | 0) >>> 0 > 126 >>> 0) {
             break label$25
            }
            if ($4_1 & 3 | 0) {
             break label$25
            }
            $5_1 = HEAP32[$4_1 >> 2] | 0;
            if (($5_1 + -16843009 | 0 | $5_1 | 0) & -2139062144 | 0) {
             break label$25
            }
            label$26 : while (1) {
             $3_1 = $3_1 + -4 | 0;
             $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
             $6_1 = $4_1 + 4 | 0;
             $4_1 = $6_1;
             if (!(($5_1 | ($5_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
              continue label$26
             }
             break label$26;
            };
            $4_1 = $6_1;
           }
           label$27 : {
            $6_1 = $5_1 & 255 | 0;
            if (($6_1 + -1 | 0) >>> 0 > 126 >>> 0) {
             break label$27
            }
            $3_1 = $3_1 + -1 | 0;
            $4_1 = $4_1 + 1 | 0;
            continue label$24;
           }
           break label$24;
          };
          $6_1 = $6_1 + -194 | 0;
          if ($6_1 >>> 0 > 50 >>> 0) {
           break label$5
          }
          $4_1 = $4_1 + 1 | 0;
          $5_1 = HEAP32[(5168 + ($6_1 << 2 | 0) | 0) >> 2] | 0;
          $6_1 = 0;
          continue label$18;
         };
        }
        label$28 : while (1) {
         label$29 : {
          switch ($6_1 | 0) {
          case 0:
           if (!$3_1) {
            break label$1
           }
           label$31 : {
            label$32 : while (1) {
             label$33 : {
              label$34 : {
               label$35 : {
                $6_1 = HEAPU8[$4_1 >> 0] | 0;
                $7_1 = $6_1 + -1 | 0;
                if ($7_1 >>> 0 <= 126 >>> 0) {
                 break label$35
                }
                $5_1 = $6_1;
                break label$34;
               }
               if ($4_1 & 3 | 0) {
                break label$33
               }
               if ($3_1 >>> 0 < 5 >>> 0) {
                break label$33
               }
               label$36 : {
                label$37 : while (1) {
                 $5_1 = HEAP32[$4_1 >> 2] | 0;
                 if (($5_1 + -16843009 | 0 | $5_1 | 0) & -2139062144 | 0) {
                  break label$36
                 }
                 HEAP32[$0_1 >> 2] = $5_1 & 255 | 0;
                 HEAP32[($0_1 + 4 | 0) >> 2] = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
                 HEAP32[($0_1 + 8 | 0) >> 2] = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
                 HEAP32[($0_1 + 12 | 0) >> 2] = HEAPU8[($4_1 + 3 | 0) >> 0] | 0;
                 $0_1 = $0_1 + 16 | 0;
                 $4_1 = $4_1 + 4 | 0;
                 $3_1 = $3_1 + -4 | 0;
                 if ($3_1 >>> 0 > 4 >>> 0) {
                  continue label$37
                 }
                 break label$37;
                };
                $5_1 = HEAPU8[$4_1 >> 0] | 0;
               }
               $6_1 = $5_1 & 255 | 0;
               $7_1 = $6_1 + -1 | 0;
              }
              if ($7_1 >>> 0 > 126 >>> 0) {
               break label$31
              }
             }
             HEAP32[$0_1 >> 2] = $6_1;
             $0_1 = $0_1 + 4 | 0;
             $4_1 = $4_1 + 1 | 0;
             $3_1 = $3_1 + -1 | 0;
             if (!$3_1) {
              break label$1
             }
             continue label$32;
            };
           }
           $6_1 = $6_1 + -194 | 0;
           if ($6_1 >>> 0 > 50 >>> 0) {
            break label$5
           }
           $4_1 = $4_1 + 1 | 0;
           $5_1 = HEAP32[(5168 + ($6_1 << 2 | 0) | 0) >> 2] | 0;
           $6_1 = 1;
           continue label$28;
          default:
           break label$29;
          };
         }
         $7_1 = HEAPU8[$4_1 >> 0] | 0;
         $6_1 = $7_1 >>> 3 | 0;
         if (($6_1 + -16 | 0 | ($6_1 + ($5_1 >> 26 | 0) | 0) | 0) >>> 0 > 7 >>> 0) {
          break label$6
         }
         $8_1 = $4_1 + 1 | 0;
         label$38 : {
          label$39 : {
           label$40 : {
            label$41 : {
             $6_1 = $7_1 + -128 | 0 | ($5_1 << 6 | 0) | 0;
             if (($6_1 | 0) <= (-1 | 0)) {
              break label$41
             }
             $4_1 = $8_1;
             break label$40;
            }
            $7_1 = (HEAPU8[$8_1 >> 0] | 0) + -128 | 0;
            if ($7_1 >>> 0 > 63 >>> 0) {
             break label$39
            }
            $8_1 = $4_1 + 2 | 0;
            label$42 : {
             $6_1 = $7_1 | ($6_1 << 6 | 0) | 0;
             if (($6_1 | 0) <= (-1 | 0)) {
              break label$42
             }
             $4_1 = $8_1;
             break label$40;
            }
            $7_1 = (HEAPU8[$8_1 >> 0] | 0) + -128 | 0;
            if ($7_1 >>> 0 > 63 >>> 0) {
             break label$39
            }
            $4_1 = $4_1 + 3 | 0;
            $6_1 = $7_1 | ($6_1 << 6 | 0) | 0;
           }
           HEAP32[$0_1 >> 2] = $6_1;
           $3_1 = $3_1 + -1 | 0;
           $0_1 = $0_1 + 4 | 0;
           break label$38;
          }
          HEAP32[($680() | 0) >> 2] = 25;
          $4_1 = $4_1 + -1 | 0;
          break label$3;
         }
         $6_1 = 0;
         continue label$28;
        };
       }
       $4_1 = $4_1 + -1 | 0;
       if ($5_1) {
        break label$4
       }
       $5_1 = HEAPU8[$4_1 >> 0] | 0;
      }
      if ($5_1 & 255 | 0) {
       break label$4
      }
      label$43 : {
       if (!$0_1) {
        break label$43
       }
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[$1_1 >> 2] = 0;
      }
      return $2_1 - $3_1 | 0 | 0;
     }
     HEAP32[($680() | 0) >> 2] = 25;
     if (!$0_1) {
      break label$2
     }
    }
    HEAP32[$1_1 >> 2] = $4_1;
   }
   return -1 | 0;
  }
  HEAP32[$1_1 >> 2] = $4_1;
  return $2_1 | 0;
 }
 
 function $887($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $9_1 = 0, $8_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 1040 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
  $7_1 = $0_1 ? $0_1 : $5_1 + 16 | 0;
  $8_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $3_1 = $0_1 ? $3_1 : 256;
     if (!$3_1) {
      break label$3
     }
     if (!$6_1) {
      break label$3
     }
     $9_1 = $2_1 >>> 2 | 0;
     $10_1 = $9_1 >>> 0 >= $3_1 >>> 0;
     $8_1 = 0;
     label$4 : {
      if ($2_1 >>> 0 > 131 >>> 0) {
       break label$4
      }
      if ($9_1 >>> 0 < $3_1 >>> 0) {
       break label$2
      }
     }
     label$5 : while (1) {
      $6_1 = $10_1 & 1 | 0 ? $3_1 : $9_1;
      $2_1 = $2_1 - $6_1 | 0;
      label$6 : {
       $9_1 = $886($7_1 | 0, $5_1 + 12 | 0 | 0, $6_1 | 0, $4_1 | 0) | 0;
       if (($9_1 | 0) != (-1 | 0)) {
        break label$6
       }
       $3_1 = 0;
       $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       $8_1 = -1;
       break label$3;
      }
      $10_1 = ($7_1 | 0) == ($5_1 + 16 | 0 | 0);
      $7_1 = $10_1 ? $7_1 : $7_1 + ($9_1 << 2 | 0) | 0;
      $8_1 = $9_1 + $8_1 | 0;
      $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
      $3_1 = $3_1 - ($10_1 ? 0 : $9_1) | 0;
      if (!$3_1) {
       break label$3
      }
      if (!$6_1) {
       break label$3
      }
      $9_1 = $2_1 >>> 2 | 0;
      $10_1 = $9_1 >>> 0 >= $3_1 >>> 0;
      if ($2_1 >>> 0 > 131 >>> 0) {
       continue label$5
      }
      if ($9_1 >>> 0 < $3_1 >>> 0) {
       break label$2
      }
      continue label$5;
     };
    }
    if (!$6_1) {
     break label$1
    }
   }
   if (!$3_1) {
    break label$1
   }
   if (!$2_1) {
    break label$1
   }
   $9_1 = $8_1;
   label$7 : while (1) {
    label$8 : {
     label$9 : {
      label$10 : {
       $8_1 = $728($7_1 | 0, $6_1 | 0, $2_1 | 0, $4_1 | 0) | 0;
       if (($8_1 + 2 | 0) >>> 0 > 2 >>> 0) {
        break label$10
       }
       label$11 : {
        switch ($8_1 + 1 | 0 | 0) {
        case 1:
         HEAP32[($5_1 + 12 | 0) >> 2] = 0;
         break label$9;
        case 0:
         break label$1;
        default:
         break label$11;
        };
       }
       HEAP32[$4_1 >> 2] = 0;
       break label$9;
      }
      $6_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + $8_1 | 0;
      HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
      $9_1 = $9_1 + 1 | 0;
      $3_1 = $3_1 + -1 | 0;
      if ($3_1) {
       break label$8
      }
     }
     $8_1 = $9_1;
     break label$1;
    }
    $7_1 = $7_1 + 4 | 0;
    $2_1 = $2_1 - $8_1 | 0;
    $8_1 = $9_1;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  label$13 : {
   if (!$0_1) {
    break label$13
   }
   HEAP32[$1_1 >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $5_1 + 1040 | 0;
  return $8_1 | 0;
 }
 
 function $888($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    $1_1 = 0;
    break label$1;
   }
   label$3 : {
    if (!$2_1) {
     break label$3
    }
    $0_1 = $0_1 ? $0_1 : $3_1 + 12 | 0;
    label$4 : {
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     $5_1 = ($4_1 << 24 | 0) >> 24 | 0;
     if (($5_1 | 0) < (0 | 0)) {
      break label$4
     }
     HEAP32[$0_1 >> 2] = $4_1;
     $1_1 = ($5_1 | 0) != (0 | 0);
     break label$1;
    }
    $4_1 = HEAP32[(HEAP32[(($753() | 0) + 172 | 0) >> 2] | 0) >> 2] | 0;
    $5_1 = HEAP8[$1_1 >> 0] | 0;
    label$5 : {
     if ($4_1) {
      break label$5
     }
     HEAP32[$0_1 >> 2] = $5_1 & 57343 | 0;
     $1_1 = 1;
     break label$1;
    }
    $4_1 = ($5_1 & 255 | 0) + -194 | 0;
    if ($4_1 >>> 0 > 50 >>> 0) {
     break label$3
    }
    $4_1 = HEAP32[(5168 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
    label$6 : {
     if ($2_1 >>> 0 > 3 >>> 0) {
      break label$6
     }
     if (($4_1 << (Math_imul($2_1, 6) + -6 | 0) | 0 | 0) < (0 | 0)) {
      break label$3
     }
    }
    $5_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $2_1 = $5_1 >>> 3 | 0;
    if (($2_1 + -16 | 0 | ($2_1 + ($4_1 >> 26 | 0) | 0) | 0) >>> 0 > 7 >>> 0) {
     break label$3
    }
    label$7 : {
     $2_1 = $5_1 + -128 | 0 | ($4_1 << 6 | 0) | 0;
     if (($2_1 | 0) < (0 | 0)) {
      break label$7
     }
     HEAP32[$0_1 >> 2] = $2_1;
     $1_1 = 2;
     break label$1;
    }
    $4_1 = (HEAPU8[($1_1 + 2 | 0) >> 0] | 0) + -128 | 0;
    if ($4_1 >>> 0 > 63 >>> 0) {
     break label$3
    }
    label$8 : {
     $2_1 = $4_1 | ($2_1 << 6 | 0) | 0;
     if (($2_1 | 0) < (0 | 0)) {
      break label$8
     }
     HEAP32[$0_1 >> 2] = $2_1;
     $1_1 = 3;
     break label$1;
    }
    $1_1 = (HEAPU8[($1_1 + 3 | 0) >> 0] | 0) + -128 | 0;
    if ($1_1 >>> 0 > 63 >>> 0) {
     break label$3
    }
    HEAP32[$0_1 >> 2] = $1_1 | ($2_1 << 6 | 0) | 0;
    $1_1 = 4;
    break label$1;
   }
   HEAP32[($680() | 0) >> 2] = 25;
   $1_1 = -1;
  }
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $889() {
  return (HEAP32[(HEAP32[(($753() | 0) + 172 | 0) >> 2] | 0) >> 2] | 0 ? 4 : 1) | 0;
 }
 
 function $890($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $728(0 | 0, $0_1 | 0, $1_1 | 0, ($2_1 ? $2_1 : 19296) | 0) | 0 | 0;
 }
 
 function $891($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $753() | 0;
  $2_1 = HEAP32[($1_1 + 172 | 0) >> 2] | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   HEAP32[($1_1 + 172 | 0) >> 2] = ($0_1 | 0) == (-1 | 0) ? 18152 + 40 | 0 : $0_1;
  }
  return (($2_1 | 0) == (18152 + 40 | 0 | 0) ? -1 : $2_1) | 0;
 }
 
 function $892($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $740($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $893($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $742($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $894($0_1) {
  $0_1 = $0_1 | 0;
  $895($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $895($0_1) {
  $0_1 = $0_1 | 0;
  $1816($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $896($0_1) {
  $0_1 = $0_1 | 0;
  $1807($894($0_1 | 0) | 0 | 0);
 }
 
 function $897($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (($3_1 | 0) == ($4_1 | 0)) {
      break label$2
     }
     $5_1 = -1;
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     $6_1 = HEAP8[$1_1 >> 0] | 0;
     $7_1 = HEAP8[$3_1 >> 0] | 0;
     if (($6_1 | 0) < ($7_1 | 0)) {
      break label$1
     }
     label$4 : {
      if (($7_1 | 0) >= ($6_1 | 0)) {
       break label$4
      }
      return 1 | 0;
     }
     $3_1 = $3_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$3;
    };
   }
   $5_1 = ($1_1 | 0) != ($2_1 | 0);
  }
  return $5_1 | 0;
 }
 
 function $898($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $899($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
 }
 
 function $899($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $22($0_1 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $900($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $900($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $1725($1_1 | 0, $2_1 | 0) | 0;
   if ($4_1 >>> 0 > ($527($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4_1 >>> 0 > 10 >>> 0) {
      break label$3
     }
     $123($0_1 | 0, $4_1 | 0);
     $5_1 = $122($0_1 | 0) | 0;
     break label$2;
    }
    $5_1 = $528($4_1 | 0) | 0;
    $6_1 = $5_1 + 1 | 0;
    $5_1 = $529($407($0_1 | 0) | 0 | 0, $6_1 | 0) | 0;
    $530($0_1 | 0, $5_1 | 0);
    $531($0_1 | 0, $6_1 | 0);
    $121($0_1 | 0, $4_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $120($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$5;
    };
   }
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $120($5_1 | 0, $3_1 + 15 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1827($0_1 | 0);
  abort();
 }
 
 function $901($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($1_1 | 0) != ($2_1 | 0)) {
     break label$2
    }
    return $3_1 | 0;
   }
   $3_1 = ($3_1 << 4 | 0) + (HEAP8[$1_1 >> 0] | 0) | 0;
   $4_1 = $3_1 & -268435456 | 0;
   $3_1 = ($4_1 >>> 24 | 0 | $4_1 | 0) ^ $3_1 | 0;
   $1_1 = $1_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $902($0_1) {
  $0_1 = $0_1 | 0;
  $895($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $903($0_1) {
  $0_1 = $0_1 | 0;
  $1807($902($0_1 | 0) | 0 | 0);
 }
 
 function $904($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (($3_1 | 0) == ($4_1 | 0)) {
      break label$2
     }
     $5_1 = -1;
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     $6_1 = HEAP32[$1_1 >> 2] | 0;
     $7_1 = HEAP32[$3_1 >> 2] | 0;
     if (($6_1 | 0) < ($7_1 | 0)) {
      break label$1
     }
     label$4 : {
      if (($7_1 | 0) >= ($6_1 | 0)) {
       break label$4
      }
      return 1 | 0;
     }
     $3_1 = $3_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$3;
    };
   }
   $5_1 = ($1_1 | 0) != ($2_1 | 0);
  }
  return $5_1 | 0;
 }
 
 function $905($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $906($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
 }
 
 function $906($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $907($0_1 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $908($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $907($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $341($1_1 | 0) | 0;
  $1727($0_1 | 0) | 0;
  $341($2_1 | 0) | 0;
  $1728($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $908($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $1729($1_1 | 0, $2_1 | 0) | 0;
   if ($4_1 >>> 0 > ($1730($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $1252($0_1 | 0, $4_1 | 0);
     $5_1 = $1251($0_1 | 0) | 0;
     break label$2;
    }
    $5_1 = $1731($4_1 | 0) | 0;
    $6_1 = $5_1 + 1 | 0;
    $5_1 = $1732($1634($0_1 | 0) | 0 | 0, $6_1 | 0) | 0;
    $1733($0_1 | 0, $5_1 | 0);
    $1734($0_1 | 0, $6_1 | 0);
    $1250($0_1 | 0, $4_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $1249($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$5;
    };
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   $1249($5_1 | 0, $3_1 + 12 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1827($0_1 | 0);
  abort();
 }
 
 function $909($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($1_1 | 0) != ($2_1 | 0)) {
     break label$2
    }
    return $3_1 | 0;
   }
   $3_1 = (HEAP32[$1_1 >> 2] | 0) + ($3_1 << 4 | 0) | 0;
   $4_1 = $3_1 & -268435456 | 0;
   $3_1 = ($4_1 >>> 24 | 0 | $4_1 | 0) ^ $3_1 | 0;
   $1_1 = $1_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $910($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($509($3_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[$6_1 >> 2] = -1;
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $6_1) | 0;
    HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
    label$3 : {
     switch (HEAP32[$6_1 >> 2] | 0 | 0) {
     case 0:
      HEAP8[$5_1 >> 0] = 0;
      break label$1;
     case 1:
      HEAP8[$5_1 >> 0] = 1;
      break label$1;
     default:
      break label$3;
     };
    }
    HEAP8[$5_1 >> 0] = 1;
    HEAP32[$4_1 >> 2] = 4;
    break label$1;
   }
   $807($6_1 | 0, $3_1 | 0);
   $1_1 = $522($6_1 | 0) | 0;
   $911($6_1 | 0) | 0;
   $807($6_1 | 0, $3_1 | 0);
   $3_1 = $912($6_1 | 0) | 0;
   $911($6_1 | 0) | 0;
   $913($6_1 | 0, $3_1 | 0);
   $914($6_1 | 12 | 0 | 0, $3_1 | 0);
   $3_1 = $6_1 + 24 | 0;
   HEAP8[$5_1 >> 0] = ($915($6_1 + 24 | 0 | 0, $2_1 | 0, $6_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 | 0, 1 | 0) | 0 | 0) == ($6_1 | 0);
   $1_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
   label$6 : while (1) {
    $3_1 = $1835($3_1 + -12 | 0 | 0) | 0;
    if (($3_1 | 0) != ($6_1 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $911($0_1) {
  $0_1 = $0_1 | 0;
  $1444(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $912($0_1) {
  $0_1 = $0_1 | 0;
  return $916($0_1 | 0, 19544 | 0) | 0 | 0;
 }
 
 function $913($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $914($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $915($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $15_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0, $10_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 120 | 0) >> 2] = $1_1;
  $8_1 = $917($2_1 | 0, $3_1 | 0) | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = 67;
  $9_1 = 0;
  $10_1 = $918($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $11_1 = $7_1 + 16 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 101 >>> 0) {
     break label$2
    }
    $11_1 = $1923($8_1 | 0) | 0;
    if (!$11_1) {
     break label$1
    }
    $919($10_1 | 0, $11_1 | 0);
   }
   $12_1 = $11_1;
   $1_1 = $2_1;
   label$3 : while (1) {
    label$4 : {
     if (($1_1 | 0) != ($3_1 | 0)) {
      break label$4
     }
     $13_1 = 0;
     label$5 : {
      label$6 : while (1) {
       $1_1 = $808($0_1 | 0, $7_1 + 120 | 0 | 0) | 0;
       label$7 : {
        label$8 : {
         if (!$8_1) {
          break label$8
         }
         if ($1_1) {
          break label$7
         }
        }
        label$9 : {
         if (!($812($0_1 | 0, $7_1 + 120 | 0 | 0) | 0)) {
          break label$9
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
        }
        break label$5;
       }
       $14_1 = $809($0_1 | 0) | 0;
       label$10 : {
        if ($6_1) {
         break label$10
        }
        $14_1 = $920($4_1 | 0, $14_1 | 0) | 0;
       }
       $15_1 = $13_1 + 1 | 0;
       $16_1 = 0;
       $12_1 = $11_1;
       $1_1 = $2_1;
       label$11 : while (1) {
        label$12 : {
         if (($1_1 | 0) != ($3_1 | 0)) {
          break label$12
         }
         $13_1 = $15_1;
         if (!($16_1 & 1 | 0)) {
          continue label$6
         }
         $811($0_1 | 0) | 0;
         $13_1 = $15_1;
         $12_1 = $11_1;
         $1_1 = $2_1;
         if (($9_1 + $8_1 | 0) >>> 0 < 2 >>> 0) {
          continue label$6
         }
         label$13 : while (1) {
          label$14 : {
           if (($1_1 | 0) != ($3_1 | 0)) {
            break label$14
           }
           $13_1 = $15_1;
           continue label$6;
          }
          label$15 : {
           if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (2 | 0)) {
            break label$15
           }
           if (($44($1_1 | 0) | 0 | 0) == ($15_1 | 0)) {
            break label$15
           }
           HEAP8[$12_1 >> 0] = 0;
           $9_1 = $9_1 + -1 | 0;
          }
          $12_1 = $12_1 + 1 | 0;
          $1_1 = $1_1 + 12 | 0;
          continue label$13;
         };
        }
        label$16 : {
         if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (1 | 0)) {
          break label$16
         }
         $17_1 = HEAPU8[($52($1_1 | 0, $13_1 | 0) | 0) >> 0] | 0;
         label$17 : {
          if ($6_1) {
           break label$17
          }
          $17_1 = $920($4_1 | 0, ($17_1 << 24 | 0) >> 24 | 0 | 0) | 0;
         }
         label$18 : {
          label$19 : {
           if (($14_1 & 255 | 0 | 0) != ($17_1 & 255 | 0 | 0)) {
            break label$19
           }
           $16_1 = 1;
           if (($44($1_1 | 0) | 0 | 0) != ($15_1 | 0)) {
            break label$16
           }
           HEAP8[$12_1 >> 0] = 2;
           $16_1 = 1;
           $9_1 = $9_1 + 1 | 0;
           break label$18;
          }
          HEAP8[$12_1 >> 0] = 0;
         }
         $8_1 = $8_1 + -1 | 0;
        }
        $12_1 = $12_1 + 1 | 0;
        $1_1 = $1_1 + 12 | 0;
        continue label$11;
       };
      };
     }
     label$20 : {
      label$21 : {
       label$22 : while (1) {
        if (($2_1 | 0) == ($3_1 | 0)) {
         break label$21
        }
        label$23 : {
         if ((HEAPU8[$11_1 >> 0] | 0 | 0) == (2 | 0)) {
          break label$23
         }
         $11_1 = $11_1 + 1 | 0;
         $2_1 = $2_1 + 12 | 0;
         continue label$22;
        }
        break label$22;
       };
       $3_1 = $2_1;
       break label$20;
      }
      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
     }
     $921($10_1 | 0) | 0;
     global$0 = $7_1 + 128 | 0;
     return $3_1 | 0;
    }
    label$24 : {
     label$25 : {
      if ($53($1_1 | 0) | 0) {
       break label$25
      }
      HEAP8[$12_1 >> 0] = 1;
      break label$24;
     }
     HEAP8[$12_1 >> 0] = 2;
     $9_1 = $9_1 + 1 | 0;
     $8_1 = $8_1 + -1 | 0;
    }
    $12_1 = $12_1 + 1 | 0;
    $1_1 = $1_1 + 12 | 0;
    continue label$3;
   };
  }
  $1805();
  abort();
 }
 
 function $916($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1439(HEAP32[$0_1 >> 2] | 0 | 0, $1405($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $917($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1762($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $918($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1749($0_1 | 0, $3_1 + 12 | 0 | 0, $861($2_1 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $919($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1750($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1750($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1751($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $920($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $921($0_1) {
  $0_1 = $0_1 | 0;
  $919($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $922($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $923($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $923($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $924($3_1 | 0) | 0;
  $2_1 = $925($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $926($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $41($6_1 + 192 | 0 | 0) | 0;
  $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
  $0_1 = $76($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($808($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($44($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $44($3_1 | 0) | 0;
     $497($3_1 | 0, ($44($3_1 | 0) | 0) << 1 | 0 | 0);
     $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
     $0_1 = $76($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($927($809($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $811($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($44($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $928($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $929($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($812($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1835($3_1 | 0) | 0;
  $1835($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $924($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    $0_1 = ($509($0_1 | 0) | 0) & 74 | 0;
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     if (($0_1 | 0) != (64 | 0)) {
      break label$3
     }
     return 8 | 0;
    }
    if (($0_1 | 0) != (8 | 0)) {
     break label$1
    }
    return 16 | 0;
   }
   return 0 | 0;
  }
  return 10 | 0;
 }
 
 function $925($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1003($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $926($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $807($3_1 + 8 | 0 | 0, $1_1 | 0);
  $1_1 = $912($3_1 + 8 | 0 | 0) | 0;
  HEAP8[$2_1 >> 0] = $1000($1_1 | 0) | 0;
  $1001($0_1 | 0, $1_1 | 0);
  $911($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $927($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  HEAP8[($10_1 + 15 | 0) >> 0] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$3
     }
     $11_1 = 43;
     label$4 : {
      $12_1 = $0_1 & 255 | 0;
      if ((HEAPU8[($9_1 + 24 | 0) >> 0] | 0 | 0) == ($12_1 | 0)) {
       break label$4
      }
      $11_1 = 45;
      if ((HEAPU8[($9_1 + 25 | 0) >> 0] | 0 | 0) != ($12_1 | 0)) {
       break label$3
      }
     }
     HEAP32[$3_1 >> 2] = $2_1 + 1 | 0;
     HEAP8[$2_1 >> 0] = $11_1;
     break label$2;
    }
    label$5 : {
     if (!($44($6_1 | 0) | 0)) {
      break label$5
     }
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$5
     }
     $0_1 = 0;
     $9_1 = HEAP32[$8_1 >> 2] | 0;
     if (($9_1 - $7_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$8_1 >> 2] = $9_1 + 4 | 0;
     HEAP32[$9_1 >> 2] = $0_1;
     break label$2;
    }
    $0_1 = -1;
    $9_1 = ($960($9_1 | 0, $9_1 + 26 | 0 | 0, $10_1 + 15 | 0 | 0) | 0) - $9_1 | 0;
    if (($9_1 | 0) > (23 | 0)) {
     break label$1
    }
    label$6 : {
     label$7 : {
      switch ($1_1 + -8 | 0 | 0) {
      case 0:
      case 2:
       if (($9_1 | 0) < ($1_1 | 0)) {
        break label$6
       }
       break label$1;
      case 1:
       break label$6;
      default:
       break label$7;
      };
     }
     if (($1_1 | 0) != (16 | 0)) {
      break label$6
     }
     if (($9_1 | 0) < (22 | 0)) {
      break label$6
     }
     $6_1 = HEAP32[$3_1 >> 2] | 0;
     if (($6_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     if (($6_1 - $2_1 | 0 | 0) > (2 | 0)) {
      break label$1
     }
     $0_1 = -1;
     if ((HEAPU8[($6_1 + -1 | 0) >> 0] | 0 | 0) != (48 | 0)) {
      break label$1
     }
     $0_1 = 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$3_1 >> 2] = $6_1 + 1 | 0;
     HEAP8[$6_1 >> 0] = HEAPU8[($9_1 + 10208 | 0) >> 0] | 0;
     break label$1;
    }
    $0_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[$3_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = HEAPU8[($9_1 + 10208 | 0) >> 0] | 0;
    HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
    $0_1 = 0;
    break label$1;
   }
   $0_1 = 0;
   HEAP32[$4_1 >> 2] = 0;
  }
  global$0 = $10_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $928($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6$hi = 0, i64toi32_i32$3 = 0, $4_1 = 0, $6_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $5_1 = 0, $42_1 = 0, $42$hi = 0, $46_1 = 0, $46$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($0_1 | 0) == ($1_1 | 0)) {
        break label$5
       }
       $5_1 = HEAP32[($680() | 0) >> 2] | 0;
       HEAP32[($680() | 0) >> 2] = 0;
       i64toi32_i32$0 = $893($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $958() | 0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $6_1 = i64toi32_i32$0;
       $6$hi = i64toi32_i32$1;
       label$6 : {
        label$7 : {
         $0_1 = HEAP32[($680() | 0) >> 2] | 0;
         if (!$0_1) {
          break label$7
         }
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
          break label$6
         }
         if (($0_1 | 0) == (68 | 0)) {
          break label$2
         }
         break label$3;
        }
        HEAP32[($680() | 0) >> 2] = $5_1;
        if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
         break label$3
        }
       }
       HEAP32[$2_1 >> 2] = 4;
       break label$4;
      }
      HEAP32[$2_1 >> 2] = 4;
     }
     $0_1 = 0;
     break label$1;
    }
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$0 = $601() | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $42_1 = i64toi32_i32$0;
    $42$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $42$hi;
    i64toi32_i32$3 = $42_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
     $16_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $17_1 = 0
      } else {
       $17_1 = 1
      }
      $18_1 = $17_1;
     } else {
      $18_1 = 0
     }
     $16_1 = $18_1;
    }
    if ($16_1) {
     break label$2
    }
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$1 = $177() | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $46_1 = i64toi32_i32$1;
    $46$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$1 = $46$hi;
    i64toi32_i32$0 = $46_1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
     $19_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
       $20_1 = 0
      } else {
       $20_1 = 1
      }
      $21_1 = $20_1;
     } else {
      $21_1 = 0
     }
     $19_1 = $21_1;
    }
    if ($19_1) {
     break label$2
    }
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $6$hi;
    $0_1 = $6_1;
    break label$1;
   }
   HEAP32[$2_1 >> 2] = 4;
   label$8 : {
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1;
    if (($6$hi | 0) < (i64toi32_i32$2 | 0)) {
     $22_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $23_1 = 0
      } else {
       $23_1 = 1
      }
      $24_1 = $23_1;
     } else {
      $24_1 = 0
     }
     $22_1 = $24_1;
    }
    if ($22_1) {
     break label$8
    }
    $0_1 = $177() | 0;
    break label$1;
   }
   $0_1 = $601() | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $929($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!($44($0_1 | 0) | 0)) {
    break label$1
   }
   if (($2_1 - $1_1 | 0 | 0) < (5 | 0)) {
    break label$1
   }
   $1225($1_1 | 0, $2_1 | 0);
   $4_1 = $2_1 + -4 | 0;
   $2_1 = $26($0_1 | 0) | 0;
   $5_1 = $2_1 + ($44($0_1 | 0) | 0) | 0;
   label$2 : {
    label$3 : while (1) {
     $0_1 = HEAP8[$2_1 >> 0] | 0;
     if ($1_1 >>> 0 >= $4_1 >>> 0) {
      break label$2
     }
     label$4 : {
      if (($0_1 | 0) < (1 | 0)) {
       break label$4
      }
      if (($0_1 | 0) >= ($581() | 0 | 0)) {
       break label$4
      }
      if ((HEAP32[$1_1 >> 2] | 0 | 0) == (HEAP8[$2_1 >> 0] | 0 | 0)) {
       break label$4
      }
      HEAP32[$3_1 >> 2] = 4;
      return;
     }
     $2_1 = ($5_1 - $2_1 | 0 | 0) > (1 | 0) ? $2_1 + 1 | 0 : $2_1;
     $1_1 = $1_1 + 4 | 0;
     continue label$3;
    };
   }
   if (($0_1 | 0) < (1 | 0)) {
    break label$1
   }
   if (($0_1 | 0) >= ($581() | 0 | 0)) {
    break label$1
   }
   if (((HEAP32[$4_1 >> 2] | 0) + -1 | 0) >>> 0 < (HEAP8[$2_1 >> 0] | 0) >>> 0) {
    break label$1
   }
   HEAP32[$3_1 >> 2] = 4;
  }
 }
 
 function $930($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $931($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $931($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $114_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $924($3_1 | 0) | 0;
  $2_1 = $925($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $926($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $41($6_1 + 192 | 0 | 0) | 0;
  $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
  $0_1 = $76($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($808($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($44($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $44($3_1 | 0) | 0;
     $497($3_1 | 0, ($44($3_1 | 0) | 0) << 1 | 0 | 0);
     $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
     $0_1 = $76($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($927($809($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $811($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($44($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $932($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $114_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $114_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $929($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($812($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1835($3_1 | 0) | 0;
  $1835($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $932($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $6$hi = 0, $6_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $5_1 = 0, $41_1 = 0, $41$hi = 0, $43$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($0_1 | 0) == ($1_1 | 0)) {
        break label$5
       }
       $5_1 = HEAP32[($680() | 0) >> 2] | 0;
       HEAP32[($680() | 0) >> 2] = 0;
       i64toi32_i32$0 = $893($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $958() | 0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $6_1 = i64toi32_i32$0;
       $6$hi = i64toi32_i32$1;
       label$6 : {
        label$7 : {
         $0_1 = HEAP32[($680() | 0) >> 2] | 0;
         if (!$0_1) {
          break label$7
         }
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
          break label$6
         }
         if (($0_1 | 0) == (68 | 0)) {
          break label$2
         }
         break label$3;
        }
        HEAP32[($680() | 0) >> 2] = $5_1;
        if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
         break label$3
        }
       }
       HEAP32[$2_1 >> 2] = 4;
       break label$4;
      }
      HEAP32[$2_1 >> 2] = 4;
     }
     i64toi32_i32$1 = 0;
     $6_1 = 0;
     $6$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$1 = $1763() | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $41_1 = i64toi32_i32$1;
    $41$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$1 = $41$hi;
    i64toi32_i32$3 = $41_1;
    if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
     $15_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $16_1 = 0
      } else {
       $16_1 = 1
      }
      $17_1 = $16_1;
     } else {
      $17_1 = 0
     }
     $15_1 = $17_1;
    }
    if ($15_1) {
     break label$2
    }
    i64toi32_i32$2 = $1764() | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $43$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$0 = $43$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$1 = $6_1;
    if ((i64toi32_i32$0 | 0) > ($6$hi | 0)) {
     $18_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
       $19_1 = 0
      } else {
       $19_1 = 1
      }
      $20_1 = $19_1;
     } else {
      $20_1 = 0
     }
     $18_1 = $20_1;
    }
    if ($18_1) {
     break label$1
    }
   }
   HEAP32[$2_1 >> 2] = 4;
   label$8 : {
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $21_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
       $22_1 = 0
      } else {
       $22_1 = 1
      }
      $23_1 = $22_1;
     } else {
      $23_1 = 0
     }
     $21_1 = $23_1;
    }
    if ($21_1) {
     break label$8
    }
    i64toi32_i32$1 = $1764() | 0;
    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
    $6_1 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$3;
    break label$1;
   }
   i64toi32_i32$3 = $1763() | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$3;
   $6$hi = i64toi32_i32$1;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$3 | 0;
 }
 
 function $933($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $934($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $934($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $924($3_1 | 0) | 0;
  $2_1 = $925($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $926($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $41($6_1 + 192 | 0 | 0) | 0;
  $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
  $0_1 = $76($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($808($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($44($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $44($3_1 | 0) | 0;
     $497($3_1 | 0, ($44($3_1 | 0) | 0) << 1 | 0 | 0);
     $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
     $0_1 = $76($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($927($809($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $811($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($44($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP16[$5_1 >> 1] = $935($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $929($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($812($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1835($3_1 | 0) | 0;
  $1835($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $935($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $6_1 = 0, $53$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break label$7
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break label$7
         }
         HEAP32[$2_1 >> 2] = 4;
         break label$5;
        }
        $6_1 = HEAP32[($680() | 0) >> 2] | 0;
        HEAP32[($680() | 0) >> 2] = 0;
        i64toi32_i32$0 = $892($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $958() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$1;
        label$8 : {
         label$9 : {
          $0_1 = HEAP32[($680() | 0) >> 2] | 0;
          if (!$0_1) {
           break label$9
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break label$8
          }
          if (($0_1 | 0) == (68 | 0)) {
           break label$3
          }
          break label$4;
         }
         HEAP32[($680() | 0) >> 2] = $6_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$4
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$5;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      $0_1 = 0;
      break label$1;
     }
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = 0;
     $53$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$0 = $53$hi;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $7_1 >>> 0 <= ($593() | 0) >>> 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0_1 = $593() | 0;
    break label$1;
   }
   $0_1 = $7_1;
   $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 & 65535 | 0 | 0;
 }
 
 function $936($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $937($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $937($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $924($3_1 | 0) | 0;
  $2_1 = $925($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $926($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $41($6_1 + 192 | 0 | 0) | 0;
  $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
  $0_1 = $76($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($808($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($44($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $44($3_1 | 0) | 0;
     $497($3_1 | 0, ($44($3_1 | 0) | 0) << 1 | 0 | 0);
     $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
     $0_1 = $76($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($927($809($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $811($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($44($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $938($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $929($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($812($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1835($3_1 | 0) | 0;
  $1835($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $938($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $6_1 = 0, $53$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break label$7
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break label$7
         }
         HEAP32[$2_1 >> 2] = 4;
         break label$5;
        }
        $6_1 = HEAP32[($680() | 0) >> 2] | 0;
        HEAP32[($680() | 0) >> 2] = 0;
        i64toi32_i32$0 = $892($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $958() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$1;
        label$8 : {
         label$9 : {
          $0_1 = HEAP32[($680() | 0) >> 2] | 0;
          if (!$0_1) {
           break label$9
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break label$8
          }
          if (($0_1 | 0) == (68 | 0)) {
           break label$3
          }
          break label$4;
         }
         HEAP32[($680() | 0) >> 2] = $6_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$4
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$5;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      $0_1 = 0;
      break label$1;
     }
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = 0;
     $53$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$0 = $53$hi;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $7_1 >>> 0 <= ($599() | 0) >>> 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0_1 = $599() | 0;
    break label$1;
   }
   $0_1 = $7_1;
   $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $939($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $940($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $940($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $924($3_1 | 0) | 0;
  $2_1 = $925($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $926($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $41($6_1 + 192 | 0 | 0) | 0;
  $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
  $0_1 = $76($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($808($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($44($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $44($3_1 | 0) | 0;
     $497($3_1 | 0, ($44($3_1 | 0) | 0) << 1 | 0 | 0);
     $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
     $0_1 = $76($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($927($809($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $811($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($44($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $941($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $929($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($812($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1835($3_1 | 0) | 0;
  $1835($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $941($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $6_1 = 0, $53$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break label$7
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break label$7
         }
         HEAP32[$2_1 >> 2] = 4;
         break label$5;
        }
        $6_1 = HEAP32[($680() | 0) >> 2] | 0;
        HEAP32[($680() | 0) >> 2] = 0;
        i64toi32_i32$0 = $892($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $958() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$1;
        label$8 : {
         label$9 : {
          $0_1 = HEAP32[($680() | 0) >> 2] | 0;
          if (!$0_1) {
           break label$9
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break label$8
          }
          if (($0_1 | 0) == (68 | 0)) {
           break label$3
          }
          break label$4;
         }
         HEAP32[($680() | 0) >> 2] = $6_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$4
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$5;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      $0_1 = 0;
      break label$1;
     }
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = 0;
     $53$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$0 = $53$hi;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $7_1 >>> 0 <= ($57() | 0) >>> 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0_1 = $57() | 0;
    break label$1;
   }
   $0_1 = $7_1;
   $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $942($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $943($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $943($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $114_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $924($3_1 | 0) | 0;
  $2_1 = $925($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $926($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $41($6_1 + 192 | 0 | 0) | 0;
  $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
  $0_1 = $76($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($808($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($44($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $44($3_1 | 0) | 0;
     $497($3_1 | 0, ($44($3_1 | 0) | 0) << 1 | 0 | 0);
     $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
     $0_1 = $76($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($927($809($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $811($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($44($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $944($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $114_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $114_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $929($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($812($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1835($3_1 | 0) | 0;
  $1835($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $944($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7$hi = 0, $7_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $4_1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $6_1 = 0, $51$hi = 0, $57$hi = 0, $16_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break label$7
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break label$7
         }
         HEAP32[$2_1 >> 2] = 4;
         break label$5;
        }
        $6_1 = HEAP32[($680() | 0) >> 2] | 0;
        HEAP32[($680() | 0) >> 2] = 0;
        i64toi32_i32$0 = $892($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $958() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$1;
        label$8 : {
         label$9 : {
          $0_1 = HEAP32[($680() | 0) >> 2] | 0;
          if (!$0_1) {
           break label$9
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break label$8
          }
          if (($0_1 | 0) == (68 | 0)) {
           break label$3
          }
          break label$4;
         }
         HEAP32[($680() | 0) >> 2] = $6_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$4
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$5;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      i64toi32_i32$1 = 0;
      $7_1 = 0;
      $7$hi = i64toi32_i32$1;
      break label$1;
     }
     i64toi32_i32$1 = $1767() | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $51$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$0 = $51$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$3 = $7_1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= $7_1 >>> 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    i64toi32_i32$2 = $1767() | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $7_1 = i64toi32_i32$2;
    $7$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + $7$hi | 0;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
   $57$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $7$hi;
   i64toi32_i32$2 = ($5_1 | 0) == (45 | 0);
   i64toi32_i32$5 = $57$hi;
   $16_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$1 = i64toi32_i32$2 ? $16_1 : i64toi32_i32$1;
   i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$5 : $7$hi;
   $7_1 = i64toi32_i32$1;
   $7$hi = i64toi32_i32$0;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$1 = $7_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $945($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $946($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $946($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $947($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 223 | 0 | 0, $6_1 + 222 | 0 | 0);
  $3_1 = $41($6_1 + 192 | 0 | 0) | 0;
  $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
  $1_1 = $76($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($808($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($44($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $44($3_1 | 0) | 0;
     $497($3_1 | 0, ($44($3_1 | 0) | 0) << 1 | 0 | 0);
     $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
     $1_1 = $76($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($948($809($6_1 + 264 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, HEAP8[($6_1 + 223 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 222 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $811($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($44($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF32[$5_1 >> 2] = Math_fround($949($1_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0));
  $929($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($812($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1835($3_1 | 0) | 0;
  $1835($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $1_1 | 0;
 }
 
 function $947($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $807($5_1 + 8 | 0 | 0, $1_1 | 0);
  $957($522($5_1 + 8 | 0 | 0) | 0 | 0, 10208 | 0, 10240 | 0, $2_1 | 0) | 0;
  $2_1 = $912($5_1 + 8 | 0 | 0) | 0;
  HEAP8[$3_1 >> 0] = $999($2_1 | 0) | 0;
  HEAP8[$4_1 >> 0] = $1000($2_1 | 0) | 0;
  $1001($0_1 | 0, $2_1 | 0);
  $911($5_1 + 8 | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $948($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $12_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  HEAP8[($12_1 + 15 | 0) >> 0] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$3
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$2
     }
     $0_1 = 0;
     HEAP8[$1_1 >> 0] = 0;
     $11_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = 46;
     if (!($44($7_1 | 0) | 0)) {
      break label$1
     }
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $5_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $5_1;
     break label$1;
    }
    label$4 : {
     if (($0_1 | 0) != ($6_1 | 0)) {
      break label$4
     }
     if (!($44($7_1 | 0) | 0)) {
      break label$4
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$2
     }
     $0_1 = 0;
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $0_1;
     $0_1 = 0;
     HEAP32[$10_1 >> 2] = 0;
     break label$1;
    }
    $0_1 = -1;
    $11_1 = ($1002($11_1 | 0, $11_1 + 32 | 0 | 0, $12_1 + 15 | 0 | 0) | 0) - $11_1 | 0;
    if (($11_1 | 0) > (31 | 0)) {
     break label$1
    }
    $5_1 = HEAPU8[($11_1 + 10208 | 0) >> 0] | 0;
    label$5 : {
     label$6 : {
      switch ($11_1 + -22 | 0 | 0) {
      case 2:
      case 3:
       label$9 : {
        $11_1 = HEAP32[$4_1 >> 2] | 0;
        if (($11_1 | 0) == ($3_1 | 0)) {
         break label$9
        }
        $0_1 = -1;
        if (((HEAPU8[($11_1 + -1 | 0) >> 0] | 0) & 95 | 0 | 0) != ((HEAPU8[$2_1 >> 0] | 0) & 127 | 0 | 0)) {
         break label$1
        }
       }
       HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
       HEAP8[$11_1 >> 0] = $5_1;
       $0_1 = 0;
       break label$1;
      case 0:
      case 1:
       HEAP8[$2_1 >> 0] = 80;
       break label$5;
      default:
       break label$6;
      };
     }
     $0_1 = HEAP8[$2_1 >> 0] | 0;
     if (($5_1 & 95 | 0 | 0) != ($0_1 | 0)) {
      break label$5
     }
     HEAP8[$2_1 >> 0] = $0_1 | 128 | 0;
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$5
     }
     HEAP8[$1_1 >> 0] = 0;
     if (!($44($7_1 | 0) | 0)) {
      break label$5
     }
     $0_1 = HEAP32[$9_1 >> 2] | 0;
     if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$5
     }
     $1_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = $1_1;
    }
    $0_1 = HEAP32[$4_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = $5_1;
    $0_1 = 0;
    if (($11_1 | 0) > (21 | 0)) {
     break label$1
    }
    HEAP32[$10_1 >> 2] = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
    break label$1;
   }
   $0_1 = -1;
  }
  global$0 = $12_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $949($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = Math_fround(0), $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     $4_1 = HEAP32[($680() | 0) >> 2] | 0;
     HEAP32[($680() | 0) >> 2] = 0;
     $5_1 = Math_fround($1769($0_1 | 0, $3_1 + 12 | 0 | 0));
     label$4 : {
      label$5 : {
       $0_1 = HEAP32[($680() | 0) >> 2] | 0;
       if (!$0_1) {
        break label$5
       }
       if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$4
       }
       if (($0_1 | 0) != (68 | 0)) {
        break label$1
       }
       HEAP32[$2_1 >> 2] = 4;
       break label$1;
      }
      HEAP32[($680() | 0) >> 2] = $4_1;
      if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
       break label$1
      }
     }
     HEAP32[$2_1 >> 2] = 4;
     break label$2;
    }
    HEAP32[$2_1 >> 2] = 4;
   }
   $5_1 = Math_fround(0.0);
  }
  global$0 = $3_1 + 16 | 0;
  return Math_fround($5_1);
 }
 
 function $950($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $951($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $951($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $947($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 223 | 0 | 0, $6_1 + 222 | 0 | 0);
  $3_1 = $41($6_1 + 192 | 0 | 0) | 0;
  $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
  $1_1 = $76($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($808($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($44($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $44($3_1 | 0) | 0;
     $497($3_1 | 0, ($44($3_1 | 0) | 0) << 1 | 0 | 0);
     $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
     $1_1 = $76($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($948($809($6_1 + 264 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, HEAP8[($6_1 + 223 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 222 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $811($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($44($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF64[$5_1 >> 3] = +$952($1_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0);
  $929($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($812($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1835($3_1 | 0) | 0;
  $1835($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $1_1 | 0;
 }
 
 function $952($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0.0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     $4_1 = HEAP32[($680() | 0) >> 2] | 0;
     HEAP32[($680() | 0) >> 2] = 0;
     $5_1 = +$1770($0_1 | 0, $3_1 + 12 | 0 | 0);
     label$4 : {
      label$5 : {
       $0_1 = HEAP32[($680() | 0) >> 2] | 0;
       if (!$0_1) {
        break label$5
       }
       if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$4
       }
       if (($0_1 | 0) != (68 | 0)) {
        break label$1
       }
       HEAP32[$2_1 >> 2] = 4;
       break label$1;
      }
      HEAP32[($680() | 0) >> 2] = $4_1;
      if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
       break label$1
      }
     }
     HEAP32[$2_1 >> 2] = 4;
     break label$2;
    }
    HEAP32[$2_1 >> 2] = 4;
   }
   $5_1 = 0.0;
  }
  global$0 = $3_1 + 16 | 0;
  return +$5_1;
 }
 
 function $953($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $954($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $954($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $123_1 = 0, $126_1 = 0;
  $6_1 = global$0 - 288 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 272 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 280 | 0) >> 2] = $1_1;
  $947($6_1 + 224 | 0 | 0, $3_1 | 0, $6_1 + 240 | 0 | 0, $6_1 + 239 | 0 | 0, $6_1 + 238 | 0 | 0);
  $3_1 = $41($6_1 + 208 | 0 | 0) | 0;
  $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
  $1_1 = $76($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 204 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 32 | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 0;
  HEAP8[($6_1 + 23 | 0) >> 0] = 1;
  HEAP8[($6_1 + 22 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($808($6_1 + 280 | 0 | 0, $6_1 + 272 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0) != ($1_1 + ($44($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $44($3_1 | 0) | 0;
     $497($3_1 | 0, ($44($3_1 | 0) | 0) << 1 | 0 | 0);
     $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
     $1_1 = $76($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 204 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($948($809($6_1 + 280 | 0 | 0) | 0 | 0, $6_1 + 23 | 0 | 0, $6_1 + 22 | 0 | 0, $1_1 | 0, $6_1 + 204 | 0 | 0, HEAP8[($6_1 + 239 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 238 | 0) >> 0] | 0 | 0, $6_1 + 224 | 0 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 240 | 0 | 0) | 0) {
     break label$1
    }
    $811($6_1 + 280 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($44($6_1 + 224 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 23 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 32 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  }
  $955($6_1 | 0, $1_1 | 0, HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0, $4_1 | 0);
  i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  $123_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $123_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  $126_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $126_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $929($6_1 + 224 | 0 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($812($6_1 + 280 | 0 | 0, $6_1 + 272 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 280 | 0) >> 2] | 0;
  $1835($3_1 | 0) | 0;
  $1835($6_1 + 224 | 0 | 0) | 0;
  global$0 = $6_1 + 288 | 0;
  return $1_1 | 0;
 }
 
 function $955($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $6$hi = 0, $7_1 = 0, $7$hi = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$3
     }
     $5_1 = HEAP32[($680() | 0) >> 2] | 0;
     HEAP32[($680() | 0) >> 2] = 0;
     $1771($4_1 | 0, $1_1 | 0, $4_1 + 28 | 0 | 0);
     i64toi32_i32$0 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     $6_1 = i64toi32_i32$0;
     $6$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     $7_1 = i64toi32_i32$1;
     $7$hi = i64toi32_i32$0;
     label$4 : {
      label$5 : {
       $1_1 = HEAP32[($680() | 0) >> 2] | 0;
       if (!$1_1) {
        break label$5
       }
       if ((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
        break label$4
       }
       if (($1_1 | 0) != (68 | 0)) {
        break label$1
       }
       HEAP32[$3_1 >> 2] = 4;
       break label$1;
      }
      HEAP32[($680() | 0) >> 2] = $5_1;
      if ((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$1
      }
     }
     HEAP32[$3_1 >> 2] = 4;
     break label$2;
    }
    HEAP32[$3_1 >> 2] = 4;
   }
   i64toi32_i32$0 = 0;
   $7_1 = 0;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $6_1 = 0;
   $6$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $7_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 32 | 0;
 }
 
 function $956($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $2_1 = $41($6_1 + 208 | 0 | 0) | 0;
  $807($6_1 + 16 | 0 | 0, $3_1 | 0);
  $957($522($6_1 + 16 | 0 | 0) | 0 | 0, 10208 | 0, 10234 | 0, $6_1 + 224 | 0 | 0) | 0;
  $911($6_1 + 16 | 0 | 0) | 0;
  $3_1 = $41($6_1 + 192 | 0 | 0) | 0;
  $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
  $1_1 = $76($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($808($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($44($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $44($3_1 | 0) | 0;
     $497($3_1 | 0, ($44($3_1 | 0) | 0) << 1 | 0 | 0);
     $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
     $1_1 = $76($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $1_1 | 0;
    }
    if ($927($809($6_1 + 264 | 0 | 0) | 0 | 0, 16 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, 0 | 0, $2_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $811($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $497($3_1 | 0, (HEAP32[($6_1 + 188 | 0) >> 2] | 0) - $1_1 | 0 | 0);
  $1_1 = $25($3_1 | 0) | 0;
  $7_1 = $958() | 0;
  HEAP32[$6_1 >> 2] = $5_1;
  label$4 : {
   if (($959($1_1 | 0, $7_1 | 0, 10241 | 0, $6_1 | 0) | 0 | 0) == (1 | 0)) {
    break label$4
   }
   HEAP32[$4_1 >> 2] = 4;
  }
  label$5 : {
   if (!($812($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1835($3_1 | 0) | 0;
  $1835($2_1 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $1_1 | 0;
 }
 
 function $957($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $958() {
  label$1 : {
   if ((HEAPU8[(0 + 19464 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1867(19464 | 0) | 0)) {
    break label$1
   }
   HEAP32[(0 + 19460 | 0) >> 2] = $874(2147483647 | 0, 10485 | 0, 0 | 0) | 0;
   $1875(19464 | 0);
  }
  return HEAP32[(0 + 19460 | 0) >> 2] | 0 | 0;
 }
 
 function $959($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
  $1_1 = $961($4_1 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $734($0_1 | 0, $2_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $962($1_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $960($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = (HEAPU8[$2_1 >> 0] | 0) & 255 | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $1_1 = $0_1;
    }
    return $1_1 | 0;
   }
   $0_1 = $0_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $961($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $891(HEAP32[$1_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $962($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $891($1_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $963($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($509($3_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[$6_1 >> 2] = -1;
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $6_1) | 0;
    HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
    label$3 : {
     switch (HEAP32[$6_1 >> 2] | 0 | 0) {
     case 0:
      HEAP8[$5_1 >> 0] = 0;
      break label$1;
     case 1:
      HEAP8[$5_1 >> 0] = 1;
      break label$1;
     default:
      break label$3;
     };
    }
    HEAP8[$5_1 >> 0] = 1;
    HEAP32[$4_1 >> 2] = 4;
    break label$1;
   }
   $807($6_1 | 0, $3_1 | 0);
   $1_1 = $821($6_1 | 0) | 0;
   $911($6_1 | 0) | 0;
   $807($6_1 | 0, $3_1 | 0);
   $3_1 = $964($6_1 | 0) | 0;
   $911($6_1 | 0) | 0;
   $965($6_1 | 0, $3_1 | 0);
   $966($6_1 | 12 | 0 | 0, $3_1 | 0);
   $3_1 = $6_1 + 24 | 0;
   HEAP8[$5_1 >> 0] = ($967($6_1 + 24 | 0 | 0, $2_1 | 0, $6_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 | 0, 1 | 0) | 0 | 0) == ($6_1 | 0);
   $1_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
   label$6 : while (1) {
    $3_1 = $1849($3_1 + -12 | 0 | 0) | 0;
    if (($3_1 | 0) != ($6_1 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $964($0_1) {
  $0_1 = $0_1 | 0;
  return $916($0_1 | 0, 19552 | 0) | 0 | 0;
 }
 
 function $965($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $966($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $967($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $15_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0, $10_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 120 | 0) >> 2] = $1_1;
  $8_1 = $968($2_1 | 0, $3_1 | 0) | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = 67;
  $9_1 = 0;
  $10_1 = $918($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $11_1 = $7_1 + 16 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 101 >>> 0) {
     break label$2
    }
    $11_1 = $1923($8_1 | 0) | 0;
    if (!$11_1) {
     break label$1
    }
    $919($10_1 | 0, $11_1 | 0);
   }
   $12_1 = $11_1;
   $1_1 = $2_1;
   label$3 : while (1) {
    label$4 : {
     if (($1_1 | 0) != ($3_1 | 0)) {
      break label$4
     }
     $13_1 = 0;
     label$5 : {
      label$6 : while (1) {
       $1_1 = $822($0_1 | 0, $7_1 + 120 | 0 | 0) | 0;
       label$7 : {
        label$8 : {
         if (!$8_1) {
          break label$8
         }
         if ($1_1) {
          break label$7
         }
        }
        label$9 : {
         if (!($826($0_1 | 0, $7_1 + 120 | 0 | 0) | 0)) {
          break label$9
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
        }
        break label$5;
       }
       $14_1 = $823($0_1 | 0) | 0;
       label$10 : {
        if ($6_1) {
         break label$10
        }
        $14_1 = $969($4_1 | 0, $14_1 | 0) | 0;
       }
       $15_1 = $13_1 + 1 | 0;
       $16_1 = 0;
       $12_1 = $11_1;
       $1_1 = $2_1;
       label$11 : while (1) {
        label$12 : {
         if (($1_1 | 0) != ($3_1 | 0)) {
          break label$12
         }
         $13_1 = $15_1;
         if (!($16_1 & 1 | 0)) {
          continue label$6
         }
         $825($0_1 | 0) | 0;
         $13_1 = $15_1;
         $12_1 = $11_1;
         $1_1 = $2_1;
         if (($9_1 + $8_1 | 0) >>> 0 < 2 >>> 0) {
          continue label$6
         }
         label$13 : while (1) {
          label$14 : {
           if (($1_1 | 0) != ($3_1 | 0)) {
            break label$14
           }
           $13_1 = $15_1;
           continue label$6;
          }
          label$15 : {
           if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (2 | 0)) {
            break label$15
           }
           if (($970($1_1 | 0) | 0 | 0) == ($15_1 | 0)) {
            break label$15
           }
           HEAP8[$12_1 >> 0] = 0;
           $9_1 = $9_1 + -1 | 0;
          }
          $12_1 = $12_1 + 1 | 0;
          $1_1 = $1_1 + 12 | 0;
          continue label$13;
         };
        }
        label$16 : {
         if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (1 | 0)) {
          break label$16
         }
         $17_1 = HEAP32[($971($1_1 | 0, $13_1 | 0) | 0) >> 2] | 0;
         label$17 : {
          if ($6_1) {
           break label$17
          }
          $17_1 = $969($4_1 | 0, $17_1 | 0) | 0;
         }
         label$18 : {
          label$19 : {
           if (($14_1 | 0) != ($17_1 | 0)) {
            break label$19
           }
           $16_1 = 1;
           if (($970($1_1 | 0) | 0 | 0) != ($15_1 | 0)) {
            break label$16
           }
           HEAP8[$12_1 >> 0] = 2;
           $16_1 = 1;
           $9_1 = $9_1 + 1 | 0;
           break label$18;
          }
          HEAP8[$12_1 >> 0] = 0;
         }
         $8_1 = $8_1 + -1 | 0;
        }
        $12_1 = $12_1 + 1 | 0;
        $1_1 = $1_1 + 12 | 0;
        continue label$11;
       };
      };
     }
     label$20 : {
      label$21 : {
       label$22 : while (1) {
        if (($2_1 | 0) == ($3_1 | 0)) {
         break label$21
        }
        label$23 : {
         if ((HEAPU8[$11_1 >> 0] | 0 | 0) == (2 | 0)) {
          break label$23
         }
         $11_1 = $11_1 + 1 | 0;
         $2_1 = $2_1 + 12 | 0;
         continue label$22;
        }
        break label$22;
       };
       $3_1 = $2_1;
       break label$20;
      }
      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
     }
     $921($10_1 | 0) | 0;
     global$0 = $7_1 + 128 | 0;
     return $3_1 | 0;
    }
    label$24 : {
     label$25 : {
      if ($972($1_1 | 0) | 0) {
       break label$25
      }
      HEAP8[$12_1 >> 0] = 1;
      break label$24;
     }
     HEAP8[$12_1 >> 0] = 2;
     $9_1 = $9_1 + 1 | 0;
     $8_1 = $8_1 + -1 | 0;
    }
    $12_1 = $12_1 + 1 | 0;
    $1_1 = $1_1 + 12 | 0;
    continue label$3;
   };
  }
  $1805();
  abort();
 }
 
 function $968($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1772($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $969($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $970($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($1096($0_1 | 0) | 0)) {
    break label$1
   }
   return $1097($0_1 | 0) | 0 | 0;
  }
  return $1098($0_1 | 0) | 0 | 0;
 }
 
 function $971($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1093($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $972($0_1) {
  $0_1 = $0_1 | 0;
  return !($970($0_1 | 0) | 0) | 0;
 }
 
 function $973($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $974($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $974($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $924($3_1 | 0) | 0;
  $2_1 = $975($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $976($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $41($6_1 + 192 | 0 | 0) | 0;
  $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
  $0_1 = $76($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($822($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($44($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $44($3_1 | 0) | 0;
     $497($3_1 | 0, ($44($3_1 | 0) | 0) << 1 | 0 | 0);
     $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
     $0_1 = $76($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($977($823($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $825($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($44($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $928($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $929($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($826($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1835($3_1 | 0) | 0;
  $1835($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $975($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1008($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $976($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $807($3_1 + 8 | 0 | 0, $1_1 | 0);
  $1_1 = $964($3_1 + 8 | 0 | 0) | 0;
  HEAP32[$2_1 >> 2] = $1005($1_1 | 0) | 0;
  $1006($0_1 | 0, $1_1 | 0);
  $911($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $977($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$3
     }
     $11_1 = 43;
     label$4 : {
      if ((HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
       break label$4
      }
      $11_1 = 45;
      if ((HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
       break label$3
      }
     }
     HEAP32[$3_1 >> 2] = $2_1 + 1 | 0;
     HEAP8[$2_1 >> 0] = $11_1;
     break label$2;
    }
    label$5 : {
     if (!($44($6_1 | 0) | 0)) {
      break label$5
     }
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$5
     }
     $0_1 = 0;
     $9_1 = HEAP32[$8_1 >> 2] | 0;
     if (($9_1 - $7_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$8_1 >> 2] = $9_1 + 4 | 0;
     HEAP32[$9_1 >> 2] = $0_1;
     break label$2;
    }
    $0_1 = -1;
    $9_1 = ($998($9_1 | 0, $9_1 + 104 | 0 | 0, $10_1 + 12 | 0 | 0) | 0) - $9_1 | 0;
    if (($9_1 | 0) > (92 | 0)) {
     break label$1
    }
    $6_1 = $9_1 >> 2 | 0;
    label$6 : {
     label$7 : {
      switch ($1_1 + -8 | 0 | 0) {
      case 0:
      case 2:
       if (($6_1 | 0) < ($1_1 | 0)) {
        break label$6
       }
       break label$1;
      case 1:
       break label$6;
      default:
       break label$7;
      };
     }
     if (($1_1 | 0) != (16 | 0)) {
      break label$6
     }
     if (($9_1 | 0) < (88 | 0)) {
      break label$6
     }
     $9_1 = HEAP32[$3_1 >> 2] | 0;
     if (($9_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     if (($9_1 - $2_1 | 0 | 0) > (2 | 0)) {
      break label$1
     }
     $0_1 = -1;
     if ((HEAPU8[($9_1 + -1 | 0) >> 0] | 0 | 0) != (48 | 0)) {
      break label$1
     }
     $0_1 = 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$3_1 >> 2] = $9_1 + 1 | 0;
     HEAP8[$9_1 >> 0] = HEAPU8[($6_1 + 10208 | 0) >> 0] | 0;
     break label$1;
    }
    $0_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[$3_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = HEAPU8[($6_1 + 10208 | 0) >> 0] | 0;
    HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
    $0_1 = 0;
    break label$1;
   }
   $0_1 = 0;
   HEAP32[$4_1 >> 2] = 0;
  }
  global$0 = $10_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $978($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $979($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $979($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $114_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $924($3_1 | 0) | 0;
  $2_1 = $975($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $976($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $41($6_1 + 192 | 0 | 0) | 0;
  $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
  $0_1 = $76($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($822($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($44($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $44($3_1 | 0) | 0;
     $497($3_1 | 0, ($44($3_1 | 0) | 0) << 1 | 0 | 0);
     $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
     $0_1 = $76($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($977($823($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $825($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($44($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $932($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $114_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $114_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $929($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($826($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1835($3_1 | 0) | 0;
  $1835($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $980($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $981($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $981($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $924($3_1 | 0) | 0;
  $2_1 = $975($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $976($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $41($6_1 + 192 | 0 | 0) | 0;
  $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
  $0_1 = $76($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($822($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($44($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $44($3_1 | 0) | 0;
     $497($3_1 | 0, ($44($3_1 | 0) | 0) << 1 | 0 | 0);
     $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
     $0_1 = $76($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($977($823($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $825($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($44($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP16[$5_1 >> 1] = $935($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $929($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($826($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1835($3_1 | 0) | 0;
  $1835($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $982($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $983($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $983($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $924($3_1 | 0) | 0;
  $2_1 = $975($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $976($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $41($6_1 + 192 | 0 | 0) | 0;
  $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
  $0_1 = $76($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($822($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($44($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $44($3_1 | 0) | 0;
     $497($3_1 | 0, ($44($3_1 | 0) | 0) << 1 | 0 | 0);
     $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
     $0_1 = $76($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($977($823($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $825($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($44($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $938($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $929($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($826($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1835($3_1 | 0) | 0;
  $1835($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $984($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $985($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $985($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $924($3_1 | 0) | 0;
  $2_1 = $975($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $976($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $41($6_1 + 192 | 0 | 0) | 0;
  $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
  $0_1 = $76($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($822($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($44($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $44($3_1 | 0) | 0;
     $497($3_1 | 0, ($44($3_1 | 0) | 0) << 1 | 0 | 0);
     $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
     $0_1 = $76($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($977($823($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $825($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($44($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $941($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $929($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($826($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1835($3_1 | 0) | 0;
  $1835($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $986($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $987($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $987($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $114_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $924($3_1 | 0) | 0;
  $2_1 = $975($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $976($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $41($6_1 + 192 | 0 | 0) | 0;
  $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
  $0_1 = $76($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($822($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($44($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $44($3_1 | 0) | 0;
     $497($3_1 | 0, ($44($3_1 | 0) | 0) << 1 | 0 | 0);
     $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
     $0_1 = $76($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($977($823($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $825($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($44($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $944($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $114_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $114_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $929($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($826($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1835($3_1 | 0) | 0;
  $1835($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $988($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $989($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $989($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 368 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 352 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 360 | 0) >> 2] = $1_1;
  $990($6_1 + 200 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 220 | 0 | 0, $6_1 + 216 | 0 | 0);
  $3_1 = $41($6_1 + 184 | 0 | 0) | 0;
  $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
  $1_1 = $76($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($822($6_1 + 360 | 0 | 0, $6_1 + 352 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($1_1 + ($44($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $44($3_1 | 0) | 0;
     $497($3_1 | 0, ($44($3_1 | 0) | 0) << 1 | 0 | 0);
     $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
     $1_1 = $76($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($991($823($6_1 + 360 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 180 | 0 | 0, HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 216 | 0) >> 2] | 0 | 0, $6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $825($6_1 + 360 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($44($6_1 + 200 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF32[$5_1 >> 2] = Math_fround($949($1_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0));
  $929($6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($826($6_1 + 360 | 0 | 0, $6_1 + 352 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 360 | 0) >> 2] | 0;
  $1835($3_1 | 0) | 0;
  $1835($6_1 + 200 | 0 | 0) | 0;
  global$0 = $6_1 + 368 | 0;
  return $1_1 | 0;
 }
 
 function $990($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $807($5_1 + 8 | 0 | 0, $1_1 | 0);
  $997($821($5_1 + 8 | 0 | 0) | 0 | 0, 10208 | 0, 10240 | 0, $2_1 | 0) | 0;
  $2_1 = $964($5_1 + 8 | 0 | 0) | 0;
  HEAP32[$3_1 >> 2] = $1004($2_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = $1005($2_1 | 0) | 0;
  $1006($0_1 | 0, $2_1 | 0);
  $911($5_1 + 8 | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $991($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $12_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  HEAP32[($12_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$3
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$2
     }
     $0_1 = 0;
     HEAP8[$1_1 >> 0] = 0;
     $11_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = 46;
     if (!($44($7_1 | 0) | 0)) {
      break label$1
     }
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $5_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $5_1;
     break label$1;
    }
    label$4 : {
     if (($0_1 | 0) != ($6_1 | 0)) {
      break label$4
     }
     if (!($44($7_1 | 0) | 0)) {
      break label$4
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$2
     }
     $0_1 = 0;
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $0_1;
     $0_1 = 0;
     HEAP32[$10_1 >> 2] = 0;
     break label$1;
    }
    $0_1 = -1;
    $11_1 = ($1007($11_1 | 0, $11_1 + 128 | 0 | 0, $12_1 + 12 | 0 | 0) | 0) - $11_1 | 0;
    if (($11_1 | 0) > (124 | 0)) {
     break label$1
    }
    $5_1 = HEAPU8[(($11_1 >> 2 | 0) + 10208 | 0) >> 0] | 0;
    label$5 : {
     label$6 : {
      switch (__wasm_rotl_i32($11_1 + -88 | 0 | 0, 30 | 0) | 0 | 0) {
      case 2:
      case 3:
       label$9 : {
        $11_1 = HEAP32[$4_1 >> 2] | 0;
        if (($11_1 | 0) == ($3_1 | 0)) {
         break label$9
        }
        $0_1 = -1;
        if (((HEAPU8[($11_1 + -1 | 0) >> 0] | 0) & 95 | 0 | 0) != ((HEAPU8[$2_1 >> 0] | 0) & 127 | 0 | 0)) {
         break label$1
        }
       }
       HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
       HEAP8[$11_1 >> 0] = $5_1;
       $0_1 = 0;
       break label$1;
      case 0:
      case 1:
       HEAP8[$2_1 >> 0] = 80;
       break label$5;
      default:
       break label$6;
      };
     }
     $0_1 = HEAP8[$2_1 >> 0] | 0;
     if (($5_1 & 95 | 0 | 0) != ($0_1 | 0)) {
      break label$5
     }
     HEAP8[$2_1 >> 0] = $0_1 | 128 | 0;
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$5
     }
     HEAP8[$1_1 >> 0] = 0;
     if (!($44($7_1 | 0) | 0)) {
      break label$5
     }
     $0_1 = HEAP32[$9_1 >> 2] | 0;
     if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$5
     }
     $1_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = $1_1;
    }
    $0_1 = HEAP32[$4_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = $5_1;
    $0_1 = 0;
    if (($11_1 | 0) > (84 | 0)) {
     break label$1
    }
    HEAP32[$10_1 >> 2] = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
    break label$1;
   }
   $0_1 = -1;
  }
  global$0 = $12_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $992($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $993($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $993($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 368 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 352 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 360 | 0) >> 2] = $1_1;
  $990($6_1 + 200 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 220 | 0 | 0, $6_1 + 216 | 0 | 0);
  $3_1 = $41($6_1 + 184 | 0 | 0) | 0;
  $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
  $1_1 = $76($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($822($6_1 + 360 | 0 | 0, $6_1 + 352 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($1_1 + ($44($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $44($3_1 | 0) | 0;
     $497($3_1 | 0, ($44($3_1 | 0) | 0) << 1 | 0 | 0);
     $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
     $1_1 = $76($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($991($823($6_1 + 360 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 180 | 0 | 0, HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 216 | 0) >> 2] | 0 | 0, $6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $825($6_1 + 360 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($44($6_1 + 200 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF64[$5_1 >> 3] = +$952($1_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0);
  $929($6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($826($6_1 + 360 | 0 | 0, $6_1 + 352 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 360 | 0) >> 2] | 0;
  $1835($3_1 | 0) | 0;
  $1835($6_1 + 200 | 0 | 0) | 0;
  global$0 = $6_1 + 368 | 0;
  return $1_1 | 0;
 }
 
 function $994($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $995($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $995($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $123_1 = 0, $126_1 = 0;
  $6_1 = global$0 - 384 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 368 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 376 | 0) >> 2] = $1_1;
  $990($6_1 + 216 | 0 | 0, $3_1 | 0, $6_1 + 240 | 0 | 0, $6_1 + 236 | 0 | 0, $6_1 + 232 | 0 | 0);
  $3_1 = $41($6_1 + 200 | 0 | 0) | 0;
  $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
  $1_1 = $76($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 196 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 32 | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 0;
  HEAP8[($6_1 + 23 | 0) >> 0] = 1;
  HEAP8[($6_1 + 22 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($822($6_1 + 376 | 0 | 0, $6_1 + 368 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 196 | 0) >> 2] | 0 | 0) != ($1_1 + ($44($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $44($3_1 | 0) | 0;
     $497($3_1 | 0, ($44($3_1 | 0) | 0) << 1 | 0 | 0);
     $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
     $1_1 = $76($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 196 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($991($823($6_1 + 376 | 0 | 0) | 0 | 0, $6_1 + 23 | 0 | 0, $6_1 + 22 | 0 | 0, $1_1 | 0, $6_1 + 196 | 0 | 0, HEAP32[($6_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 232 | 0) >> 2] | 0 | 0, $6_1 + 216 | 0 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 240 | 0 | 0) | 0) {
     break label$1
    }
    $825($6_1 + 376 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($44($6_1 + 216 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 23 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 32 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  }
  $955($6_1 | 0, $1_1 | 0, HEAP32[($6_1 + 196 | 0) >> 2] | 0 | 0, $4_1 | 0);
  i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  $123_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $123_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  $126_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $126_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $929($6_1 + 216 | 0 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($826($6_1 + 376 | 0 | 0, $6_1 + 368 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 376 | 0) >> 2] | 0;
  $1835($3_1 | 0) | 0;
  $1835($6_1 + 216 | 0 | 0) | 0;
  global$0 = $6_1 + 384 | 0;
  return $1_1 | 0;
 }
 
 function $996($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $2_1 = $41($6_1 + 208 | 0 | 0) | 0;
  $807($6_1 + 16 | 0 | 0, $3_1 | 0);
  $997($821($6_1 + 16 | 0 | 0) | 0 | 0, 10208 | 0, 10234 | 0, $6_1 + 224 | 0 | 0) | 0;
  $911($6_1 + 16 | 0 | 0) | 0;
  $3_1 = $41($6_1 + 192 | 0 | 0) | 0;
  $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
  $1_1 = $76($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($822($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($44($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $44($3_1 | 0) | 0;
     $497($3_1 | 0, ($44($3_1 | 0) | 0) << 1 | 0 | 0);
     $497($3_1 | 0, $496($3_1 | 0) | 0 | 0);
     $1_1 = $76($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $1_1 | 0;
    }
    if ($977($823($6_1 + 344 | 0 | 0) | 0 | 0, 16 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, 0 | 0, $2_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $825($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $497($3_1 | 0, (HEAP32[($6_1 + 188 | 0) >> 2] | 0) - $1_1 | 0 | 0);
  $1_1 = $25($3_1 | 0) | 0;
  $7_1 = $958() | 0;
  HEAP32[$6_1 >> 2] = $5_1;
  label$4 : {
   if (($959($1_1 | 0, $7_1 | 0, 10241 | 0, $6_1 | 0) | 0 | 0) == (1 | 0)) {
    break label$4
   }
   HEAP32[$4_1 >> 2] = 4;
  }
  label$5 : {
   if (!($826($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1835($3_1 | 0) | 0;
  $1835($2_1 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $1_1 | 0;
 }
 
 function $997($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $998($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = HEAP32[$2_1 >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $1_1 = $0_1;
    }
    return $1_1 | 0;
   }
   $0_1 = $0_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $999($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1000($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1001($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1002($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = (HEAPU8[$2_1 >> 0] | 0) & 255 | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $1_1 = $0_1;
    }
    return $1_1 | 0;
   }
   $0_1 = $0_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $1003($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return 10208 | 0;
 }
 
 function $1004($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1005($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1006($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1007($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = HEAP32[$2_1 >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $1_1 = $0_1;
    }
    return $1_1 | 0;
   }
   $0_1 = $0_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $1008($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $807($3_1 + 8 | 0 | 0, $1_1 | 0);
  $997($821($3_1 + 8 | 0 | 0) | 0 | 0, 10208 | 0, 10234 | 0, $2_1 | 0) | 0;
  $911($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1009($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($509($2_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0;
    break label$1;
   }
   $807($5_1 + 24 | 0 | 0, $2_1 | 0);
   $2_1 = $912($5_1 + 24 | 0 | 0) | 0;
   $911($5_1 + 24 | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!$4_1) {
      break label$4
     }
     $913($5_1 + 24 | 0 | 0, $2_1 | 0);
     break label$3;
    }
    $914($5_1 + 24 | 0 | 0, $2_1 | 0);
   }
   HEAP32[($5_1 + 16 | 0) >> 2] = $68($5_1 + 24 | 0 | 0) | 0;
   label$5 : while (1) {
    HEAP32[($5_1 + 8 | 0) >> 2] = $69($5_1 + 24 | 0 | 0) | 0;
    label$6 : {
     if ($70($5_1 + 16 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) {
      break label$6
     }
     $2_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
     $1835($5_1 + 24 | 0 | 0) | 0;
     break label$1;
    }
    $2_1 = HEAP8[($71($5_1 + 16 | 0 | 0) | 0) >> 0] | 0;
    $845($844($5_1 + 40 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $72($5_1 + 16 | 0 | 0) | 0;
    $846($5_1 + 40 | 0 | 0) | 0;
    continue label$5;
   };
  }
  global$0 = $5_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1010($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $8_1 = 0, $11_1 = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  $12_1 = 0;
  HEAP16[($6_1 + 28 | 0) >> 1] = HEAPU8[($12_1 + 10256 | 0) >> 0] | 0 | ((HEAPU8[($12_1 + 10257 | 0) >> 0] | 0) << 8 | 0) | 0;
  $11_1 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAPU8[($11_1 + 10252 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 10253 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 10254 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 10255 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $1011($6_1 + 24 | 0 | 1 | 0 | 0, 10244 | 0, 1 | 0, $509($2_1 | 0) | 0 | 0);
  $7_1 = $509($2_1 | 0) | 0;
  $8_1 = $6_1 + -16 | 0;
  global$0 = $8_1;
  $10_1 = $958() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $7_1 = $8_1 + ($1012($8_1 | 0, (($7_1 >>> 9 | 0) & 1 | 0) + 13 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $10_1 = $1013($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
  $4_1 = $8_1 + -32 | 0;
  global$0 = $4_1;
  $807($6_1 + 8 | 0 | 0, $2_1 | 0);
  $1014($8_1 | 0, $10_1 | 0, $7_1 | 0, $4_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $911($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $511($1_1 | 0, $4_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1011($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   if (!($3_1 & 2048 | 0)) {
    break label$1
   }
   HEAP8[$0_1 >> 0] = 43;
   $0_1 = $0_1 + 1 | 0;
  }
  label$2 : {
   if (!($3_1 & 512 | 0)) {
    break label$2
   }
   HEAP8[$0_1 >> 0] = 35;
   $0_1 = $0_1 + 1 | 0;
  }
  label$3 : {
   label$4 : while (1) {
    $4_1 = HEAPU8[$1_1 >> 0] | 0;
    if (!$4_1) {
     break label$3
    }
    HEAP8[$0_1 >> 0] = $4_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$4;
   };
  }
  label$5 : {
   label$6 : {
    $1_1 = $3_1 & 74 | 0;
    if (($1_1 | 0) != (64 | 0)) {
     break label$6
    }
    $1_1 = 111;
    break label$5;
   }
   label$7 : {
    if (($1_1 | 0) != (8 | 0)) {
     break label$7
    }
    $1_1 = $3_1 & 16384 | 0 ? 88 : 120;
    break label$5;
   }
   $1_1 = $2_1 ? 100 : 117;
  }
  HEAP8[$0_1 >> 0] = $1_1;
 }
 
 function $1012($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
  $2_1 = $961($5_1 | 0, $5_1 + 12 | 0 | 0) | 0;
  $0_1 = $693($0_1 | 0, $1_1 | 0, $3_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $962($2_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1013($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   $2_1 = ($509($2_1 | 0) | 0) & 176 | 0;
   if (($2_1 | 0) != (32 | 0)) {
    break label$1
   }
   return $1_1 | 0;
  }
  label$2 : {
   if (($2_1 | 0) != (16 | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     $2_1 = HEAPU8[$0_1 >> 0] | 0;
     switch ($2_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$4;
     default:
      break label$3;
     };
    }
    return $0_1 + 1 | 0 | 0;
   }
   if (($1_1 - $0_1 | 0 | 0) < (2 | 0)) {
    break label$2
   }
   if (($2_1 | 0) != (48 | 0)) {
    break label$2
   }
   if ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
    break label$2
   }
   $0_1 = $0_1 + 2 | 0;
  }
  return $0_1 | 0;
 }
 
 function $1014($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $10_1 = 0, $11_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $12_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $522($6_1 | 0) | 0;
  $6_1 = $912($6_1 | 0) | 0;
  $1001($7_1 | 0, $6_1 | 0);
  label$1 : {
   label$2 : {
    if (!($53($7_1 | 0) | 0)) {
     break label$2
    }
    $957($8_1 | 0, $0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $6_1 = $3_1 + ($2_1 - $0_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
   $9_1 = $0_1;
   label$3 : {
    label$4 : {
     $10_1 = HEAPU8[$9_1 >> 0] | 0;
     switch ($10_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$4;
     default:
      break label$3;
     };
    }
    $10_1 = $523($8_1 | 0, ($10_1 << 24 | 0) >> 24 | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $10_1;
    $9_1 = $0_1 + 1 | 0;
   }
   label$5 : {
    if (($2_1 - $9_1 | 0 | 0) < (2 | 0)) {
     break label$5
    }
    if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$5
    }
    if ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$5
    }
    $10_1 = $523($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $10_1;
    $10_1 = $523($8_1 | 0, HEAP8[($9_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $10_1;
    $9_1 = $9_1 + 2 | 0;
   }
   $1015($9_1 | 0, $2_1 | 0);
   $10_1 = 0;
   $12_1 = $1000($6_1 | 0) | 0;
   $11_1 = 0;
   $6_1 = $9_1;
   label$6 : while (1) {
    label$7 : {
     if ($6_1 >>> 0 < $2_1 >>> 0) {
      break label$7
     }
     $1015($3_1 + ($9_1 - $0_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     break label$1;
    }
    label$8 : {
     if (!(HEAPU8[($76($7_1 | 0, $11_1 | 0) | 0) >> 0] | 0)) {
      break label$8
     }
     if (($10_1 | 0) != (HEAP8[($76($7_1 | 0, $11_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$8
     }
     $10_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $10_1 + 1 | 0;
     HEAP8[$10_1 >> 0] = $12_1;
     $11_1 = $11_1 + ($11_1 >>> 0 < (($44($7_1 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $10_1 = 0;
    }
    $13_1 = $523($8_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $14_1 + 1 | 0;
    HEAP8[$14_1 >> 0] = $13_1;
    $6_1 = $6_1 + 1 | 0;
    $10_1 = $10_1 + 1 | 0;
    continue label$6;
   };
  }
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + ($1_1 - $0_1 | 0) | 0;
  $1835($7_1 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $1015($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1061($0_1 | 0, $1_1 | 0);
 }
 
 function $1016($0_1) {
  $0_1 = $0_1 | 0;
  return $1673($73($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1017($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 37;
  HEAP32[($6_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $1011($6_1 + 24 | 0 | 1 | 0 | 0, 10246 | 0, 1 | 0, $509($2_1 | 0) | 0 | 0);
  $7_1 = $509($2_1 | 0) | 0;
  $8_1 = $6_1 + -32 | 0;
  global$0 = $8_1;
  $10_1 = $958() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $10_1 = $8_1 + ($1012($8_1 | 0, (($7_1 >>> 9 | 0) & 1 | 0) + 23 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $11_1 = $1013($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
  $7_1 = $8_1 + -48 | 0;
  global$0 = $7_1;
  $807($6_1 + 8 | 0 | 0, $2_1 | 0);
  $1014($8_1 | 0, $11_1 | 0, $10_1 | 0, $7_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $911($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $511($1_1 | 0, $7_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1018($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $8_1 = 0, $11_1 = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  $12_1 = 0;
  HEAP16[($6_1 + 28 | 0) >> 1] = HEAPU8[($12_1 + 10256 | 0) >> 0] | 0 | ((HEAPU8[($12_1 + 10257 | 0) >> 0] | 0) << 8 | 0) | 0;
  $11_1 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAPU8[($11_1 + 10252 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 10253 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 10254 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 10255 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $1011($6_1 + 24 | 0 | 1 | 0 | 0, 10244 | 0, 0 | 0, $509($2_1 | 0) | 0 | 0);
  $7_1 = $509($2_1 | 0) | 0;
  $8_1 = $6_1 + -16 | 0;
  global$0 = $8_1;
  $10_1 = $958() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $7_1 = $8_1 + ($1012($8_1 | 0, ($7_1 >>> 9 | 0) & 1 | 0 | 12 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $10_1 = $1013($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
  $4_1 = $8_1 + -32 | 0;
  global$0 = $4_1;
  $807($6_1 + 8 | 0 | 0, $2_1 | 0);
  $1014($8_1 | 0, $10_1 | 0, $7_1 | 0, $4_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $911($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $511($1_1 | 0, $4_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1019($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 37;
  HEAP32[($6_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $1011($6_1 + 24 | 0 | 1 | 0 | 0, 10246 | 0, 0 | 0, $509($2_1 | 0) | 0 | 0);
  $7_1 = $509($2_1 | 0) | 0;
  $8_1 = $6_1 + -32 | 0;
  global$0 = $8_1;
  $10_1 = $958() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $10_1 = $8_1 + ($1012($8_1 | 0, (($7_1 >>> 9 | 0) & 1 | 0) + 23 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $11_1 = $1013($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
  $7_1 = $8_1 + -48 | 0;
  global$0 = $7_1;
  $807($6_1 + 8 | 0 | 0, $2_1 | 0);
  $1014($8_1 | 0, $11_1 | 0, $10_1 | 0, $7_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $911($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $511($1_1 | 0, $7_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1020($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 200 | 0) >> 2] = 37;
  HEAP32[($5_1 + 204 | 0) >> 2] = 0;
  $6_1 = $1021($5_1 + 200 | 0 | 1 | 0 | 0, 10249 | 0, $509($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($5_1 + 156 | 0) >> 2] = $5_1 + 160 | 0;
  $7_1 = $958() | 0;
  label$1 : {
   label$2 : {
    if (!$6_1) {
     break label$2
    }
    $8_1 = $1022($2_1 | 0) | 0;
    HEAPF64[($5_1 + 40 | 0) >> 3] = $4_1;
    HEAP32[($5_1 + 32 | 0) >> 2] = $8_1;
    $7_1 = $1012($5_1 + 160 | 0 | 0, 30 | 0, $7_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 32 | 0 | 0) | 0;
    break label$1;
   }
   HEAPF64[($5_1 + 48 | 0) >> 3] = $4_1;
   $7_1 = $1012($5_1 + 160 | 0 | 0, 30 | 0, $7_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 48 | 0 | 0) | 0;
  }
  HEAP32[($5_1 + 80 | 0) >> 2] = 67;
  $8_1 = $1023($5_1 + 144 | 0 | 0, 0 | 0, $5_1 + 80 | 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($7_1 | 0) < (30 | 0)) {
     break label$4
    }
    $7_1 = $958() | 0;
    label$5 : {
     label$6 : {
      if (!$6_1) {
       break label$6
      }
      $6_1 = $1022($2_1 | 0) | 0;
      HEAPF64[($5_1 + 8 | 0) >> 3] = $4_1;
      HEAP32[$5_1 >> 2] = $6_1;
      $7_1 = $1024($5_1 + 156 | 0 | 0, $7_1 | 0, $5_1 + 200 | 0 | 0, $5_1 | 0) | 0;
      break label$5;
     }
     HEAPF64[($5_1 + 16 | 0) >> 3] = $4_1;
     $7_1 = $1024($5_1 + 156 | 0 | 0, $7_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 16 | 0 | 0) | 0;
    }
    $6_1 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$3
    }
    $1025($8_1 | 0, $6_1 | 0);
   }
   $6_1 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
   $9_1 = $6_1 + $7_1 | 0;
   $10_1 = $1013($6_1 | 0, $9_1 | 0, $2_1 | 0) | 0;
   HEAP32[($5_1 + 80 | 0) >> 2] = 67;
   $6_1 = $1023($5_1 + 72 | 0 | 0, 0 | 0, $5_1 + 80 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     if ((HEAP32[($5_1 + 156 | 0) >> 2] | 0 | 0) != ($5_1 + 160 | 0 | 0)) {
      break label$8
     }
     $7_1 = $5_1 + 80 | 0;
     $11_1 = $5_1 + 160 | 0;
     break label$7;
    }
    $7_1 = $1923($7_1 << 1 | 0 | 0) | 0;
    if (!$7_1) {
     break label$3
    }
    $1025($6_1 | 0, $7_1 | 0);
    $11_1 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
   }
   $807($5_1 + 56 | 0 | 0, $2_1 | 0);
   $1026($11_1 | 0, $10_1 | 0, $9_1 | 0, $7_1 | 0, $5_1 + 68 | 0 | 0, $5_1 + 64 | 0 | 0, $5_1 + 56 | 0 | 0);
   $911($5_1 + 56 | 0 | 0) | 0;
   $2_1 = $511($1_1 | 0, $7_1 | 0, HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $1027($6_1 | 0) | 0;
   $1027($8_1 | 0) | 0;
   global$0 = $5_1 + 208 | 0;
   return $2_1 | 0;
  }
  $1805();
  abort();
 }
 
 function $1021($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!($2_1 & 2048 | 0)) {
    break label$1
   }
   HEAP8[$0_1 >> 0] = 43;
   $0_1 = $0_1 + 1 | 0;
  }
  label$2 : {
   if (!($2_1 & 1024 | 0)) {
    break label$2
   }
   HEAP8[$0_1 >> 0] = 35;
   $0_1 = $0_1 + 1 | 0;
  }
  label$3 : {
   $3_1 = $2_1 & 260 | 0;
   if (($3_1 | 0) == (260 | 0)) {
    break label$3
   }
   $5_1 = 10798;
   HEAP8[$0_1 >> 0] = $5_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $5_1 >>> 8 | 0;
   $0_1 = $0_1 + 2 | 0;
  }
  $4_1 = $2_1 & 16384 | 0;
  label$4 : {
   label$5 : while (1) {
    $2_1 = HEAPU8[$1_1 >> 0] | 0;
    if (!$2_1) {
     break label$4
    }
    HEAP8[$0_1 >> 0] = $2_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$5;
   };
  }
  label$6 : {
   label$7 : {
    label$8 : {
     if (($3_1 | 0) == (256 | 0)) {
      break label$8
     }
     if (($3_1 | 0) != (4 | 0)) {
      break label$7
     }
     $1_1 = $4_1 ? 70 : 102;
     break label$6;
    }
    $1_1 = $4_1 ? 69 : 101;
    break label$6;
   }
   label$9 : {
    if (($3_1 | 0) != (260 | 0)) {
     break label$9
    }
    $1_1 = $4_1 ? 65 : 97;
    break label$6;
   }
   $1_1 = $4_1 ? 71 : 103;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return ($3_1 | 0) != (260 | 0) | 0;
 }
 
 function $1022($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $1023($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1028($0_1 | 0, $3_1 + 12 | 0 | 0, $861($2_1 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1024($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
  $1_1 = $961($4_1 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $875($0_1 | 0, $2_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $962($1_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1025($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1029($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1029($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1030($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $1026($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $11_1 = 0, $10_1 = 0, $12_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $9_1 = 0, $16_1 = 0, $13_1 = 0, $15_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $522($6_1 | 0) | 0;
  $9_1 = $912($6_1 | 0) | 0;
  $1001($7_1 | 0, $9_1 | 0);
  HEAP32[$5_1 >> 2] = $3_1;
  $10_1 = $0_1;
  label$1 : {
   label$2 : {
    $6_1 = HEAPU8[$10_1 >> 0] | 0;
    switch ($6_1 + -43 | 0 | 0) {
    case 0:
    case 2:
     break label$2;
    default:
     break label$1;
    };
   }
   $6_1 = $523($8_1 | 0, ($6_1 << 24 | 0) >> 24 | 0 | 0) | 0;
   $11_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
   HEAP8[$11_1 >> 0] = $6_1;
   $10_1 = $0_1 + 1 | 0;
  }
  $6_1 = $10_1;
  label$3 : {
   label$4 : {
    if (($2_1 - $6_1 | 0 | 0) <= (1 | 0)) {
     break label$4
    }
    $6_1 = $10_1;
    if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$4
    }
    $6_1 = $10_1;
    if ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$4
    }
    $6_1 = $523($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $6_1;
    $6_1 = $523($8_1 | 0, HEAP8[($10_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $6_1;
    $10_1 = $10_1 + 2 | 0;
    $6_1 = $10_1;
    label$5 : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$3
     }
     if (!($677(HEAP8[$6_1 >> 0] | 0 | 0, $958() | 0 | 0) | 0)) {
      break label$3
     }
     $6_1 = $6_1 + 1 | 0;
     continue label$5;
    };
   }
   label$6 : while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$3
    }
    if (!($679(HEAP8[$6_1 >> 0] | 0 | 0, $958() | 0 | 0) | 0)) {
     break label$3
    }
    $6_1 = $6_1 + 1 | 0;
    continue label$6;
   };
  }
  label$7 : {
   label$8 : {
    if (!($53($7_1 | 0) | 0)) {
     break label$8
    }
    $957($8_1 | 0, $10_1 | 0, $6_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + ($6_1 - $10_1 | 0) | 0;
    break label$7;
   }
   $1015($10_1 | 0, $6_1 | 0);
   $12_1 = 0;
   $13_1 = $1000($9_1 | 0) | 0;
   $14_1 = 0;
   $11_1 = $10_1;
   label$9 : while (1) {
    label$10 : {
     if ($11_1 >>> 0 < $6_1 >>> 0) {
      break label$10
     }
     $1015($3_1 + ($10_1 - $0_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     break label$7;
    }
    label$11 : {
     if ((HEAP8[($76($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0) < (1 | 0)) {
      break label$11
     }
     if (($12_1 | 0) != (HEAP8[($76($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$11
     }
     $12_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
     HEAP8[$12_1 >> 0] = $13_1;
     $14_1 = $14_1 + ($14_1 >>> 0 < (($44($7_1 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $12_1 = 0;
    }
    $15_1 = $523($8_1 | 0, HEAP8[$11_1 >> 0] | 0 | 0) | 0;
    $16_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $16_1 + 1 | 0;
    HEAP8[$16_1 >> 0] = $15_1;
    $11_1 = $11_1 + 1 | 0;
    $12_1 = $12_1 + 1 | 0;
    continue label$9;
   };
  }
  label$12 : while (1) {
   label$13 : {
    label$14 : {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$14
     }
     $11_1 = HEAPU8[$6_1 >> 0] | 0;
     if (($11_1 | 0) != (46 | 0)) {
      break label$13
     }
     $11_1 = $999($9_1 | 0) | 0;
     $12_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
     HEAP8[$12_1 >> 0] = $11_1;
     $6_1 = $6_1 + 1 | 0;
    }
    $957($8_1 | 0, $6_1 | 0, $2_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    $6_1 = (HEAP32[$5_1 >> 2] | 0) + ($2_1 - $6_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + ($1_1 - $0_1 | 0) | 0;
    $1835($7_1 | 0) | 0;
    global$0 = $7_1 + 16 | 0;
    return;
   }
   $11_1 = $523($8_1 | 0, ($11_1 << 24 | 0) >> 24 | 0 | 0) | 0;
   $12_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
   HEAP8[$12_1 >> 0] = $11_1;
   $6_1 = $6_1 + 1 | 0;
   continue label$12;
  };
 }
 
 function $1027($0_1) {
  $0_1 = $0_1 | 0;
  $1025($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $1028($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1774($0_1 | 0, $1773($1_1 | 0) | 0 | 0) | 0;
  $868($0_1 + 4 | 0 | 0, $867($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1029($0_1) {
  $0_1 = $0_1 | 0;
  return $1775($0_1 | 0) | 0 | 0;
 }
 
 function $1030($0_1) {
  $0_1 = $0_1 | 0;
  return $869($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1031($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var $6_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  i64toi32_i32$1 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 248 | 0) >> 2] = 37;
  HEAP32[($6_1 + 252 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = $1021($6_1 + 248 | 0 | 1 | 0 | 0, 10250 | 0, $509($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($6_1 + 204 | 0) >> 2] = $6_1 + 208 | 0;
  $8_1 = $958() | 0;
  label$1 : {
   label$2 : {
    if (!$7_1) {
     break label$2
    }
    $9_1 = $1022($2_1 | 0) | 0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $6_1 + 72 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $5_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $6_1 + 64 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $4_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($6_1 + 48 | 0) >> 2] = $9_1;
    $8_1 = $1012($6_1 + 208 | 0 | 0, 30 | 0, $8_1 | 0, $6_1 + 248 | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
    break label$1;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 80 | 0) >> 2] = $4_1;
   HEAP32[($6_1 + 84 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 88 | 0) >> 2] = $5_1;
   HEAP32[($6_1 + 92 | 0) >> 2] = i64toi32_i32$0;
   $8_1 = $1012($6_1 + 208 | 0 | 0, 30 | 0, $8_1 | 0, $6_1 + 248 | 0 | 0, $6_1 + 80 | 0 | 0) | 0;
  }
  HEAP32[($6_1 + 128 | 0) >> 2] = 67;
  $9_1 = $1023($6_1 + 192 | 0 | 0, 0 | 0, $6_1 + 128 | 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($8_1 | 0) < (30 | 0)) {
     break label$4
    }
    $8_1 = $958() | 0;
    label$5 : {
     label$6 : {
      if (!$7_1) {
       break label$6
      }
      $7_1 = $1022($2_1 | 0) | 0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = $6_1 + 24 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $5_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $6_1 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $4_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[$6_1 >> 2] = $7_1;
      $8_1 = $1024($6_1 + 204 | 0 | 0, $8_1 | 0, $6_1 + 248 | 0 | 0, $6_1 | 0) | 0;
      break label$5;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $6_1;
     HEAP32[($6_1 + 32 | 0) >> 2] = $4_1;
     HEAP32[($6_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$1 = $6_1;
     HEAP32[($6_1 + 40 | 0) >> 2] = $5_1;
     HEAP32[($6_1 + 44 | 0) >> 2] = i64toi32_i32$0;
     $8_1 = $1024($6_1 + 204 | 0 | 0, $8_1 | 0, $6_1 + 248 | 0 | 0, $6_1 + 32 | 0 | 0) | 0;
    }
    $7_1 = HEAP32[($6_1 + 204 | 0) >> 2] | 0;
    if (!$7_1) {
     break label$3
    }
    $1025($9_1 | 0, $7_1 | 0);
   }
   $7_1 = HEAP32[($6_1 + 204 | 0) >> 2] | 0;
   $10_1 = $7_1 + $8_1 | 0;
   $11_1 = $1013($7_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
   HEAP32[($6_1 + 128 | 0) >> 2] = 67;
   $7_1 = $1023($6_1 + 120 | 0 | 0, 0 | 0, $6_1 + 128 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     if ((HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0) != ($6_1 + 208 | 0 | 0)) {
      break label$8
     }
     $8_1 = $6_1 + 128 | 0;
     $12_1 = $6_1 + 208 | 0;
     break label$7;
    }
    $8_1 = $1923($8_1 << 1 | 0 | 0) | 0;
    if (!$8_1) {
     break label$3
    }
    $1025($7_1 | 0, $8_1 | 0);
    $12_1 = HEAP32[($6_1 + 204 | 0) >> 2] | 0;
   }
   $807($6_1 + 104 | 0 | 0, $2_1 | 0);
   $1026($12_1 | 0, $11_1 | 0, $10_1 | 0, $8_1 | 0, $6_1 + 116 | 0 | 0, $6_1 + 112 | 0 | 0, $6_1 + 104 | 0 | 0);
   $911($6_1 + 104 | 0 | 0) | 0;
   $2_1 = $511($1_1 | 0, $8_1 | 0, HEAP32[($6_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 112 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $1027($7_1 | 0) | 0;
   $1027($9_1 | 0) | 0;
   global$0 = $6_1 + 256 | 0;
   return $2_1 | 0;
  }
  $1805();
  abort();
 }
 
 function $1032($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $9_1 = 0, $6_1 = 0, $10_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  $10_1 = 0;
  HEAP16[($5_1 + 92 | 0) >> 1] = HEAPU8[($10_1 + 10262 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 10263 | 0) >> 0] | 0) << 8 | 0) | 0;
  $9_1 = 0;
  HEAP32[($5_1 + 88 | 0) >> 2] = HEAPU8[($9_1 + 10258 | 0) >> 0] | 0 | ((HEAPU8[($9_1 + 10259 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($9_1 + 10260 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($9_1 + 10261 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $6_1 = $958() | 0;
  HEAP32[$5_1 >> 2] = $4_1;
  $7_1 = $1012($5_1 + 64 | 0 | 0, 20 | 0, $6_1 | 0, $5_1 + 88 | 0 | 0, $5_1 | 0) | 0;
  $4_1 = ($5_1 + 64 | 0) + $7_1 | 0;
  $6_1 = $1013($5_1 + 64 | 0 | 0, $4_1 | 0, $2_1 | 0) | 0;
  $807($5_1 + 16 | 0 | 0, $2_1 | 0);
  $8_1 = $522($5_1 + 16 | 0 | 0) | 0;
  $911($5_1 + 16 | 0 | 0) | 0;
  $957($8_1 | 0, $5_1 + 64 | 0 | 0, $4_1 | 0, $5_1 + 16 | 0 | 0) | 0;
  $7_1 = $7_1 + ($5_1 + 16 | 0) | 0;
  $2_1 = $511($1_1 | 0, $5_1 + 16 | 0 | 0, (($6_1 | 0) == ($4_1 | 0) ? $7_1 : ($5_1 + 16 | 0) + ($6_1 - ($5_1 + 64 | 0) | 0) | 0) | 0, $7_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $5_1 + 96 | 0;
  return $2_1 | 0;
 }
 
 function $1033($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($509($2_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0;
    break label$1;
   }
   $807($5_1 + 24 | 0 | 0, $2_1 | 0);
   $2_1 = $964($5_1 + 24 | 0 | 0) | 0;
   $911($5_1 + 24 | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!$4_1) {
      break label$4
     }
     $965($5_1 + 24 | 0 | 0, $2_1 | 0);
     break label$3;
    }
    $966($5_1 + 24 | 0 | 0, $2_1 | 0);
   }
   HEAP32[($5_1 + 16 | 0) >> 2] = $1034($5_1 + 24 | 0 | 0) | 0;
   label$5 : while (1) {
    HEAP32[($5_1 + 8 | 0) >> 2] = $1035($5_1 + 24 | 0 | 0) | 0;
    label$6 : {
     if ($1036($5_1 + 16 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) {
      break label$6
     }
     $2_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
     $1849($5_1 + 24 | 0 | 0) | 0;
     break label$1;
    }
    $2_1 = HEAP32[($1037($5_1 + 16 | 0 | 0) | 0) >> 2] | 0;
    $848($847($5_1 + 40 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $1038($5_1 + 16 | 0 | 0) | 0;
    $849($5_1 + 40 | 0 | 0) | 0;
    continue label$5;
   };
  }
  global$0 = $5_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1034($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1040($1_1 + 8 | 0 | 0, $1039($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1035($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1040($1_1 + 8 | 0 | 0, ($1039($0_1 | 0) | 0) + (($970($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1036($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1041($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1037($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1038($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 4 | 0;
  return $0_1 | 0;
 }
 
 function $1039($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($1096($0_1 | 0) | 0)) {
    break label$1
   }
   return $1248($0_1 | 0) | 0 | 0;
  }
  return $1251($0_1 | 0) | 0 | 0;
 }
 
 function $1040($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1041($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1274($0_1 | 0) | 0 | 0) == ($1274($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $1042($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $8_1 = 0, $11_1 = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  $12_1 = 0;
  HEAP16[($6_1 + 28 | 0) >> 1] = HEAPU8[($12_1 + 10256 | 0) >> 0] | 0 | ((HEAPU8[($12_1 + 10257 | 0) >> 0] | 0) << 8 | 0) | 0;
  $11_1 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAPU8[($11_1 + 10252 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 10253 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 10254 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 10255 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $1011($6_1 + 24 | 0 | 1 | 0 | 0, 10244 | 0, 1 | 0, $509($2_1 | 0) | 0 | 0);
  $7_1 = $509($2_1 | 0) | 0;
  $8_1 = $6_1 + -16 | 0;
  global$0 = $8_1;
  $10_1 = $958() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $4_1 = ($7_1 >>> 9 | 0) & 1 | 0;
  $7_1 = $8_1 + ($1012($8_1 | 0, $4_1 + 13 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $10_1 = $1013($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
  $4_1 = $8_1 - ((($4_1 << 3 | 0) + 107 | 0) & 112 | 0) | 0;
  global$0 = $4_1;
  $807($6_1 + 8 | 0 | 0, $2_1 | 0);
  $1043($8_1 | 0, $10_1 | 0, $7_1 | 0, $4_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $911($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $1044($1_1 | 0, $4_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1043($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $10_1 = 0, $11_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $12_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $821($6_1 | 0) | 0;
  $6_1 = $964($6_1 | 0) | 0;
  $1006($7_1 | 0, $6_1 | 0);
  label$1 : {
   label$2 : {
    if (!($53($7_1 | 0) | 0)) {
     break label$2
    }
    $997($8_1 | 0, $0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $6_1 = $3_1 + (($2_1 - $0_1 | 0) << 2 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
   $9_1 = $0_1;
   label$3 : {
    label$4 : {
     $10_1 = HEAPU8[$9_1 >> 0] | 0;
     switch ($10_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$4;
     default:
      break label$3;
     };
    }
    $10_1 = $866($8_1 | 0, ($10_1 << 24 | 0) >> 24 | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $10_1;
    $9_1 = $0_1 + 1 | 0;
   }
   label$5 : {
    if (($2_1 - $9_1 | 0 | 0) < (2 | 0)) {
     break label$5
    }
    if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$5
    }
    if ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$5
    }
    $10_1 = $866($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $10_1;
    $10_1 = $866($8_1 | 0, HEAP8[($9_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $10_1;
    $9_1 = $9_1 + 2 | 0;
   }
   $1015($9_1 | 0, $2_1 | 0);
   $10_1 = 0;
   $12_1 = $1005($6_1 | 0) | 0;
   $11_1 = 0;
   $6_1 = $9_1;
   label$6 : while (1) {
    label$7 : {
     if ($6_1 >>> 0 < $2_1 >>> 0) {
      break label$7
     }
     $1045($3_1 + (($9_1 - $0_1 | 0) << 2 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     break label$1;
    }
    label$8 : {
     if (!(HEAPU8[($76($7_1 | 0, $11_1 | 0) | 0) >> 0] | 0)) {
      break label$8
     }
     if (($10_1 | 0) != (HEAP8[($76($7_1 | 0, $11_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$8
     }
     $10_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $10_1 + 4 | 0;
     HEAP32[$10_1 >> 2] = $12_1;
     $11_1 = $11_1 + ($11_1 >>> 0 < (($44($7_1 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $10_1 = 0;
    }
    $13_1 = $866($8_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $14_1 + 4 | 0;
    HEAP32[$14_1 >> 2] = $13_1;
    $6_1 = $6_1 + 1 | 0;
    $10_1 = $10_1 + 1 | 0;
    continue label$6;
   };
  }
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + (($1_1 - $0_1 | 0) << 2 | 0) | 0;
  $1835($7_1 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $1044($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $9_1 = 0, $8_1 = 0, $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    $7_1 = 0;
    break label$1;
   }
   $8_1 = $514($4_1 | 0) | 0;
   $7_1 = 0;
   label$3 : {
    $9_1 = $2_1 - $1_1 | 0;
    if (($9_1 | 0) < (1 | 0)) {
     break label$3
    }
    $9_1 = $9_1 >> 2 | 0;
    if (($850($0_1 | 0, $1_1 | 0, $9_1 | 0) | 0 | 0) != ($9_1 | 0)) {
     break label$1
    }
   }
   label$4 : {
    $7_1 = ($3_1 - $1_1 | 0) >> 2 | 0;
    $1_1 = ($8_1 | 0) > ($7_1 | 0) ? $8_1 - $7_1 | 0 : 0;
    if (($1_1 | 0) < (1 | 0)) {
     break label$4
    }
    $7_1 = $1046($6_1 | 0, $1_1 | 0, $5_1 | 0) | 0;
    $8_1 = $850($0_1 | 0, $1047($7_1 | 0) | 0 | 0, $1_1 | 0) | 0;
    $1849($7_1 | 0) | 0;
    $7_1 = 0;
    if (($8_1 | 0) != ($1_1 | 0)) {
     break label$1
    }
   }
   label$5 : {
    $1_1 = $3_1 - $2_1 | 0;
    if (($1_1 | 0) < (1 | 0)) {
     break label$5
    }
    $7_1 = 0;
    $1_1 = $1_1 >> 2 | 0;
    if (($850($0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0) != ($1_1 | 0)) {
     break label$1
    }
   }
   $517($4_1 | 0, 0 | 0) | 0;
   $7_1 = $0_1;
  }
  global$0 = $6_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $1045($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1062($0_1 | 0, $1_1 | 0);
 }
 
 function $1046($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $907($0_1 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $1858($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1047($0_1) {
  $0_1 = $0_1 | 0;
  return $1747($1039($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1048($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 37;
  HEAP32[($6_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $1011($6_1 + 24 | 0 | 1 | 0 | 0, 10246 | 0, 1 | 0, $509($2_1 | 0) | 0 | 0);
  $7_1 = $509($2_1 | 0) | 0;
  $8_1 = $6_1 + -32 | 0;
  global$0 = $8_1;
  $10_1 = $958() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = ($7_1 >>> 9 | 0) & 1 | 0;
  $10_1 = $8_1 + ($1012($8_1 | 0, $7_1 + 23 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $11_1 = $1013($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
  $7_1 = $8_1 - ((($7_1 << 3 | 0) + 187 | 0) & 240 | 0) | 0;
  global$0 = $7_1;
  $807($6_1 + 8 | 0 | 0, $2_1 | 0);
  $1043($8_1 | 0, $11_1 | 0, $10_1 | 0, $7_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $911($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $1044($1_1 | 0, $7_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1049($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $8_1 = 0, $11_1 = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  $12_1 = 0;
  HEAP16[($6_1 + 28 | 0) >> 1] = HEAPU8[($12_1 + 10256 | 0) >> 0] | 0 | ((HEAPU8[($12_1 + 10257 | 0) >> 0] | 0) << 8 | 0) | 0;
  $11_1 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAPU8[($11_1 + 10252 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 10253 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 10254 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 10255 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $1011($6_1 + 24 | 0 | 1 | 0 | 0, 10244 | 0, 0 | 0, $509($2_1 | 0) | 0 | 0);
  $7_1 = $509($2_1 | 0) | 0;
  $8_1 = $6_1 + -16 | 0;
  global$0 = $8_1;
  $10_1 = $958() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $7_1 = $8_1 + ($1012($8_1 | 0, ($7_1 >>> 9 | 0) & 1 | 0 | 12 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $10_1 = $1013($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
  $4_1 = $8_1 + -96 | 0;
  global$0 = $4_1;
  $807($6_1 + 8 | 0 | 0, $2_1 | 0);
  $1043($8_1 | 0, $10_1 | 0, $7_1 | 0, $4_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $911($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $1044($1_1 | 0, $4_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1050($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 37;
  HEAP32[($6_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $1011($6_1 + 24 | 0 | 1 | 0 | 0, 10246 | 0, 0 | 0, $509($2_1 | 0) | 0 | 0);
  $7_1 = $509($2_1 | 0) | 0;
  $8_1 = $6_1 + -32 | 0;
  global$0 = $8_1;
  $10_1 = $958() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = ($7_1 >>> 9 | 0) & 1 | 0;
  $10_1 = $8_1 + ($1012($8_1 | 0, $7_1 + 23 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $11_1 = $1013($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
  $7_1 = $8_1 - ((($7_1 << 3 | 0) + 187 | 0) & 240 | 0) | 0;
  global$0 = $7_1;
  $807($6_1 + 8 | 0 | 0, $2_1 | 0);
  $1043($8_1 | 0, $11_1 | 0, $10_1 | 0, $7_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $911($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $1044($1_1 | 0, $7_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1051($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 384 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 376 | 0) >> 2] = 37;
  HEAP32[($5_1 + 380 | 0) >> 2] = 0;
  $6_1 = $1021($5_1 + 376 | 0 | 1 | 0 | 0, 10249 | 0, $509($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($5_1 + 332 | 0) >> 2] = $5_1 + 336 | 0;
  $7_1 = $958() | 0;
  label$1 : {
   label$2 : {
    if (!$6_1) {
     break label$2
    }
    $8_1 = $1022($2_1 | 0) | 0;
    HEAPF64[($5_1 + 40 | 0) >> 3] = $4_1;
    HEAP32[($5_1 + 32 | 0) >> 2] = $8_1;
    $7_1 = $1012($5_1 + 336 | 0 | 0, 30 | 0, $7_1 | 0, $5_1 + 376 | 0 | 0, $5_1 + 32 | 0 | 0) | 0;
    break label$1;
   }
   HEAPF64[($5_1 + 48 | 0) >> 3] = $4_1;
   $7_1 = $1012($5_1 + 336 | 0 | 0, 30 | 0, $7_1 | 0, $5_1 + 376 | 0 | 0, $5_1 + 48 | 0 | 0) | 0;
  }
  HEAP32[($5_1 + 80 | 0) >> 2] = 67;
  $8_1 = $1023($5_1 + 320 | 0 | 0, 0 | 0, $5_1 + 80 | 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($7_1 | 0) < (30 | 0)) {
     break label$4
    }
    $7_1 = $958() | 0;
    label$5 : {
     label$6 : {
      if (!$6_1) {
       break label$6
      }
      $6_1 = $1022($2_1 | 0) | 0;
      HEAPF64[($5_1 + 8 | 0) >> 3] = $4_1;
      HEAP32[$5_1 >> 2] = $6_1;
      $7_1 = $1024($5_1 + 332 | 0 | 0, $7_1 | 0, $5_1 + 376 | 0 | 0, $5_1 | 0) | 0;
      break label$5;
     }
     HEAPF64[($5_1 + 16 | 0) >> 3] = $4_1;
     $7_1 = $1024($5_1 + 332 | 0 | 0, $7_1 | 0, $5_1 + 376 | 0 | 0, $5_1 + 16 | 0 | 0) | 0;
    }
    $6_1 = HEAP32[($5_1 + 332 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$3
    }
    $1025($8_1 | 0, $6_1 | 0);
   }
   $6_1 = HEAP32[($5_1 + 332 | 0) >> 2] | 0;
   $9_1 = $6_1 + $7_1 | 0;
   $10_1 = $1013($6_1 | 0, $9_1 | 0, $2_1 | 0) | 0;
   HEAP32[($5_1 + 80 | 0) >> 2] = 67;
   $6_1 = $1052($5_1 + 72 | 0 | 0, 0 | 0, $5_1 + 80 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     if ((HEAP32[($5_1 + 332 | 0) >> 2] | 0 | 0) != ($5_1 + 336 | 0 | 0)) {
      break label$8
     }
     $7_1 = $5_1 + 80 | 0;
     $11_1 = $5_1 + 336 | 0;
     break label$7;
    }
    $7_1 = $1923($7_1 << 3 | 0 | 0) | 0;
    if (!$7_1) {
     break label$3
    }
    $1053($6_1 | 0, $7_1 | 0);
    $11_1 = HEAP32[($5_1 + 332 | 0) >> 2] | 0;
   }
   $807($5_1 + 56 | 0 | 0, $2_1 | 0);
   $1054($11_1 | 0, $10_1 | 0, $9_1 | 0, $7_1 | 0, $5_1 + 68 | 0 | 0, $5_1 + 64 | 0 | 0, $5_1 + 56 | 0 | 0);
   $911($5_1 + 56 | 0 | 0) | 0;
   $2_1 = $1044($1_1 | 0, $7_1 | 0, HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $1055($6_1 | 0) | 0;
   $1027($8_1 | 0) | 0;
   global$0 = $5_1 + 384 | 0;
   return $2_1 | 0;
  }
  $1805();
  abort();
 }
 
 function $1052($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1056($0_1 | 0, $3_1 + 12 | 0 | 0, $861($2_1 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1053($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1057($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1057($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1058($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $1054($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $11_1 = 0, $10_1 = 0, $12_1 = 0, $7_1 = 0, $14_1 = 0, $8_1 = 0, $9_1 = 0, $16_1 = 0, $13_1 = 0, $15_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $821($6_1 | 0) | 0;
  $9_1 = $964($6_1 | 0) | 0;
  $1006($7_1 | 0, $9_1 | 0);
  HEAP32[$5_1 >> 2] = $3_1;
  $10_1 = $0_1;
  label$1 : {
   label$2 : {
    $6_1 = HEAPU8[$10_1 >> 0] | 0;
    switch ($6_1 + -43 | 0 | 0) {
    case 0:
    case 2:
     break label$2;
    default:
     break label$1;
    };
   }
   $6_1 = $866($8_1 | 0, ($6_1 << 24 | 0) >> 24 | 0 | 0) | 0;
   $11_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
   HEAP32[$11_1 >> 2] = $6_1;
   $10_1 = $0_1 + 1 | 0;
  }
  $6_1 = $10_1;
  label$3 : {
   label$4 : {
    if (($2_1 - $6_1 | 0 | 0) <= (1 | 0)) {
     break label$4
    }
    $6_1 = $10_1;
    if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$4
    }
    $6_1 = $10_1;
    if ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$4
    }
    $6_1 = $866($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $6_1;
    $6_1 = $866($8_1 | 0, HEAP8[($10_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $6_1;
    $10_1 = $10_1 + 2 | 0;
    $6_1 = $10_1;
    label$5 : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$3
     }
     if (!($677(HEAP8[$6_1 >> 0] | 0 | 0, $958() | 0 | 0) | 0)) {
      break label$3
     }
     $6_1 = $6_1 + 1 | 0;
     continue label$5;
    };
   }
   label$6 : while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$3
    }
    if (!($679(HEAP8[$6_1 >> 0] | 0 | 0, $958() | 0 | 0) | 0)) {
     break label$3
    }
    $6_1 = $6_1 + 1 | 0;
    continue label$6;
   };
  }
  label$7 : {
   label$8 : {
    if (!($53($7_1 | 0) | 0)) {
     break label$8
    }
    $997($8_1 | 0, $10_1 | 0, $6_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + (($6_1 - $10_1 | 0) << 2 | 0) | 0;
    break label$7;
   }
   $1015($10_1 | 0, $6_1 | 0);
   $12_1 = 0;
   $13_1 = $1005($9_1 | 0) | 0;
   $14_1 = 0;
   $11_1 = $10_1;
   label$9 : while (1) {
    label$10 : {
     if ($11_1 >>> 0 < $6_1 >>> 0) {
      break label$10
     }
     $1045($3_1 + (($10_1 - $0_1 | 0) << 2 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     break label$7;
    }
    label$11 : {
     if ((HEAP8[($76($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0) < (1 | 0)) {
      break label$11
     }
     if (($12_1 | 0) != (HEAP8[($76($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$11
     }
     $12_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $12_1 + 4 | 0;
     HEAP32[$12_1 >> 2] = $13_1;
     $14_1 = $14_1 + ($14_1 >>> 0 < (($44($7_1 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $12_1 = 0;
    }
    $15_1 = $866($8_1 | 0, HEAP8[$11_1 >> 0] | 0 | 0) | 0;
    $16_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $16_1 + 4 | 0;
    HEAP32[$16_1 >> 2] = $15_1;
    $11_1 = $11_1 + 1 | 0;
    $12_1 = $12_1 + 1 | 0;
    continue label$9;
   };
  }
  label$12 : {
   label$13 : {
    label$14 : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$13
     }
     label$15 : {
      $11_1 = HEAPU8[$6_1 >> 0] | 0;
      if (($11_1 | 0) == (46 | 0)) {
       break label$15
      }
      $11_1 = $866($8_1 | 0, ($11_1 << 24 | 0) >> 24 | 0 | 0) | 0;
      $12_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $12_1 + 4 | 0;
      HEAP32[$12_1 >> 2] = $11_1;
      $6_1 = $6_1 + 1 | 0;
      continue label$14;
     }
     break label$14;
    };
    $12_1 = $1004($9_1 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    $11_1 = $14_1 + 4 | 0;
    HEAP32[$5_1 >> 2] = $11_1;
    HEAP32[$14_1 >> 2] = $12_1;
    $6_1 = $6_1 + 1 | 0;
    break label$12;
   }
   $11_1 = HEAP32[$5_1 >> 2] | 0;
  }
  $997($8_1 | 0, $6_1 | 0, $2_1 | 0, $11_1 | 0) | 0;
  $6_1 = (HEAP32[$5_1 >> 2] | 0) + (($2_1 - $6_1 | 0) << 2 | 0) | 0;
  HEAP32[$5_1 >> 2] = $6_1;
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + (($1_1 - $0_1 | 0) << 2 | 0) | 0;
  $1835($7_1 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $1055($0_1) {
  $0_1 = $0_1 | 0;
  $1053($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $1056($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1777($0_1 | 0, $1776($1_1 | 0) | 0 | 0) | 0;
  $868($0_1 + 4 | 0 | 0, $867($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1057($0_1) {
  $0_1 = $0_1 | 0;
  return $1778($0_1 | 0) | 0 | 0;
 }
 
 function $1058($0_1) {
  $0_1 = $0_1 | 0;
  return $869($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1059($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var $6_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0;
  $6_1 = global$0 - 432 | 0;
  global$0 = $6_1;
  i64toi32_i32$1 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 424 | 0) >> 2] = 37;
  HEAP32[($6_1 + 428 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = $1021($6_1 + 424 | 0 | 1 | 0 | 0, 10250 | 0, $509($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($6_1 + 380 | 0) >> 2] = $6_1 + 384 | 0;
  $8_1 = $958() | 0;
  label$1 : {
   label$2 : {
    if (!$7_1) {
     break label$2
    }
    $9_1 = $1022($2_1 | 0) | 0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $6_1 + 72 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $5_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $6_1 + 64 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $4_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($6_1 + 48 | 0) >> 2] = $9_1;
    $8_1 = $1012($6_1 + 384 | 0 | 0, 30 | 0, $8_1 | 0, $6_1 + 424 | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
    break label$1;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 80 | 0) >> 2] = $4_1;
   HEAP32[($6_1 + 84 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 88 | 0) >> 2] = $5_1;
   HEAP32[($6_1 + 92 | 0) >> 2] = i64toi32_i32$0;
   $8_1 = $1012($6_1 + 384 | 0 | 0, 30 | 0, $8_1 | 0, $6_1 + 424 | 0 | 0, $6_1 + 80 | 0 | 0) | 0;
  }
  HEAP32[($6_1 + 128 | 0) >> 2] = 67;
  $9_1 = $1023($6_1 + 368 | 0 | 0, 0 | 0, $6_1 + 128 | 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($8_1 | 0) < (30 | 0)) {
     break label$4
    }
    $8_1 = $958() | 0;
    label$5 : {
     label$6 : {
      if (!$7_1) {
       break label$6
      }
      $7_1 = $1022($2_1 | 0) | 0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = $6_1 + 24 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $5_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $6_1 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $4_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[$6_1 >> 2] = $7_1;
      $8_1 = $1024($6_1 + 380 | 0 | 0, $8_1 | 0, $6_1 + 424 | 0 | 0, $6_1 | 0) | 0;
      break label$5;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $6_1;
     HEAP32[($6_1 + 32 | 0) >> 2] = $4_1;
     HEAP32[($6_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$1 = $6_1;
     HEAP32[($6_1 + 40 | 0) >> 2] = $5_1;
     HEAP32[($6_1 + 44 | 0) >> 2] = i64toi32_i32$0;
     $8_1 = $1024($6_1 + 380 | 0 | 0, $8_1 | 0, $6_1 + 424 | 0 | 0, $6_1 + 32 | 0 | 0) | 0;
    }
    $7_1 = HEAP32[($6_1 + 380 | 0) >> 2] | 0;
    if (!$7_1) {
     break label$3
    }
    $1025($9_1 | 0, $7_1 | 0);
   }
   $7_1 = HEAP32[($6_1 + 380 | 0) >> 2] | 0;
   $10_1 = $7_1 + $8_1 | 0;
   $11_1 = $1013($7_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
   HEAP32[($6_1 + 128 | 0) >> 2] = 67;
   $7_1 = $1052($6_1 + 120 | 0 | 0, 0 | 0, $6_1 + 128 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     if ((HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0) != ($6_1 + 384 | 0 | 0)) {
      break label$8
     }
     $8_1 = $6_1 + 128 | 0;
     $12_1 = $6_1 + 384 | 0;
     break label$7;
    }
    $8_1 = $1923($8_1 << 3 | 0 | 0) | 0;
    if (!$8_1) {
     break label$3
    }
    $1053($7_1 | 0, $8_1 | 0);
    $12_1 = HEAP32[($6_1 + 380 | 0) >> 2] | 0;
   }
   $807($6_1 + 104 | 0 | 0, $2_1 | 0);
   $1054($12_1 | 0, $11_1 | 0, $10_1 | 0, $8_1 | 0, $6_1 + 116 | 0 | 0, $6_1 + 112 | 0 | 0, $6_1 + 104 | 0 | 0);
   $911($6_1 + 104 | 0 | 0) | 0;
   $2_1 = $1044($1_1 | 0, $8_1 | 0, HEAP32[($6_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 112 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $1055($7_1 | 0) | 0;
   $1027($9_1 | 0) | 0;
   global$0 = $6_1 + 432 | 0;
   return $2_1 | 0;
  }
  $1805();
  abort();
 }
 
 function $1060($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $9_1 = 0, $6_1 = 0, $10_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  $10_1 = 0;
  HEAP16[($5_1 + 204 | 0) >> 1] = HEAPU8[($10_1 + 10262 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 10263 | 0) >> 0] | 0) << 8 | 0) | 0;
  $9_1 = 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAPU8[($9_1 + 10258 | 0) >> 0] | 0 | ((HEAPU8[($9_1 + 10259 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($9_1 + 10260 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($9_1 + 10261 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $6_1 = $958() | 0;
  HEAP32[$5_1 >> 2] = $4_1;
  $7_1 = $1012($5_1 + 176 | 0 | 0, 20 | 0, $6_1 | 0, $5_1 + 200 | 0 | 0, $5_1 | 0) | 0;
  $4_1 = ($5_1 + 176 | 0) + $7_1 | 0;
  $6_1 = $1013($5_1 + 176 | 0 | 0, $4_1 | 0, $2_1 | 0) | 0;
  $807($5_1 + 16 | 0 | 0, $2_1 | 0);
  $8_1 = $821($5_1 + 16 | 0 | 0) | 0;
  $911($5_1 + 16 | 0 | 0) | 0;
  $997($8_1 | 0, $5_1 + 176 | 0 | 0, $4_1 | 0, $5_1 + 16 | 0 | 0) | 0;
  $7_1 = ($5_1 + 16 | 0) + ($7_1 << 2 | 0) | 0;
  $2_1 = $1044($1_1 | 0, $5_1 + 16 | 0 | 0, (($6_1 | 0) == ($4_1 | 0) ? $7_1 : ($5_1 + 16 | 0) + (($6_1 - ($5_1 + 176 | 0) | 0) << 2 | 0) | 0) | 0, $7_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $5_1 + 208 | 0;
  return $2_1 | 0;
 }
 
 function $1061($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $1779($0_1 | 0, $1_1 | 0);
    $0_1 = $0_1 + 1 | 0;
    continue label$2;
   };
  }
 }
 
 function $1062($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -4 | 0;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $1780($0_1 | 0, $1_1 | 0);
    $0_1 = $0_1 + 4 | 0;
    continue label$2;
   };
  }
 }
 
 function $1063($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  $807($8_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $522($8_1 + 8 | 0 | 0) | 0;
  $911($8_1 + 8 | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($6_1 | 0) == ($7_1 | 0)) {
     break label$1
    }
    if ($2_1) {
     break label$1
    }
    label$3 : {
     if ($812($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0) {
      break label$3
     }
     label$4 : {
      label$5 : {
       if (($1064($1_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
        break label$5
       }
       $2_1 = $6_1 + 1 | 0;
       if (($2_1 | 0) == ($7_1 | 0)) {
        break label$3
       }
       $9_1 = 0;
       label$6 : {
        label$7 : {
         $10_1 = $1064($1_1 | 0, HEAP8[$2_1 >> 0] | 0 | 0, 0 | 0) | 0;
         if (($10_1 | 0) == (69 | 0)) {
          break label$7
         }
         if (($10_1 & 255 | 0 | 0) == (48 | 0)) {
          break label$7
         }
         $11_1 = $10_1;
         $2_1 = $6_1;
         break label$6;
        }
        $6_1 = $6_1 + 2 | 0;
        if (($6_1 | 0) == ($7_1 | 0)) {
         break label$3
        }
        $11_1 = $1064($1_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0, 0 | 0) | 0;
        $9_1 = $10_1;
       }
       HEAP32[($8_1 + 24 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, HEAP32[($8_1 + 24 | 0) >> 2] | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0, $3_1, $4_1, $5_1, $11_1, $9_1) | 0;
       $6_1 = $2_1 + 2 | 0;
       break label$4;
      }
      label$8 : {
       if (!($810($1_1 | 0, 8192 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0)) {
        break label$8
       }
       label$9 : {
        label$10 : while (1) {
         label$11 : {
          $6_1 = $6_1 + 1 | 0;
          if (($6_1 | 0) != ($7_1 | 0)) {
           break label$11
          }
          $6_1 = $7_1;
          break label$9;
         }
         if ($810($1_1 | 0, 8192 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0) {
          continue label$10
         }
         break label$10;
        };
       }
       label$12 : while (1) {
        if (!($808($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0)) {
         break label$4
        }
        if (!($810($1_1 | 0, 8192 | 0, $809($8_1 + 24 | 0 | 0) | 0 | 0) | 0)) {
         break label$4
        }
        $811($8_1 + 24 | 0 | 0) | 0;
        continue label$12;
       };
      }
      label$13 : {
       if (($920($1_1 | 0, $809($8_1 + 24 | 0 | 0) | 0 | 0) | 0 | 0) != ($920($1_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0 | 0)) {
        break label$13
       }
       $6_1 = $6_1 + 1 | 0;
       $811($8_1 + 24 | 0 | 0) | 0;
       break label$4;
      }
      HEAP32[$4_1 >> 2] = 4;
     }
     $2_1 = HEAP32[$4_1 >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
   HEAP32[$4_1 >> 2] = 4;
  }
  label$14 : {
   if (!($812($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0)) {
    break label$14
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $6_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
  global$0 = $8_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $1064($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $1065($0_1) {
  $0_1 = $0_1 | 0;
  return 2 | 0;
 }
 
 function $1066($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 624576549;
  HEAP32[($6_1 + 12 | 0) >> 2] = 1394948685;
  $0_1 = $1063($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 8 | 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1067($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
  return $1063($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $26($6_1 | 0) | 0 | 0, ($26($6_1 | 0) | 0) + ($44($6_1 | 0) | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1068($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $807($6_1 | 0, $3_1 | 0);
  $3_1 = $522($6_1 | 0) | 0;
  $911($6_1 | 0) | 0;
  $1069($0_1 | 0, $5_1 + 24 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1069($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($915($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 168 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (167 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (7 | 0) | 0;
  }
 }
 
 function $1070($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $807($6_1 | 0, $3_1 | 0);
  $3_1 = $522($6_1 | 0) | 0;
  $911($6_1 | 0) | 0;
  $1071($0_1 | 0, $5_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1071($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($915($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 288 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (287 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (12 | 0) | 0;
  }
 }
 
 function $1072($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $807($6_1 | 0, $3_1 | 0);
  $3_1 = $522($6_1 | 0) | 0;
  $911($6_1 | 0) | 0;
  $1073($0_1 | 0, $5_1 + 20 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1073($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1074($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($2_1 | 0) < (69 | 0) ? $2_1 + 2e3 | 0 : ($2_1 | 0) < (100 | 0) ? $2_1 + 1900 | 0 : $2_1) + -1900 | 0;
  }
 }
 
 function $1074($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!($812($0_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | 6 | 0;
    $1_1 = 0;
    break label$1;
   }
   label$3 : {
    $1_1 = $809($0_1 | 0) | 0;
    if ($810($3_1 | 0, 2048 | 0, $1_1 | 0) | 0) {
     break label$3
    }
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | 4 | 0;
    $1_1 = 0;
    break label$1;
   }
   $1_1 = $1064($3_1 | 0, $1_1 | 0, 0 | 0) | 0;
   label$4 : {
    label$5 : while (1) {
     $811($0_1 | 0) | 0;
     $1_1 = $1_1 + -48 | 0;
     $6_1 = $808($0_1 | 0, $5_1 + 8 | 0 | 0) | 0;
     if (($4_1 | 0) < (2 | 0)) {
      break label$4
     }
     if (!$6_1) {
      break label$4
     }
     $6_1 = $809($0_1 | 0) | 0;
     if (!($810($3_1 | 0, 2048 | 0, $6_1 | 0) | 0)) {
      break label$1
     }
     $4_1 = $4_1 + -1 | 0;
     $1_1 = Math_imul($1_1, 10) + ($1064($3_1 | 0, $6_1 | 0, 0 | 0) | 0) | 0;
     continue label$5;
    };
   }
   if (!($812($0_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | 2 | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1075($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $13_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $156_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 0;
  $807($8_1 + 8 | 0 | 0, $3_1 | 0);
  $9_1 = $522($8_1 + 8 | 0 | 0) | 0;
  $911($8_1 + 8 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      switch ($6_1 + -65 | 0 | 0) {
      case 0:
      case 32:
       $1069($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 1:
      case 33:
      case 39:
       $1071($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 34:
       $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $1063($0_1 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $26($1_1 | 0) | 0 | 0, ($26($1_1 | 0) | 0) + ($44($1_1 | 0) | 0) | 0 | 0) | 0;
       break label$2;
      case 35:
      case 36:
       $1076($0_1 | 0, $5_1 + 12 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 3:
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$0 = 2032480100;
       HEAP32[($8_1 + 8 | 0) >> 2] = 623865125;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $1063($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 16 | 0 | 0) | 0;
       break label$2;
      case 5:
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$0 = 1680158061;
       HEAP32[($8_1 + 8 | 0) >> 2] = 623728933;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $1063($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 16 | 0 | 0) | 0;
       break label$2;
      case 7:
       $1077($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 8:
       $1078($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 41:
       $1079($0_1 | 0, $5_1 + 28 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 44:
       $1080($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 12:
       $1081($0_1 | 0, $5_1 + 4 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 45:
      case 51:
       $1082($0_1 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 47:
       $1083($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 49:
       $14_1 = 0;
       $15_1 = HEAPU8[($14_1 + 10271 | 0) >> 0] | 0 | ((HEAPU8[($14_1 + 10272 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($14_1 + 10273 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($14_1 + 10274 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       HEAP8[($8_1 + 15 | 0) >> 0] = $15_1;
       HEAP8[($8_1 + 16 | 0) >> 0] = $15_1 >>> 8 | 0;
       HEAP8[($8_1 + 17 | 0) >> 0] = $15_1 >>> 16 | 0;
       HEAP8[($8_1 + 18 | 0) >> 0] = $15_1 >>> 24 | 0;
       $13_1 = 0;
       i64toi32_i32$0 = HEAPU8[($13_1 + 10264 | 0) >> 0] | 0 | ((HEAPU8[($13_1 + 10265 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13_1 + 10266 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13_1 + 10267 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       i64toi32_i32$1 = HEAPU8[($13_1 + 10268 | 0) >> 0] | 0 | ((HEAPU8[($13_1 + 10269 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13_1 + 10270 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13_1 + 10271 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       $156_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $156_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($8_1 + 24 | 0) >> 2] = $1063($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 19 | 0 | 0) | 0;
       break label$2;
      case 17:
       HEAP8[($8_1 + 12 | 0) >> 0] = HEAPU8[(0 + 10279 | 0) >> 0] | 0;
       $16_1 = 0;
       HEAP32[($8_1 + 8 | 0) >> 2] = HEAPU8[($16_1 + 10275 | 0) >> 0] | 0 | ((HEAPU8[($16_1 + 10276 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($16_1 + 10277 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($16_1 + 10278 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $1063($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 13 | 0 | 0) | 0;
       break label$2;
      case 18:
       $1084($0_1 | 0, $5_1 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 19:
       i64toi32_i32$0 = $8_1;
       i64toi32_i32$1 = 1394948685;
       HEAP32[($8_1 + 8 | 0) >> 2] = 624576549;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($8_1 + 24 | 0) >> 2] = $1063($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 16 | 0 | 0) | 0;
       break label$2;
      case 54:
       $1085($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 55:
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) | 0;
       break label$1;
      case 23:
       $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $1063($0_1 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $26($1_1 | 0) | 0 | 0, ($26($1_1 | 0) | 0) + ($44($1_1 | 0) | 0) | 0 | 0) | 0;
       break label$2;
      case 56:
       $1073($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 24:
       $1086($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      default:
       if (($6_1 | 0) == (37 | 0)) {
        break label$3
       }
       break;
      case 2:
      case 4:
      case 6:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 20:
      case 21:
      case 22:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 37:
      case 38:
      case 40:
      case 42:
      case 43:
      case 46:
      case 48:
      case 50:
      case 52:
      case 53:
       break label$4;
      };
     }
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
     break label$2;
    }
    $1087($0_1 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
   }
   $4_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
  }
  global$0 = $8_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $1076($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1074($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 + -1 | 0) >>> 0 > 30 >>> 0) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1077($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1074($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (23 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1078($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1074($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 + -1 | 0) >>> 0 > 11 >>> 0) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1079($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1074($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 3 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (365 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1080($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1074($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (12 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1 | 0;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1081($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1074($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (59 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1082($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if (!($808($1_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
    if (!($810($4_1 | 0, 8192 | 0, $809($1_1 | 0) | 0 | 0) | 0)) {
     break label$1
    }
    $811($1_1 | 0) | 0;
    continue label$2;
   };
  }
  label$3 : {
   if (!($812($1_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | 2 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1083($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   if (($44($0_1 | 0) | 0 | 0) != (0 - ($44($0_1 + 12 | 0 | 0) | 0) | 0 | 0)) {
    break label$1
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
   return;
  }
  $0_1 = ($915($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 24 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
  label$2 : {
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   if (($4_1 | 0) != (12 | 0)) {
    break label$2
   }
   if ($0_1) {
    break label$2
   }
   HEAP32[$1_1 >> 2] = 0;
   return;
  }
  label$3 : {
   if (($4_1 | 0) > (11 | 0)) {
    break label$3
   }
   if (($0_1 | 0) != (12 | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $4_1 + 12 | 0;
  }
 }
 
 function $1084($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1074($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (60 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1085($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1074($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 1 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (6 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1086($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1074($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1900 | 0;
  }
 }
 
 function $1087($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $2_1 = 6;
  label$1 : {
   label$2 : {
    if ($812($1_1 | 0, $5_1 + 8 | 0 | 0) | 0) {
     break label$2
    }
    $2_1 = 4;
    if (($1064($4_1 | 0, $809($1_1 | 0) | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
     break label$2
    }
    $2_1 = 2;
    if (!($812($811($1_1 | 0) | 0 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | $2_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1088($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  $807($8_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $821($8_1 + 8 | 0 | 0) | 0;
  $911($8_1 + 8 | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($6_1 | 0) == ($7_1 | 0)) {
     break label$1
    }
    if ($2_1) {
     break label$1
    }
    label$3 : {
     if ($826($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0) {
      break label$3
     }
     label$4 : {
      label$5 : {
       if (($1089($1_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
        break label$5
       }
       $2_1 = $6_1 + 4 | 0;
       if (($2_1 | 0) == ($7_1 | 0)) {
        break label$3
       }
       $9_1 = 0;
       label$6 : {
        label$7 : {
         $10_1 = $1089($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, 0 | 0) | 0;
         if (($10_1 | 0) == (69 | 0)) {
          break label$7
         }
         if (($10_1 & 255 | 0 | 0) == (48 | 0)) {
          break label$7
         }
         $11_1 = $10_1;
         $2_1 = $6_1;
         break label$6;
        }
        $6_1 = $6_1 + 8 | 0;
        if (($6_1 | 0) == ($7_1 | 0)) {
         break label$3
        }
        $11_1 = $1089($1_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0;
        $9_1 = $10_1;
       }
       HEAP32[($8_1 + 24 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, HEAP32[($8_1 + 24 | 0) >> 2] | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0, $3_1, $4_1, $5_1, $11_1, $9_1) | 0;
       $6_1 = $2_1 + 8 | 0;
       break label$4;
      }
      label$8 : {
       if (!($824($1_1 | 0, 8192 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0)) {
        break label$8
       }
       label$9 : {
        label$10 : while (1) {
         label$11 : {
          $6_1 = $6_1 + 4 | 0;
          if (($6_1 | 0) != ($7_1 | 0)) {
           break label$11
          }
          $6_1 = $7_1;
          break label$9;
         }
         if ($824($1_1 | 0, 8192 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0) {
          continue label$10
         }
         break label$10;
        };
       }
       label$12 : while (1) {
        if (!($822($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0)) {
         break label$4
        }
        if (!($824($1_1 | 0, 8192 | 0, $823($8_1 + 24 | 0 | 0) | 0 | 0) | 0)) {
         break label$4
        }
        $825($8_1 + 24 | 0 | 0) | 0;
        continue label$12;
       };
      }
      label$13 : {
       if (($969($1_1 | 0, $823($8_1 + 24 | 0 | 0) | 0 | 0) | 0 | 0) != ($969($1_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0 | 0)) {
        break label$13
       }
       $6_1 = $6_1 + 4 | 0;
       $825($8_1 + 24 | 0 | 0) | 0;
       break label$4;
      }
      HEAP32[$4_1 >> 2] = 4;
     }
     $2_1 = HEAP32[$4_1 >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
   HEAP32[$4_1 >> 2] = 4;
  }
  label$14 : {
   if (!($826($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0)) {
    break label$14
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $6_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
  global$0 = $8_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $1089($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $1090($0_1) {
  $0_1 = $0_1 | 0;
  return 2 | 0;
 }
 
 function $1091($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $12_1 = 0, $15_1 = 0, $17_1 = 0, $19_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 10456 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 10460 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 10448 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 10452 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $15_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 10440 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 10444 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $17_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 10432 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 10436 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[i64toi32_i32$1 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $0_1 = $1088($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$1 + 32 | 0 | 0) | 0;
  global$0 = i64toi32_i32$1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $1092($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
  return $1088($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $1093($6_1 | 0) | 0 | 0, ($1093($6_1 | 0) | 0) + (($970($6_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1093($0_1) {
  $0_1 = $0_1 | 0;
  return $1095($1094($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1094($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($1096($0_1 | 0) | 0)) {
    break label$1
   }
   return $1781($0_1 | 0) | 0 | 0;
  }
  return $1782($0_1 | 0) | 0 | 0;
 }
 
 function $1095($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1096($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[(($1631($0_1 | 0) | 0) + 11 | 0) >> 0] | 0) >>> 7 | 0 | 0;
 }
 
 function $1097($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[(($1631($0_1 | 0) | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1098($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[(($1631($0_1 | 0) | 0) + 11 | 0) >> 0] | 0 | 0;
 }
 
 function $1099($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $807($6_1 | 0, $3_1 | 0);
  $3_1 = $821($6_1 | 0) | 0;
  $911($6_1 | 0) | 0;
  $1100($0_1 | 0, $5_1 + 24 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1100($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($967($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 168 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (167 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (7 | 0) | 0;
  }
 }
 
 function $1101($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $807($6_1 | 0, $3_1 | 0);
  $3_1 = $821($6_1 | 0) | 0;
  $911($6_1 | 0) | 0;
  $1102($0_1 | 0, $5_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1102($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($967($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 288 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (287 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (12 | 0) | 0;
  }
 }
 
 function $1103($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $807($6_1 | 0, $3_1 | 0);
  $3_1 = $821($6_1 | 0) | 0;
  $911($6_1 | 0) | 0;
  $1104($0_1 | 0, $5_1 + 20 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1104($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1105($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($2_1 | 0) < (69 | 0) ? $2_1 + 2e3 | 0 : ($2_1 | 0) < (100 | 0) ? $2_1 + 1900 | 0 : $2_1) + -1900 | 0;
  }
 }
 
 function $1105($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!($826($0_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | 6 | 0;
    $1_1 = 0;
    break label$1;
   }
   label$3 : {
    $1_1 = $823($0_1 | 0) | 0;
    if ($824($3_1 | 0, 2048 | 0, $1_1 | 0) | 0) {
     break label$3
    }
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | 4 | 0;
    $1_1 = 0;
    break label$1;
   }
   $1_1 = $1089($3_1 | 0, $1_1 | 0, 0 | 0) | 0;
   label$4 : {
    label$5 : while (1) {
     $825($0_1 | 0) | 0;
     $1_1 = $1_1 + -48 | 0;
     $6_1 = $822($0_1 | 0, $5_1 + 8 | 0 | 0) | 0;
     if (($4_1 | 0) < (2 | 0)) {
      break label$4
     }
     if (!$6_1) {
      break label$4
     }
     $6_1 = $823($0_1 | 0) | 0;
     if (!($824($3_1 | 0, 2048 | 0, $6_1 | 0) | 0)) {
      break label$1
     }
     $4_1 = $4_1 + -1 | 0;
     $1_1 = Math_imul($1_1, 10) + ($1089($3_1 | 0, $6_1 | 0, 0 | 0) | 0) | 0;
     continue label$5;
    };
   }
   if (!($826($0_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | 2 | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1106($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $73_1 = 0, $76_1 = 0, $78_1 = 0, $80_1 = 0, $94_1 = 0, $97_1 = 0, $99_1 = 0, $101_1 = 0, $184_1 = 0, $186_1 = 0, $207_1 = 0, $210_1 = 0, $212_1 = 0, $214_1 = 0;
  $8_1 = global$0 - 64 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 0;
  $807($8_1 | 0, $3_1 | 0);
  $9_1 = $821($8_1 | 0) | 0;
  $911($8_1 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      switch ($6_1 + -65 | 0 | 0) {
      case 0:
      case 32:
       $1100($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 1:
      case 33:
      case 39:
       $1102($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 34:
       $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $1088($0_1 | 0, HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $1093($1_1 | 0) | 0 | 0, ($1093($1_1 | 0) | 0) + (($970($1_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0;
       break label$2;
      case 35:
      case 36:
       $1107($0_1 | 0, $5_1 + 12 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 3:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 10312 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 10316 | 0) >> 2] | 0;
       $73_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $73_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 10304 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 10308 | 0) >> 2] | 0;
       $76_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $76_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 10296 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 10300 | 0) >> 2] | 0;
       $78_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $78_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 10288 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 10292 | 0) >> 2] | 0;
       $80_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $80_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $1088($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break label$2;
      case 5:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 10344 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 10348 | 0) >> 2] | 0;
       $94_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $94_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 10336 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 10340 | 0) >> 2] | 0;
       $97_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $97_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 10328 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 10332 | 0) >> 2] | 0;
       $99_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $99_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 10320 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 10324 | 0) >> 2] | 0;
       $101_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $101_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $1088($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break label$2;
      case 7:
       $1108($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 8:
       $1109($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 41:
       $1110($0_1 | 0, $5_1 + 28 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 44:
       $1111($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 12:
       $1112($0_1 | 0, $5_1 + 4 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 45:
      case 51:
       $1113($0_1 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 47:
       $1114($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 49:
       $6_1 = $1932($8_1 | 0, 10352 | 0, 44 | 0) | 0;
       HEAP32[($6_1 + 56 | 0) >> 2] = $1088($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0, $6_1 + 44 | 0 | 0) | 0;
       break label$2;
      case 17:
       HEAP32[($8_1 + 16 | 0) >> 2] = HEAP32[(0 + 10416 | 0) >> 2] | 0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 10408 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 10412 | 0) >> 2] | 0;
       $184_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $184_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 10400 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 10404 | 0) >> 2] | 0;
       $186_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $186_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $1088($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 20 | 0 | 0) | 0;
       break label$2;
      case 18:
       $1115($0_1 | 0, $5_1 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 19:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 10456 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 10460 | 0) >> 2] | 0;
       $207_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $207_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 10448 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 10452 | 0) >> 2] | 0;
       $210_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $210_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 10440 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 10444 | 0) >> 2] | 0;
       $212_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $212_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 10432 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 10436 | 0) >> 2] | 0;
       $214_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $214_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $1088($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break label$2;
      case 54:
       $1116($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 55:
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) | 0;
       break label$1;
      case 23:
       $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $1088($0_1 | 0, HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $1093($1_1 | 0) | 0 | 0, ($1093($1_1 | 0) | 0) + (($970($1_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0;
       break label$2;
      case 56:
       $1104($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 24:
       $1117($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      default:
       if (($6_1 | 0) == (37 | 0)) {
        break label$3
       }
       break;
      case 2:
      case 4:
      case 6:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 20:
      case 21:
      case 22:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 37:
      case 38:
      case 40:
      case 42:
      case 43:
      case 46:
      case 48:
      case 50:
      case 52:
      case 53:
       break label$4;
      };
     }
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
     break label$2;
    }
    $1118($0_1 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
   }
   $4_1 = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
  }
  global$0 = $8_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $1107($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1105($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 + -1 | 0) >>> 0 > 30 >>> 0) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1108($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1105($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (23 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1109($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1105($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 + -1 | 0) >>> 0 > 11 >>> 0) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1110($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1105($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 3 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (365 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1111($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1105($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (12 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1 | 0;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1112($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1105($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (59 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1113($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if (!($822($1_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
    if (!($824($4_1 | 0, 8192 | 0, $823($1_1 | 0) | 0 | 0) | 0)) {
     break label$1
    }
    $825($1_1 | 0) | 0;
    continue label$2;
   };
  }
  label$3 : {
   if (!($826($1_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | 2 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1114($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   if (($970($0_1 | 0) | 0 | 0) != (0 - ($970($0_1 + 12 | 0 | 0) | 0) | 0 | 0)) {
    break label$1
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
   return;
  }
  $0_1 = ($967($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 24 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
  label$2 : {
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   if (($4_1 | 0) != (12 | 0)) {
    break label$2
   }
   if ($0_1) {
    break label$2
   }
   HEAP32[$1_1 >> 2] = 0;
   return;
  }
  label$3 : {
   if (($4_1 | 0) > (11 | 0)) {
    break label$3
   }
   if (($0_1 | 0) != (12 | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $4_1 + 12 | 0;
  }
 }
 
 function $1115($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1105($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (60 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1116($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1105($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 1 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (6 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1117($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $1105($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1900 | 0;
  }
 }
 
 function $1118($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $2_1 = 6;
  label$1 : {
   label$2 : {
    if ($826($1_1 | 0, $5_1 + 8 | 0 | 0) | 0) {
     break label$2
    }
    $2_1 = 4;
    if (($1089($4_1 | 0, $823($1_1 | 0) | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
     break label$2
    }
    $2_1 = 2;
    if (!($826($825($1_1 | 0) | 0 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | $2_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1119($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $7_1 + 116 | 0;
  $1120($0_1 + 8 | 0 | 0, $7_1 + 16 | 0 | 0, $7_1 + 12 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
  $1_1 = $1121($7_1 + 16 | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
  global$0 = $7_1 + 128 | 0;
  return $1_1 | 0;
 }
 
 function $1120($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP8[($6_1 + 15 | 0) >> 0] = 0;
  HEAP8[($6_1 + 14 | 0) >> 0] = $5_1;
  HEAP8[($6_1 + 13 | 0) >> 0] = $4_1;
  HEAP8[($6_1 + 12 | 0) >> 0] = 37;
  label$1 : {
   if (!$5_1) {
    break label$1
   }
   $1122($6_1 + 13 | 0 | 0, $6_1 + 14 | 0 | 0);
  }
  HEAP32[$2_1 >> 2] = $1_1 + (fimport$17($1_1 | 0, $1123($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0, $6_1 + 12 | 0 | 0, $3_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0) | 0;
  global$0 = $6_1 + 16 | 0;
 }
 
 function $1121($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1126($1124($0_1 | 0) | 0 | 0, $1124($1_1 | 0) | 0 | 0, $1125($2_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1122($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = HEAPU8[($81($0_1 | 0) | 0) >> 0] | 0;
  HEAP8[$0_1 >> 0] = HEAPU8[($81($1_1 | 0) | 0) >> 0] | 0;
  HEAP8[$1_1 >> 0] = HEAPU8[($81($2_1 + 15 | 0 | 0) | 0) >> 0] | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1123($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1124($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1125($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1126($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1785($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1127($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 416 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $7_1 + 416 | 0;
  $1128($0_1 + 8 | 0 | 0, $7_1 + 16 | 0 | 0, $7_1 + 12 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
  $1_1 = $1129($7_1 + 16 | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
  global$0 = $7_1 + 416 | 0;
  return $1_1 | 0;
 }
 
 function $1128($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 144 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 132 | 0;
  $1120($0_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 0;
  HEAP32[($6_1 + 20 | 0) >> 2] = 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 32 | 0;
  label$1 : {
   $0_1 = $1131($1_1 | 0, $6_1 + 12 | 0 | 0, $1130($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   if (($0_1 | 0) != (-1 | 0)) {
    break label$1
   }
   $1132($6_1 | 0);
   abort();
  }
  HEAP32[$2_1 >> 2] = $1_1 + ($0_1 << 2 | 0) | 0;
  global$0 = $6_1 + 144 | 0;
 }
 
 function $1129($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1135($1133($0_1 | 0) | 0 | 0, $1133($1_1 | 0) | 0 | 0, $1134($2_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1130($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $1131($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  $4_1 = $961($5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  $0_1 = $886($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $962($4_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1132($0_1) {
  $0_1 = $0_1 | 0;
  fimport$1();
  abort();
 }
 
 function $1133($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1134($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1135($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1786($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1136($0_1) {
  $0_1 = $0_1 | 0;
  return $581() | 0 | 0;
 }
 
 function $1137($0_1) {
  $0_1 = $0_1 | 0;
  return $581() | 0 | 0;
 }
 
 function $1138($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $41($0_1 | 0) | 0;
 }
 
 function $1139($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $41($0_1 | 0) | 0;
 }
 
 function $1140($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $41($0_1 | 0) | 0;
 }
 
 function $1141($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $516($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1142($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1143($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1144($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1145($0_1) {
  $0_1 = $0_1 | 0;
  return $581() | 0 | 0;
 }
 
 function $1146($0_1) {
  $0_1 = $0_1 | 0;
  return $581() | 0 | 0;
 }
 
 function $1147($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $41($0_1 | 0) | 0;
 }
 
 function $1148($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $41($0_1 | 0) | 0;
 }
 
 function $1149($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $41($0_1 | 0) | 0;
 }
 
 function $1150($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $516($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1151($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1152($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1153($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1154($0_1) {
  $0_1 = $0_1 | 0;
  return $1155() | 0 | 0;
 }
 
 function $1155() {
  return $1156() | 0 | 0;
 }
 
 function $1156() {
  return 2147483647 | 0;
 }
 
 function $1157($0_1) {
  $0_1 = $0_1 | 0;
  return $1155() | 0 | 0;
 }
 
 function $1158($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $41($0_1 | 0) | 0;
 }
 
 function $1159($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1160($0_1 | 0) | 0;
 }
 
 function $1160($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $907($0_1 | 0, $1_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $1161($0_1 | 0);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1161($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $1636($0_1 | 0) | 0;
  $0_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($0_1 | 0) != (3 | 0)) {
     break label$2
    }
    return;
   }
   HEAP32[($1_1 + ($0_1 << 2 | 0) | 0) >> 2] = 0;
   $0_1 = $0_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $1162($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1160($0_1 | 0) | 0;
 }
 
 function $1163($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1046($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1164($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1165($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1166($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1167($0_1) {
  $0_1 = $0_1 | 0;
  return $1155() | 0 | 0;
 }
 
 function $1168($0_1) {
  $0_1 = $0_1 | 0;
  return $1155() | 0 | 0;
 }
 
 function $1169($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $41($0_1 | 0) | 0;
 }
 
 function $1170($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1160($0_1 | 0) | 0;
 }
 
 function $1171($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1160($0_1 | 0) | 0;
 }
 
 function $1172($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1046($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1173($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1174($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1175($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1176($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0;
  $7_1 = global$0 - 288 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 272 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 280 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = 68;
  $1_1 = $1023($7_1 + 152 | 0 | 0, $7_1 + 160 | 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $807($7_1 + 144 | 0 | 0, $4_1 | 0);
  $8_1 = $522($7_1 + 144 | 0 | 0) | 0;
  HEAP8[($7_1 + 143 | 0) >> 0] = 0;
  label$1 : {
   if (!($1178($7_1 + 280 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 144 | 0 | 0, $509($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 143 | 0 | 0, $8_1 | 0, $1_1 | 0, $7_1 + 148 | 0 | 0, $7_1 + 260 | 0 | 0) | 0)) {
    break label$1
   }
   $11_1 = 0;
   $12_1 = HEAPU8[($11_1 + 10475 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 10476 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 10477 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 10478 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[($7_1 + 135 | 0) >> 0] = $12_1;
   HEAP8[($7_1 + 136 | 0) >> 0] = $12_1 >>> 8 | 0;
   HEAP8[($7_1 + 137 | 0) >> 0] = $12_1 >>> 16 | 0;
   HEAP8[($7_1 + 138 | 0) >> 0] = $12_1 >>> 24 | 0;
   $10_1 = 0;
   i64toi32_i32$1 = HEAPU8[($10_1 + 10472 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 10473 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 10474 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 10475 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 128 | 0) >> 2] = HEAPU8[($10_1 + 10468 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 10469 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 10470 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 10471 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 132 | 0) >> 2] = i64toi32_i32$1;
   $957($8_1 | 0, $7_1 + 128 | 0 | 0, $7_1 + 138 | 0 | 0, $7_1 + 118 | 0 | 0) | 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = 67;
   $8_1 = $1023($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
   $2_1 = $7_1 + 16 | 0;
   label$2 : {
    label$3 : {
     if (((HEAP32[($7_1 + 148 | 0) >> 2] | 0) - ($1179($1_1 | 0) | 0) | 0 | 0) < (99 | 0)) {
      break label$3
     }
     $1025($8_1 | 0, $1923(((HEAP32[($7_1 + 148 | 0) >> 2] | 0) - ($1179($1_1 | 0) | 0) | 0) + 2 | 0 | 0) | 0 | 0);
     if (!($1179($8_1 | 0) | 0)) {
      break label$2
     }
     $2_1 = $1179($8_1 | 0) | 0;
    }
    label$4 : {
     if (!(HEAPU8[($7_1 + 143 | 0) >> 0] | 0)) {
      break label$4
     }
     HEAP8[$2_1 >> 0] = 45;
     $2_1 = $2_1 + 1 | 0;
    }
    $4_1 = $1179($1_1 | 0) | 0;
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if ($4_1 >>> 0 < (HEAP32[($7_1 + 148 | 0) >> 2] | 0) >>> 0) {
        break label$7
       }
       HEAP8[$2_1 >> 0] = 0;
       HEAP32[$7_1 >> 2] = $6_1;
       if (($736($7_1 + 16 | 0 | 0, 10464 | 0, $7_1 | 0) | 0 | 0) != (1 | 0)) {
        break label$5
       }
       $1027($8_1 | 0) | 0;
       break label$1;
      }
      HEAP8[$2_1 >> 0] = HEAPU8[(($7_1 + 128 | 0) + (($1002($7_1 + 118 | 0 | 0, $1180($7_1 + 118 | 0 | 0) | 0 | 0, $4_1 | 0) | 0) - ($7_1 + 118 | 0) | 0) | 0) >> 0] | 0;
      $2_1 = $2_1 + 1 | 0;
      $4_1 = $4_1 + 1 | 0;
      continue label$6;
     };
    }
    $1132($7_1 | 0);
    abort();
   }
   $1805();
   abort();
  }
  label$8 : {
   if (!($812($7_1 + 280 | 0 | 0, $7_1 + 272 | 0 | 0) | 0)) {
    break label$8
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $4_1 = HEAP32[($7_1 + 280 | 0) >> 2] | 0;
  $911($7_1 + 144 | 0 | 0) | 0;
  $1027($1_1 | 0) | 0;
  global$0 = $7_1 + 288 | 0;
  return $4_1 | 0;
 }
 
 function $1177($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1178($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  var $11_1 = 0, $15_1 = 0, $16_1 = 0, $14_1 = 0, $12_1 = 0, $17_1 = 0, $13_1 = 0, $18_1 = 0, $19_1 = 0;
  $11_1 = global$0 - 560 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 548 | 0) >> 2] = $10_1;
  HEAP32[($11_1 + 552 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 104 | 0) >> 2] = 68;
  $12_1 = $1181($11_1 + 136 | 0 | 0, $11_1 + 144 | 0 | 0, $11_1 + 104 | 0 | 0) | 0;
  $1_1 = $1182($12_1 | 0) | 0;
  HEAP32[($11_1 + 132 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 128 | 0) >> 2] = $1_1 + 400 | 0;
  $13_1 = $41($11_1 + 104 | 0 | 0) | 0;
  $14_1 = $41($11_1 + 88 | 0 | 0) | 0;
  $15_1 = $41($11_1 + 72 | 0 | 0) | 0;
  $16_1 = $41($11_1 + 56 | 0 | 0) | 0;
  $17_1 = $41($11_1 + 40 | 0 | 0) | 0;
  $1183($2_1 | 0, $3_1 | 0, $11_1 + 120 | 0 | 0, $11_1 + 119 | 0 | 0, $11_1 + 118 | 0 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $16_1 | 0, $11_1 + 36 | 0 | 0);
  HEAP32[$9_1 >> 2] = $1179($8_1 | 0) | 0;
  $18_1 = $4_1 & 512 | 0;
  $19_1 = $18_1 >>> 9 | 0;
  $1_1 = 0;
  $2_1 = 0;
  label$1 : while (1) {
   $10_1 = $2_1;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($1_1 | 0) == (4 | 0)) {
        break label$5
       }
       if (!($808($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
        break label$5
       }
       $4_1 = 0;
       $2_1 = $10_1;
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            switch (HEAP8[(($11_1 + 120 | 0) + $1_1 | 0) >> 0] | 0 | 0) {
            case 1:
             if (($1_1 | 0) == (3 | 0)) {
              break label$3
             }
             label$12 : {
              if (!($810($7_1 | 0, 8192 | 0, $809($0_1 | 0) | 0 | 0) | 0)) {
               break label$12
              }
              $1184($11_1 + 24 | 0 | 0, $0_1 | 0, 0 | 0);
              $1845($17_1 | 0, $1185($11_1 + 24 | 0 | 0) | 0 | 0);
              break label$9;
             }
             HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
             $0_1 = 0;
             break label$4;
            case 0:
             break label$10;
            case 4:
             break label$6;
            case 2:
             break label$7;
            case 3:
             break label$8;
            default:
             break label$2;
            };
           }
           if (($1_1 | 0) == (3 | 0)) {
            break label$3
           }
          }
          label$13 : while (1) {
           if (!($808($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
            break label$3
           }
           if (!($810($7_1 | 0, 8192 | 0, $809($0_1 | 0) | 0 | 0) | 0)) {
            break label$3
           }
           $1184($11_1 + 24 | 0 | 0, $0_1 | 0, 0 | 0);
           $1845($17_1 | 0, $1185($11_1 + 24 | 0 | 0) | 0 | 0);
           continue label$13;
          };
         }
         if (($44($15_1 | 0) | 0 | 0) == (0 - ($44($16_1 | 0) | 0) | 0 | 0)) {
          break label$3
         }
         label$14 : {
          label$15 : {
           if (!($44($15_1 | 0) | 0)) {
            break label$15
           }
           if ($44($16_1 | 0) | 0) {
            break label$14
           }
          }
          $4_1 = $44($15_1 | 0) | 0;
          $2_1 = $809($0_1 | 0) | 0;
          label$16 : {
           if (!$4_1) {
            break label$16
           }
           label$17 : {
            if (($2_1 & 255 | 0 | 0) != (HEAPU8[($76($15_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
             break label$17
            }
            $811($0_1 | 0) | 0;
            $2_1 = ($44($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $10_1;
            break label$2;
           }
           HEAP8[$6_1 >> 0] = 1;
           break label$3;
          }
          if (($2_1 & 255 | 0 | 0) != (HEAPU8[($76($16_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
           break label$3
          }
          $811($0_1 | 0) | 0;
          HEAP8[$6_1 >> 0] = 1;
          $2_1 = ($44($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $10_1;
          break label$2;
         }
         label$18 : {
          if ((($809($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($76($15_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
           break label$18
          }
          $811($0_1 | 0) | 0;
          $2_1 = ($44($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $10_1;
          break label$2;
         }
         label$19 : {
          if ((($809($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($76($16_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
           break label$19
          }
          $811($0_1 | 0) | 0;
          HEAP8[$6_1 >> 0] = 1;
          $2_1 = ($44($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $10_1;
          break label$2;
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$4;
        }
        label$20 : {
         if ($1_1 >>> 0 < 2 >>> 0) {
          break label$20
         }
         if ($10_1) {
          break label$20
         }
         $2_1 = 0;
         if ((($1_1 | 0) == (2 | 0) & (HEAPU8[($11_1 + 123 | 0) >> 0] | 0 | 0) != (0 | 0) | 0 | $19_1 | 0 | 0) != (1 | 0)) {
          break label$2
         }
        }
        HEAP32[($11_1 + 16 | 0) >> 2] = $68($14_1 | 0) | 0;
        $4_1 = $78($11_1 + 24 | 0 | 0, $11_1 + 16 | 0 | 0, 0 | 0) | 0;
        label$21 : {
         if (!$1_1) {
          break label$21
         }
         if ((HEAPU8[(($1_1 + ($11_1 + 120 | 0) | 0) + -1 | 0) >> 0] | 0) >>> 0 > 1 >>> 0) {
          break label$21
         }
         label$22 : {
          label$23 : while (1) {
           HEAP32[($11_1 + 16 | 0) >> 2] = $69($14_1 | 0) | 0;
           if (!($1186($4_1 | 0, $11_1 + 16 | 0 | 0) | 0)) {
            break label$22
           }
           if (!($810($7_1 | 0, 8192 | 0, HEAP8[($85($4_1 | 0) | 0) >> 0] | 0 | 0) | 0)) {
            break label$22
           }
           $86($4_1 | 0) | 0;
           continue label$23;
          };
         }
         HEAP32[($11_1 + 16 | 0) >> 2] = $68($14_1 | 0) | 0;
         label$24 : {
          $4_1 = $79($4_1 | 0, $11_1 + 16 | 0 | 0) | 0;
          if ($4_1 >>> 0 > ($44($17_1 | 0) | 0) >>> 0) {
           break label$24
          }
          HEAP32[($11_1 + 16 | 0) >> 2] = $69($17_1 | 0) | 0;
          if ($1188($1187($11_1 + 16 | 0 | 0, $4_1 | 0) | 0 | 0, $69($17_1 | 0) | 0 | 0, $68($14_1 | 0) | 0 | 0) | 0) {
           break label$21
          }
         }
         HEAP32[($11_1 + 8 | 0) >> 2] = $68($14_1 | 0) | 0;
         $78($11_1 + 16 | 0 | 0, $11_1 + 8 | 0 | 0, 0 | 0) | 0;
         HEAP32[($11_1 + 24 | 0) >> 2] = HEAP32[($11_1 + 16 | 0) >> 2] | 0;
        }
        HEAP32[($11_1 + 16 | 0) >> 2] = HEAP32[($11_1 + 24 | 0) >> 2] | 0;
        label$25 : {
         label$26 : while (1) {
          HEAP32[($11_1 + 8 | 0) >> 2] = $69($14_1 | 0) | 0;
          if (!($1186($11_1 + 16 | 0 | 0, $11_1 + 8 | 0 | 0) | 0)) {
           break label$25
          }
          if (!($808($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
           break label$25
          }
          if ((($809($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($85($11_1 + 16 | 0 | 0) | 0) >> 0] | 0 | 0)) {
           break label$25
          }
          $811($0_1 | 0) | 0;
          $86($11_1 + 16 | 0 | 0) | 0;
          continue label$26;
         };
        }
        if (!$18_1) {
         break label$3
        }
        HEAP32[($11_1 + 8 | 0) >> 2] = $69($14_1 | 0) | 0;
        if (!($1186($11_1 + 16 | 0 | 0, $11_1 + 8 | 0 | 0) | 0)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
        $0_1 = 0;
        break label$4;
       }
       label$27 : {
        label$28 : while (1) {
         if (!($808($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
          break label$27
         }
         label$29 : {
          label$30 : {
           $2_1 = $809($0_1 | 0) | 0;
           if (!($810($7_1 | 0, 2048 | 0, $2_1 | 0) | 0)) {
            break label$30
           }
           label$31 : {
            $3_1 = HEAP32[$9_1 >> 2] | 0;
            if (($3_1 | 0) != (HEAP32[($11_1 + 548 | 0) >> 2] | 0 | 0)) {
             break label$31
            }
            $1189($8_1 | 0, $9_1 | 0, $11_1 + 548 | 0 | 0);
            $3_1 = HEAP32[$9_1 >> 2] | 0;
           }
           HEAP32[$9_1 >> 2] = $3_1 + 1 | 0;
           HEAP8[$3_1 >> 0] = $2_1;
           $4_1 = $4_1 + 1 | 0;
           break label$29;
          }
          $3_1 = $44($13_1 | 0) | 0;
          if (!$4_1) {
           break label$27
          }
          if (!$3_1) {
           break label$27
          }
          if (($2_1 & 255 | 0 | 0) != ((HEAPU8[($11_1 + 118 | 0) >> 0] | 0) & 255 | 0 | 0)) {
           break label$27
          }
          label$32 : {
           $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
           if (($2_1 | 0) != (HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0)) {
            break label$32
           }
           $1190($12_1 | 0, $11_1 + 132 | 0 | 0, $11_1 + 128 | 0 | 0);
           $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
          }
          HEAP32[($11_1 + 132 | 0) >> 2] = $2_1 + 4 | 0;
          HEAP32[$2_1 >> 2] = $4_1;
          $4_1 = 0;
         }
         $811($0_1 | 0) | 0;
         continue label$28;
        };
       }
       $3_1 = $1182($12_1 | 0) | 0;
       label$33 : {
        if (!$4_1) {
         break label$33
        }
        $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
        if (($3_1 | 0) == ($2_1 | 0)) {
         break label$33
        }
        label$34 : {
         if (($2_1 | 0) != (HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0)) {
          break label$34
         }
         $1190($12_1 | 0, $11_1 + 132 | 0 | 0, $11_1 + 128 | 0 | 0);
         $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
        }
        HEAP32[($11_1 + 132 | 0) >> 2] = $2_1 + 4 | 0;
        HEAP32[$2_1 >> 2] = $4_1;
       }
       label$35 : {
        if ((HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) < (1 | 0)) {
         break label$35
        }
        label$36 : {
         label$37 : {
          if ($812($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
           break label$37
          }
          if ((($809($0_1 | 0) | 0) & 255 | 0 | 0) == (HEAPU8[($11_1 + 119 | 0) >> 0] | 0 | 0)) {
           break label$36
          }
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$4;
        }
        label$38 : while (1) {
         $811($0_1 | 0) | 0;
         if ((HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) < (1 | 0)) {
          break label$35
         }
         label$39 : {
          label$40 : {
           if ($812($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
            break label$40
           }
           if ($810($7_1 | 0, 2048 | 0, $809($0_1 | 0) | 0 | 0) | 0) {
            break label$39
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break label$4;
         }
         label$41 : {
          if ((HEAP32[$9_1 >> 2] | 0 | 0) != (HEAP32[($11_1 + 548 | 0) >> 2] | 0 | 0)) {
           break label$41
          }
          $1189($8_1 | 0, $9_1 | 0, $11_1 + 548 | 0 | 0);
         }
         $4_1 = $809($0_1 | 0) | 0;
         $2_1 = HEAP32[$9_1 >> 2] | 0;
         HEAP32[$9_1 >> 2] = $2_1 + 1 | 0;
         HEAP8[$2_1 >> 0] = $4_1;
         HEAP32[($11_1 + 36 | 0) >> 2] = (HEAP32[($11_1 + 36 | 0) >> 2] | 0) + -1 | 0;
         continue label$38;
        };
       }
       $2_1 = $10_1;
       if ((HEAP32[$9_1 >> 2] | 0 | 0) != ($1179($8_1 | 0) | 0 | 0)) {
        break label$2
       }
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
       $0_1 = 0;
       break label$4;
      }
      label$42 : {
       if (!$10_1) {
        break label$42
       }
       $4_1 = 1;
       label$43 : while (1) {
        if ($4_1 >>> 0 >= ($44($10_1 | 0) | 0) >>> 0) {
         break label$42
        }
        label$44 : {
         label$45 : {
          if ($812($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
           break label$45
          }
          if ((($809($0_1 | 0) | 0) & 255 | 0 | 0) == (HEAPU8[($52($10_1 | 0, $4_1 | 0) | 0) >> 0] | 0 | 0)) {
           break label$44
          }
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$4;
        }
        $811($0_1 | 0) | 0;
        $4_1 = $4_1 + 1 | 0;
        continue label$43;
       };
      }
      $0_1 = 1;
      if (($1182($12_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      $0_1 = 0;
      HEAP32[($11_1 + 24 | 0) >> 2] = 0;
      $929($13_1 | 0, $1182($12_1 | 0) | 0 | 0, HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0, $11_1 + 24 | 0 | 0);
      label$46 : {
       if (!(HEAP32[($11_1 + 24 | 0) >> 2] | 0)) {
        break label$46
       }
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
       break label$4;
      }
      $0_1 = 1;
     }
     $1835($17_1 | 0) | 0;
     $1835($16_1 | 0) | 0;
     $1835($15_1 | 0) | 0;
     $1835($14_1 | 0) | 0;
     $1835($13_1 | 0) | 0;
     $1191($12_1 | 0) | 0;
     global$0 = $11_1 + 560 | 0;
     return $0_1 | 0;
    }
    $2_1 = $10_1;
   }
   $1_1 = $1_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $1179($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1192($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1180($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 10 | 0 | 0;
 }
 
 function $1181($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1196($0_1 | 0, $3_1 + 12 | 0 | 0, $861($2_1 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1182($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1197($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1183($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $0_1 = $1198($1_1 | 0) | 0;
    $1199($10_1 | 0, $0_1 | 0);
    $11_1 = $2_1;
    $12_1 = HEAP32[$10_1 >> 2] | 0;
    HEAP8[$11_1 >> 0] = $12_1;
    HEAP8[($11_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
    HEAP8[($11_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
    HEAP8[($11_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
    $1200($10_1 | 0, $0_1 | 0);
    $46($8_1 | 0, $10_1 | 0) | 0;
    $1835($10_1 | 0) | 0;
    $1201($10_1 | 0, $0_1 | 0);
    $46($7_1 | 0, $10_1 | 0) | 0;
    $1835($10_1 | 0) | 0;
    HEAP8[$3_1 >> 0] = $1202($0_1 | 0) | 0;
    HEAP8[$4_1 >> 0] = $1203($0_1 | 0) | 0;
    $1204($10_1 | 0, $0_1 | 0);
    $46($5_1 | 0, $10_1 | 0) | 0;
    $1835($10_1 | 0) | 0;
    $1205($10_1 | 0, $0_1 | 0);
    $46($6_1 | 0, $10_1 | 0) | 0;
    $1835($10_1 | 0) | 0;
    $0_1 = $1206($0_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $1207($1_1 | 0) | 0;
   $1208($10_1 | 0, $0_1 | 0);
   $13_1 = $2_1;
   $14_1 = HEAP32[$10_1 >> 2] | 0;
   HEAP8[$13_1 >> 0] = $14_1;
   HEAP8[($13_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
   HEAP8[($13_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
   HEAP8[($13_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
   $1209($10_1 | 0, $0_1 | 0);
   $46($8_1 | 0, $10_1 | 0) | 0;
   $1835($10_1 | 0) | 0;
   $1210($10_1 | 0, $0_1 | 0);
   $46($7_1 | 0, $10_1 | 0) | 0;
   $1835($10_1 | 0) | 0;
   HEAP8[$3_1 >> 0] = $1211($0_1 | 0) | 0;
   HEAP8[$4_1 >> 0] = $1212($0_1 | 0) | 0;
   $1213($10_1 | 0, $0_1 | 0);
   $46($5_1 | 0, $10_1 | 0) | 0;
   $1835($10_1 | 0) | 0;
   $1214($10_1 | 0, $0_1 | 0);
   $46($6_1 | 0, $10_1 | 0) | 0;
   $1835($10_1 | 0) | 0;
   $0_1 = $1215($0_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $0_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1184($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1216($0_1 | 0, (($819(HEAP32[$1_1 >> 2] | 0 | 0) | 0) << 24 | 0) >> 24 | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1185($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[$0_1 >> 0] | 0 | 0;
 }
 
 function $1186($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1217($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1187($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $80($0_1 | 0, 0 - $1_1 | 0 | 0) | 0 | 0;
 }
 
 function $1188($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1218($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1189($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($1219($0_1 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($1179($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($57() | 0) >>> 1 | 0) >>> 0) {
     break label$2
    }
    $5_1 = $5_1 << 1 | 0;
    break label$1;
   }
   $5_1 = $57() | 0;
  }
  $5_1 = $5_1 ? $5_1 : 1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $1179($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($4_1 | 0) != (68 | 0)) {
     break label$4
    }
    $8_1 = 0;
    break label$3;
   }
   $8_1 = $1179($0_1 | 0) | 0;
  }
  label$5 : {
   $8_1 = $1925($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break label$5
   }
   label$6 : {
    if (($4_1 | 0) == (68 | 0)) {
     break label$6
    }
    $1220($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 67;
   $4_1 = $1023($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $1221($0_1 | 0, $4_1 | 0) | 0;
   $1027($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($1179($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($1179($0_1 | 0) | 0) + $5_1 | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1805();
  abort();
 }
 
 function $1190($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($1222($0_1 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($1182($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($57() | 0) >>> 1 | 0) >>> 0) {
     break label$2
    }
    $5_1 = $5_1 << 1 | 0;
    break label$1;
   }
   $5_1 = $57() | 0;
  }
  $5_1 = $5_1 ? $5_1 : 4;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $1182($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($4_1 | 0) != (68 | 0)) {
     break label$4
    }
    $8_1 = 0;
    break label$3;
   }
   $8_1 = $1182($0_1 | 0) | 0;
  }
  label$5 : {
   $8_1 = $1925($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break label$5
   }
   label$6 : {
    if (($4_1 | 0) == (68 | 0)) {
     break label$6
    }
    $1223($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 67;
   $4_1 = $1181($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $1224($0_1 | 0, $4_1 | 0) | 0;
   $1191($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($1182($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($1182($0_1 | 0) | 0) + ($5_1 & -4 | 0) | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1805();
  abort();
 }
 
 function $1191($0_1) {
  $0_1 = $0_1 | 0;
  $1226($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $1192($0_1) {
  $0_1 = $0_1 | 0;
  return $1787($0_1 | 0) | 0 | 0;
 }
 
 function $1193($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 160 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 144 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 152 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = 68;
  $8_1 = $1023($7_1 + 24 | 0 | 0, $7_1 + 32 | 0 | 0, $7_1 + 20 | 0 | 0) | 0;
  $807($7_1 + 16 | 0 | 0, $4_1 | 0);
  $1_1 = $522($7_1 + 16 | 0 | 0) | 0;
  HEAP8[($7_1 + 15 | 0) >> 0] = 0;
  label$1 : {
   if (!($1178($7_1 + 152 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 16 | 0 | 0, $509($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 15 | 0 | 0, $1_1 | 0, $8_1 | 0, $7_1 + 20 | 0 | 0, $7_1 + 132 | 0 | 0) | 0)) {
    break label$1
   }
   $54($6_1 | 0);
   label$2 : {
    if (!(HEAPU8[($7_1 + 15 | 0) >> 0] | 0)) {
     break label$2
    }
    $1845($6_1 | 0, $523($1_1 | 0, 45 | 0) | 0 | 0);
   }
   $1_1 = $523($1_1 | 0, 48 | 0) | 0;
   $4_1 = $1179($8_1 | 0) | 0;
   $9_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
   $2_1 = $9_1 + -1 | 0;
   $3_1 = $4_1 >>> 0 > $2_1 >>> 0 ? $4_1 : $2_1;
   $1_1 = $1_1 & 255 | 0;
   label$3 : while (1) {
    label$4 : {
     label$5 : {
      if ($4_1 >>> 0 >= $2_1 >>> 0) {
       break label$5
      }
      if ((HEAPU8[$4_1 >> 0] | 0 | 0) == ($1_1 | 0)) {
       break label$4
      }
      $3_1 = $4_1;
     }
     $1194($6_1 | 0, $3_1 | 0, $9_1 | 0) | 0;
     break label$1;
    }
    $4_1 = $4_1 + 1 | 0;
    continue label$3;
   };
  }
  label$6 : {
   if (!($812($7_1 + 152 | 0 | 0, $7_1 + 144 | 0 | 0) | 0)) {
    break label$6
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $4_1 = HEAP32[($7_1 + 152 | 0) >> 2] | 0;
  $911($7_1 + 16 | 0 | 0) | 0;
  $1027($8_1 | 0) | 0;
  global$0 = $7_1 + 160 | 0;
  return $4_1 | 0;
 }
 
 function $1194($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1195($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1195($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = $44($0_1 | 0) | 0;
  $5_1 = $496($0_1 | 0) | 0;
  label$1 : {
   $6_1 = $526($1_1 | 0, $2_1 | 0) | 0;
   if (!$6_1) {
    break label$1
   }
   label$2 : {
    if (!($1788($129($1_1 | 0) | 0 | 0, $1016($0_1 | 0) | 0 | 0, ($1016($0_1 | 0) | 0) + ($44($0_1 | 0) | 0) | 0 | 0) | 0)) {
     break label$2
    }
    $1_1 = $524($3_1 + 16 | 0 | 0, $1_1 | 0, $2_1 | 0, $407($0_1 | 0) | 0 | 0) | 0;
    $1844($0_1 | 0, $26($1_1 | 0) | 0 | 0, $44($1_1 | 0) | 0 | 0) | 0;
    $1835($1_1 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (($5_1 - $4_1 | 0) >>> 0 >= $6_1 >>> 0) {
     break label$3
    }
    $1842($0_1 | 0, $5_1 | 0, ($6_1 + $4_1 | 0) - $5_1 | 0 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
   }
   $5_1 = ($73($0_1 | 0) | 0) + $4_1 | 0;
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $120($5_1 | 0, $1_1 | 0);
     $1_1 = $1_1 + 1 | 0;
     $5_1 = $5_1 + 1 | 0;
     continue label$5;
    };
   }
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $120($5_1 | 0, $3_1 + 15 | 0 | 0);
   $1789($0_1 | 0, $6_1 + $4_1 | 0 | 0);
  }
  global$0 = $3_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $1196($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1791($0_1 | 0, $1790($1_1 | 0) | 0 | 0) | 0;
  $868($0_1 + 4 | 0 | 0, $867($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1197($0_1) {
  $0_1 = $0_1 | 0;
  return $269($0_1 | 0) | 0 | 0;
 }
 
 function $1198($0_1) {
  $0_1 = $0_1 | 0;
  return $916($0_1 | 0, 19388 | 0) | 0 | 0;
 }
 
 function $1199($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1200($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1201($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1202($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1203($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1204($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1205($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1206($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1207($0_1) {
  $0_1 = $0_1 | 0;
  return $916($0_1 | 0, 19380 | 0) | 0 | 0;
 }
 
 function $1208($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1209($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1210($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1211($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1212($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1213($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1214($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1215($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1216($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP8[$0_1 >> 0] = $1_1;
  return $0_1 | 0;
 }
 
 function $1217($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($289($0_1 | 0) | 0 | 0) == ($82($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $1218($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    $2_1 = $70($3_1 + 24 | 0 | 0, $3_1 + 16 | 0 | 0) | 0;
    if (!$2_1) {
     break label$1
    }
    if (!($1794($3_1 | 0, $71($3_1 + 24 | 0 | 0) | 0 | 0, $71($3_1 + 8 | 0 | 0) | 0 | 0) | 0)) {
     break label$1
    }
    $72($3_1 + 24 | 0 | 0) | 0;
    $72($3_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 32 | 0;
  return $2_1 ^ 1 | 0 | 0;
 }
 
 function $1219($0_1) {
  $0_1 = $0_1 | 0;
  return $1030($0_1 | 0) | 0 | 0;
 }
 
 function $1220($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1029($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1029($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1221($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1025($0_1 | 0, $1220($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($867($1219($1_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($1030($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1222($0_1) {
  $0_1 = $0_1 | 0;
  return $1793($0_1 | 0) | 0 | 0;
 }
 
 function $1223($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1792($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1792($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1224($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1226($0_1 | 0, $1223($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($867($1222($1_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($1793($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1225($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1565($0_1 | 0, $1_1 | 0);
 }
 
 function $1226($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1792($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1792($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1793($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $1227($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0;
  $7_1 = global$0 - 624 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 608 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 616 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = 68;
  $1_1 = $1052($7_1 + 200 | 0 | 0, $7_1 + 208 | 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $807($7_1 + 192 | 0 | 0, $4_1 | 0);
  $8_1 = $821($7_1 + 192 | 0 | 0) | 0;
  HEAP8[($7_1 + 191 | 0) >> 0] = 0;
  label$1 : {
   if (!($1228($7_1 + 616 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 192 | 0 | 0, $509($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 191 | 0 | 0, $8_1 | 0, $1_1 | 0, $7_1 + 196 | 0 | 0, $7_1 + 608 | 0 | 0) | 0)) {
    break label$1
   }
   $11_1 = 0;
   $12_1 = HEAPU8[($11_1 + 10475 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 10476 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 10477 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 10478 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[($7_1 + 183 | 0) >> 0] = $12_1;
   HEAP8[($7_1 + 184 | 0) >> 0] = $12_1 >>> 8 | 0;
   HEAP8[($7_1 + 185 | 0) >> 0] = $12_1 >>> 16 | 0;
   HEAP8[($7_1 + 186 | 0) >> 0] = $12_1 >>> 24 | 0;
   $10_1 = 0;
   i64toi32_i32$1 = HEAPU8[($10_1 + 10472 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 10473 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 10474 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 10475 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 176 | 0) >> 2] = HEAPU8[($10_1 + 10468 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 10469 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 10470 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 10471 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 180 | 0) >> 2] = i64toi32_i32$1;
   $997($8_1 | 0, $7_1 + 176 | 0 | 0, $7_1 + 186 | 0 | 0, $7_1 + 128 | 0 | 0) | 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = 67;
   $8_1 = $1023($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
   $2_1 = $7_1 + 16 | 0;
   label$2 : {
    label$3 : {
     if (((HEAP32[($7_1 + 196 | 0) >> 2] | 0) - ($1229($1_1 | 0) | 0) | 0 | 0) < (393 | 0)) {
      break label$3
     }
     $1025($8_1 | 0, $1923((((HEAP32[($7_1 + 196 | 0) >> 2] | 0) - ($1229($1_1 | 0) | 0) | 0) >> 2 | 0) + 2 | 0 | 0) | 0 | 0);
     if (!($1179($8_1 | 0) | 0)) {
      break label$2
     }
     $2_1 = $1179($8_1 | 0) | 0;
    }
    label$4 : {
     if (!(HEAPU8[($7_1 + 191 | 0) >> 0] | 0)) {
      break label$4
     }
     HEAP8[$2_1 >> 0] = 45;
     $2_1 = $2_1 + 1 | 0;
    }
    $4_1 = $1229($1_1 | 0) | 0;
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if ($4_1 >>> 0 < (HEAP32[($7_1 + 196 | 0) >> 2] | 0) >>> 0) {
        break label$7
       }
       HEAP8[$2_1 >> 0] = 0;
       HEAP32[$7_1 >> 2] = $6_1;
       if (($736($7_1 + 16 | 0 | 0, 10464 | 0, $7_1 | 0) | 0 | 0) != (1 | 0)) {
        break label$5
       }
       $1027($8_1 | 0) | 0;
       break label$1;
      }
      HEAP8[$2_1 >> 0] = HEAPU8[(($7_1 + 176 | 0) + ((($1007($7_1 + 128 | 0 | 0, $1230($7_1 + 128 | 0 | 0) | 0 | 0, $4_1 | 0) | 0) - ($7_1 + 128 | 0) | 0) >> 2 | 0) | 0) >> 0] | 0;
      $2_1 = $2_1 + 1 | 0;
      $4_1 = $4_1 + 4 | 0;
      continue label$6;
     };
    }
    $1132($7_1 | 0);
    abort();
   }
   $1805();
   abort();
  }
  label$8 : {
   if (!($826($7_1 + 616 | 0 | 0, $7_1 + 608 | 0 | 0) | 0)) {
    break label$8
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $4_1 = HEAP32[($7_1 + 616 | 0) >> 2] | 0;
  $911($7_1 + 192 | 0 | 0) | 0;
  $1055($1_1 | 0) | 0;
  global$0 = $7_1 + 624 | 0;
  return $4_1 | 0;
 }
 
 function $1228($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  var $11_1 = 0, $15_1 = 0, $16_1 = 0, $14_1 = 0, $12_1 = 0, $17_1 = 0, $13_1 = 0, $18_1 = 0, $19_1 = 0;
  $11_1 = global$0 - 560 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 548 | 0) >> 2] = $10_1;
  HEAP32[($11_1 + 552 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 96 | 0) >> 2] = 68;
  $12_1 = $1181($11_1 + 136 | 0 | 0, $11_1 + 144 | 0 | 0, $11_1 + 96 | 0 | 0) | 0;
  $1_1 = $1182($12_1 | 0) | 0;
  HEAP32[($11_1 + 132 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 128 | 0) >> 2] = $1_1 + 400 | 0;
  $13_1 = $41($11_1 + 96 | 0 | 0) | 0;
  $14_1 = $1160($11_1 + 80 | 0 | 0) | 0;
  $15_1 = $1160($11_1 + 64 | 0 | 0) | 0;
  $16_1 = $1160($11_1 + 48 | 0 | 0) | 0;
  $17_1 = $1160($11_1 + 32 | 0 | 0) | 0;
  $1231($2_1 | 0, $3_1 | 0, $11_1 + 120 | 0 | 0, $11_1 + 116 | 0 | 0, $11_1 + 112 | 0 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $16_1 | 0, $11_1 + 28 | 0 | 0);
  HEAP32[$9_1 >> 2] = $1229($8_1 | 0) | 0;
  $18_1 = $4_1 & 512 | 0;
  $19_1 = $18_1 >>> 9 | 0;
  $1_1 = 0;
  $2_1 = 0;
  label$1 : while (1) {
   $10_1 = $2_1;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($1_1 | 0) == (4 | 0)) {
        break label$5
       }
       if (!($822($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
        break label$5
       }
       $4_1 = 0;
       $2_1 = $10_1;
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            switch (HEAP8[(($11_1 + 120 | 0) + $1_1 | 0) >> 0] | 0 | 0) {
            case 1:
             if (($1_1 | 0) == (3 | 0)) {
              break label$3
             }
             label$12 : {
              if (!($824($7_1 | 0, 8192 | 0, $823($0_1 | 0) | 0 | 0) | 0)) {
               break label$12
              }
              $1232($11_1 + 16 | 0 | 0, $0_1 | 0, 0 | 0);
              $1856($17_1 | 0, $1233($11_1 + 16 | 0 | 0) | 0 | 0);
              break label$9;
             }
             HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
             $0_1 = 0;
             break label$4;
            case 0:
             break label$10;
            case 4:
             break label$6;
            case 2:
             break label$7;
            case 3:
             break label$8;
            default:
             break label$2;
            };
           }
           if (($1_1 | 0) == (3 | 0)) {
            break label$3
           }
          }
          label$13 : while (1) {
           if (!($822($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
            break label$3
           }
           if (!($824($7_1 | 0, 8192 | 0, $823($0_1 | 0) | 0 | 0) | 0)) {
            break label$3
           }
           $1232($11_1 + 16 | 0 | 0, $0_1 | 0, 0 | 0);
           $1856($17_1 | 0, $1233($11_1 + 16 | 0 | 0) | 0 | 0);
           continue label$13;
          };
         }
         if (($970($15_1 | 0) | 0 | 0) == (0 - ($970($16_1 | 0) | 0) | 0 | 0)) {
          break label$3
         }
         label$14 : {
          label$15 : {
           if (!($970($15_1 | 0) | 0)) {
            break label$15
           }
           if ($970($16_1 | 0) | 0) {
            break label$14
           }
          }
          $4_1 = $970($15_1 | 0) | 0;
          $2_1 = $823($0_1 | 0) | 0;
          label$16 : {
           if (!$4_1) {
            break label$16
           }
           label$17 : {
            if (($2_1 | 0) != (HEAP32[($1234($15_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
             break label$17
            }
            $825($0_1 | 0) | 0;
            $2_1 = ($970($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $10_1;
            break label$2;
           }
           HEAP8[$6_1 >> 0] = 1;
           break label$3;
          }
          if (($2_1 | 0) != (HEAP32[($1234($16_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
           break label$3
          }
          $825($0_1 | 0) | 0;
          HEAP8[$6_1 >> 0] = 1;
          $2_1 = ($970($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $10_1;
          break label$2;
         }
         label$18 : {
          if (($823($0_1 | 0) | 0 | 0) != (HEAP32[($1234($15_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
           break label$18
          }
          $825($0_1 | 0) | 0;
          $2_1 = ($970($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $10_1;
          break label$2;
         }
         label$19 : {
          if (($823($0_1 | 0) | 0 | 0) != (HEAP32[($1234($16_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
           break label$19
          }
          $825($0_1 | 0) | 0;
          HEAP8[$6_1 >> 0] = 1;
          $2_1 = ($970($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $10_1;
          break label$2;
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$4;
        }
        label$20 : {
         if ($1_1 >>> 0 < 2 >>> 0) {
          break label$20
         }
         if ($10_1) {
          break label$20
         }
         $2_1 = 0;
         if ((($1_1 | 0) == (2 | 0) & (HEAPU8[($11_1 + 123 | 0) >> 0] | 0 | 0) != (0 | 0) | 0 | $19_1 | 0 | 0) != (1 | 0)) {
          break label$2
         }
        }
        HEAP32[($11_1 + 8 | 0) >> 2] = $1034($14_1 | 0) | 0;
        $4_1 = $1235($11_1 + 16 | 0 | 0, $11_1 + 8 | 0 | 0, 0 | 0) | 0;
        label$21 : {
         if (!$1_1) {
          break label$21
         }
         if ((HEAPU8[(($1_1 + ($11_1 + 120 | 0) | 0) + -1 | 0) >> 0] | 0) >>> 0 > 1 >>> 0) {
          break label$21
         }
         label$22 : {
          label$23 : while (1) {
           HEAP32[($11_1 + 8 | 0) >> 2] = $1035($14_1 | 0) | 0;
           if (!($1236($4_1 | 0, $11_1 + 8 | 0 | 0) | 0)) {
            break label$22
           }
           if (!($824($7_1 | 0, 8192 | 0, HEAP32[($1237($4_1 | 0) | 0) >> 2] | 0 | 0) | 0)) {
            break label$22
           }
           $1238($4_1 | 0) | 0;
           continue label$23;
          };
         }
         HEAP32[($11_1 + 8 | 0) >> 2] = $1034($14_1 | 0) | 0;
         label$24 : {
          $4_1 = $1239($4_1 | 0, $11_1 + 8 | 0 | 0) | 0;
          if ($4_1 >>> 0 > ($970($17_1 | 0) | 0) >>> 0) {
           break label$24
          }
          HEAP32[($11_1 + 8 | 0) >> 2] = $1035($17_1 | 0) | 0;
          if ($1241($1240($11_1 + 8 | 0 | 0, $4_1 | 0) | 0 | 0, $1035($17_1 | 0) | 0 | 0, $1034($14_1 | 0) | 0 | 0) | 0) {
           break label$21
          }
         }
         HEAP32[$11_1 >> 2] = $1034($14_1 | 0) | 0;
         $1235($11_1 + 8 | 0 | 0, $11_1 | 0, 0 | 0) | 0;
         HEAP32[($11_1 + 16 | 0) >> 2] = HEAP32[($11_1 + 8 | 0) >> 2] | 0;
        }
        HEAP32[($11_1 + 8 | 0) >> 2] = HEAP32[($11_1 + 16 | 0) >> 2] | 0;
        label$25 : {
         label$26 : while (1) {
          HEAP32[$11_1 >> 2] = $1035($14_1 | 0) | 0;
          if (!($1236($11_1 + 8 | 0 | 0, $11_1 | 0) | 0)) {
           break label$25
          }
          if (!($822($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
           break label$25
          }
          if (($823($0_1 | 0) | 0 | 0) != (HEAP32[($1237($11_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0)) {
           break label$25
          }
          $825($0_1 | 0) | 0;
          $1238($11_1 + 8 | 0 | 0) | 0;
          continue label$26;
         };
        }
        if (!$18_1) {
         break label$3
        }
        HEAP32[$11_1 >> 2] = $1035($14_1 | 0) | 0;
        if (!($1236($11_1 + 8 | 0 | 0, $11_1 | 0) | 0)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
        $0_1 = 0;
        break label$4;
       }
       label$27 : {
        label$28 : while (1) {
         if (!($822($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
          break label$27
         }
         label$29 : {
          label$30 : {
           $2_1 = $823($0_1 | 0) | 0;
           if (!($824($7_1 | 0, 2048 | 0, $2_1 | 0) | 0)) {
            break label$30
           }
           label$31 : {
            $3_1 = HEAP32[$9_1 >> 2] | 0;
            if (($3_1 | 0) != (HEAP32[($11_1 + 548 | 0) >> 2] | 0 | 0)) {
             break label$31
            }
            $1242($8_1 | 0, $9_1 | 0, $11_1 + 548 | 0 | 0);
            $3_1 = HEAP32[$9_1 >> 2] | 0;
           }
           HEAP32[$9_1 >> 2] = $3_1 + 4 | 0;
           HEAP32[$3_1 >> 2] = $2_1;
           $4_1 = $4_1 + 1 | 0;
           break label$29;
          }
          $3_1 = $44($13_1 | 0) | 0;
          if (!$4_1) {
           break label$27
          }
          if (!$3_1) {
           break label$27
          }
          if (($2_1 | 0) != (HEAP32[($11_1 + 112 | 0) >> 2] | 0 | 0)) {
           break label$27
          }
          label$32 : {
           $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
           if (($2_1 | 0) != (HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0)) {
            break label$32
           }
           $1190($12_1 | 0, $11_1 + 132 | 0 | 0, $11_1 + 128 | 0 | 0);
           $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
          }
          HEAP32[($11_1 + 132 | 0) >> 2] = $2_1 + 4 | 0;
          HEAP32[$2_1 >> 2] = $4_1;
          $4_1 = 0;
         }
         $825($0_1 | 0) | 0;
         continue label$28;
        };
       }
       $3_1 = $1182($12_1 | 0) | 0;
       label$33 : {
        if (!$4_1) {
         break label$33
        }
        $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
        if (($3_1 | 0) == ($2_1 | 0)) {
         break label$33
        }
        label$34 : {
         if (($2_1 | 0) != (HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0)) {
          break label$34
         }
         $1190($12_1 | 0, $11_1 + 132 | 0 | 0, $11_1 + 128 | 0 | 0);
         $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
        }
        HEAP32[($11_1 + 132 | 0) >> 2] = $2_1 + 4 | 0;
        HEAP32[$2_1 >> 2] = $4_1;
       }
       label$35 : {
        if ((HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0) < (1 | 0)) {
         break label$35
        }
        label$36 : {
         label$37 : {
          if ($826($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
           break label$37
          }
          if (($823($0_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0)) {
           break label$36
          }
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$4;
        }
        label$38 : while (1) {
         $825($0_1 | 0) | 0;
         if ((HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0) < (1 | 0)) {
          break label$35
         }
         label$39 : {
          label$40 : {
           if ($826($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
            break label$40
           }
           if ($824($7_1 | 0, 2048 | 0, $823($0_1 | 0) | 0 | 0) | 0) {
            break label$39
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break label$4;
         }
         label$41 : {
          if ((HEAP32[$9_1 >> 2] | 0 | 0) != (HEAP32[($11_1 + 548 | 0) >> 2] | 0 | 0)) {
           break label$41
          }
          $1242($8_1 | 0, $9_1 | 0, $11_1 + 548 | 0 | 0);
         }
         $4_1 = $823($0_1 | 0) | 0;
         $2_1 = HEAP32[$9_1 >> 2] | 0;
         HEAP32[$9_1 >> 2] = $2_1 + 4 | 0;
         HEAP32[$2_1 >> 2] = $4_1;
         HEAP32[($11_1 + 28 | 0) >> 2] = (HEAP32[($11_1 + 28 | 0) >> 2] | 0) + -1 | 0;
         continue label$38;
        };
       }
       $2_1 = $10_1;
       if ((HEAP32[$9_1 >> 2] | 0 | 0) != ($1229($8_1 | 0) | 0 | 0)) {
        break label$2
       }
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
       $0_1 = 0;
       break label$4;
      }
      label$42 : {
       if (!$10_1) {
        break label$42
       }
       $4_1 = 1;
       label$43 : while (1) {
        if ($4_1 >>> 0 >= ($970($10_1 | 0) | 0) >>> 0) {
         break label$42
        }
        label$44 : {
         label$45 : {
          if ($826($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
           break label$45
          }
          if (($823($0_1 | 0) | 0 | 0) == (HEAP32[($971($10_1 | 0, $4_1 | 0) | 0) >> 2] | 0 | 0)) {
           break label$44
          }
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$4;
        }
        $825($0_1 | 0) | 0;
        $4_1 = $4_1 + 1 | 0;
        continue label$43;
       };
      }
      $0_1 = 1;
      if (($1182($12_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      $0_1 = 0;
      HEAP32[($11_1 + 16 | 0) >> 2] = 0;
      $929($13_1 | 0, $1182($12_1 | 0) | 0 | 0, HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0, $11_1 + 16 | 0 | 0);
      label$46 : {
       if (!(HEAP32[($11_1 + 16 | 0) >> 2] | 0)) {
        break label$46
       }
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
       break label$4;
      }
      $0_1 = 1;
     }
     $1849($17_1 | 0) | 0;
     $1849($16_1 | 0) | 0;
     $1849($15_1 | 0) | 0;
     $1849($14_1 | 0) | 0;
     $1835($13_1 | 0) | 0;
     $1191($12_1 | 0) | 0;
     global$0 = $11_1 + 560 | 0;
     return $0_1 | 0;
    }
    $2_1 = $10_1;
   }
   $1_1 = $1_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $1229($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1243($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1230($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 40 | 0 | 0;
 }
 
 function $1231($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $0_1 = $1254($1_1 | 0) | 0;
    $1255($10_1 | 0, $0_1 | 0);
    $11_1 = $2_1;
    $12_1 = HEAP32[$10_1 >> 2] | 0;
    HEAP8[$11_1 >> 0] = $12_1;
    HEAP8[($11_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
    HEAP8[($11_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
    HEAP8[($11_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
    $1256($10_1 | 0, $0_1 | 0);
    $1257($8_1 | 0, $10_1 | 0) | 0;
    $1849($10_1 | 0) | 0;
    $1258($10_1 | 0, $0_1 | 0);
    $1257($7_1 | 0, $10_1 | 0) | 0;
    $1849($10_1 | 0) | 0;
    HEAP32[$3_1 >> 2] = $1259($0_1 | 0) | 0;
    HEAP32[$4_1 >> 2] = $1260($0_1 | 0) | 0;
    $1261($10_1 | 0, $0_1 | 0);
    $46($5_1 | 0, $10_1 | 0) | 0;
    $1835($10_1 | 0) | 0;
    $1262($10_1 | 0, $0_1 | 0);
    $1257($6_1 | 0, $10_1 | 0) | 0;
    $1849($10_1 | 0) | 0;
    $0_1 = $1263($0_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $1264($1_1 | 0) | 0;
   $1265($10_1 | 0, $0_1 | 0);
   $13_1 = $2_1;
   $14_1 = HEAP32[$10_1 >> 2] | 0;
   HEAP8[$13_1 >> 0] = $14_1;
   HEAP8[($13_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
   HEAP8[($13_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
   HEAP8[($13_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
   $1266($10_1 | 0, $0_1 | 0);
   $1257($8_1 | 0, $10_1 | 0) | 0;
   $1849($10_1 | 0) | 0;
   $1267($10_1 | 0, $0_1 | 0);
   $1257($7_1 | 0, $10_1 | 0) | 0;
   $1849($10_1 | 0) | 0;
   HEAP32[$3_1 >> 2] = $1268($0_1 | 0) | 0;
   HEAP32[$4_1 >> 2] = $1269($0_1 | 0) | 0;
   $1270($10_1 | 0, $0_1 | 0);
   $46($5_1 | 0, $10_1 | 0) | 0;
   $1835($10_1 | 0) | 0;
   $1271($10_1 | 0, $0_1 | 0);
   $1257($6_1 | 0, $10_1 | 0) | 0;
   $1849($10_1 | 0) | 0;
   $0_1 = $1272($0_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $0_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1232($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1273($0_1 | 0, $829(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1233($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1234($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1039($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $1235($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = $1274($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1236($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1275($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1237($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1238($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 4 | 0;
  return $0_1 | 0;
 }
 
 function $1239($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($1276($0_1 | 0) | 0) - ($1274($1_1 | 0) | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1240($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1278($0_1 | 0, 0 - $1_1 | 0 | 0) | 0 | 0;
 }
 
 function $1241($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1277($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1242($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($1279($0_1 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($1229($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($57() | 0) >>> 1 | 0) >>> 0) {
     break label$2
    }
    $5_1 = $5_1 << 1 | 0;
    break label$1;
   }
   $5_1 = $57() | 0;
  }
  $5_1 = $5_1 ? $5_1 : 4;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $1229($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($4_1 | 0) != (68 | 0)) {
     break label$4
    }
    $8_1 = 0;
    break label$3;
   }
   $8_1 = $1229($0_1 | 0) | 0;
  }
  label$5 : {
   $8_1 = $1925($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break label$5
   }
   label$6 : {
    if (($4_1 | 0) == (68 | 0)) {
     break label$6
    }
    $1280($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 67;
   $4_1 = $1052($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $1281($0_1 | 0, $4_1 | 0) | 0;
   $1055($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($1229($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($1229($0_1 | 0) | 0) + ($5_1 & -4 | 0) | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1805();
  abort();
 }
 
 function $1243($0_1) {
  $0_1 = $0_1 | 0;
  return $1795($0_1 | 0) | 0 | 0;
 }
 
 function $1244($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 448 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 432 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 440 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = 68;
  $8_1 = $1052($7_1 + 24 | 0 | 0, $7_1 + 32 | 0 | 0, $7_1 + 20 | 0 | 0) | 0;
  $807($7_1 + 16 | 0 | 0, $4_1 | 0);
  $1_1 = $821($7_1 + 16 | 0 | 0) | 0;
  HEAP8[($7_1 + 15 | 0) >> 0] = 0;
  label$1 : {
   if (!($1228($7_1 + 440 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 16 | 0 | 0, $509($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 15 | 0 | 0, $1_1 | 0, $8_1 | 0, $7_1 + 20 | 0 | 0, $7_1 + 432 | 0 | 0) | 0)) {
    break label$1
   }
   $1245($6_1 | 0);
   label$2 : {
    if (!(HEAPU8[($7_1 + 15 | 0) >> 0] | 0)) {
     break label$2
    }
    $1856($6_1 | 0, $866($1_1 | 0, 45 | 0) | 0 | 0);
   }
   $1_1 = $866($1_1 | 0, 48 | 0) | 0;
   $4_1 = $1229($8_1 | 0) | 0;
   $3_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
   $2_1 = $3_1 + -4 | 0;
   label$3 : {
    label$4 : while (1) {
     if ($4_1 >>> 0 >= $2_1 >>> 0) {
      break label$3
     }
     if ((HEAP32[$4_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
      break label$3
     }
     $4_1 = $4_1 + 4 | 0;
     continue label$4;
    };
   }
   $1246($6_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
  }
  label$5 : {
   if (!($826($7_1 + 440 | 0 | 0, $7_1 + 432 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $4_1 = HEAP32[($7_1 + 440 | 0) >> 2] | 0;
  $911($7_1 + 16 | 0 | 0) | 0;
  $1055($8_1 | 0) | 0;
  global$0 = $7_1 + 448 | 0;
  return $4_1 | 0;
 }
 
 function $1245($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $1247($0_1 | 0);
  label$1 : {
   label$2 : {
    if (!($1096($0_1 | 0) | 0)) {
     break label$2
    }
    $2_1 = $1248($0_1 | 0) | 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = 0;
    $1249($2_1 | 0, $1_1 + 12 | 0 | 0);
    $1250($0_1 | 0, 0 | 0);
    break label$1;
   }
   $2_1 = $1251($0_1 | 0) | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = 0;
   $1249($2_1 | 0, $1_1 + 8 | 0 | 0);
   $1252($0_1 | 0, 0 | 0);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1246($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1253($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1247($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1248($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1636($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1249($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
 }
 
 function $1250($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($1636($0_1 | 0) | 0) + 4 | 0) >> 2] = $1_1;
 }
 
 function $1251($0_1) {
  $0_1 = $0_1 | 0;
  return $1739($1636($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1252($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[(($1636($0_1 | 0) | 0) + 11 | 0) >> 0] = $1_1;
 }
 
 function $1253($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $970($0_1 | 0) | 0;
  $5_1 = $1602($0_1 | 0) | 0;
  label$1 : {
   $6_1 = $1601($1_1 | 0, $2_1 | 0) | 0;
   if (!$6_1) {
    break label$1
   }
   label$2 : {
    if (!($1796($1746($1_1 | 0) | 0 | 0, $1047($0_1 | 0) | 0 | 0, ($1047($0_1 | 0) | 0) + (($970($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0)) {
     break label$2
    }
    $1_1 = $1797($3_1 | 0, $1_1 | 0, $2_1 | 0, $1634($0_1 | 0) | 0 | 0) | 0;
    $1855($0_1 | 0, $1093($1_1 | 0) | 0 | 0, $970($1_1 | 0) | 0 | 0) | 0;
    $1849($1_1 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (($5_1 - $4_1 | 0) >>> 0 >= $6_1 >>> 0) {
     break label$3
    }
    $1853($0_1 | 0, $5_1 | 0, ($6_1 + $4_1 | 0) - $5_1 | 0 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
   }
   $5_1 = ($1039($0_1 | 0) | 0) + ($4_1 << 2 | 0) | 0;
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $1249($5_1 | 0, $1_1 | 0);
     $1_1 = $1_1 + 4 | 0;
     $5_1 = $5_1 + 4 | 0;
     continue label$5;
    };
   }
   HEAP32[$3_1 >> 2] = 0;
   $1249($5_1 | 0, $3_1 | 0);
   $1604($0_1 | 0, $6_1 + $4_1 | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1254($0_1) {
  $0_1 = $0_1 | 0;
  return $916($0_1 | 0, 19404 | 0) | 0 | 0;
 }
 
 function $1255($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1256($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1257($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1282($0_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1258($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1259($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1260($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1261($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1262($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1263($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1264($0_1) {
  $0_1 = $0_1 | 0;
  return $916($0_1 | 0, 19396 | 0) | 0 | 0;
 }
 
 function $1265($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1266($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1267($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1268($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1269($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1270($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1271($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1272($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1273($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1274($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1275($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1276($0_1 | 0) | 0 | 0) == ($1274($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $1276($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1277($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    $2_1 = $1036($3_1 + 24 | 0 | 0, $3_1 + 16 | 0 | 0) | 0;
    if (!$2_1) {
     break label$1
    }
    if (!($1802($3_1 | 0, $1037($3_1 + 24 | 0 | 0) | 0 | 0, $1037($3_1 + 8 | 0 | 0) | 0 | 0) | 0)) {
     break label$1
    }
    $1038($3_1 + 24 | 0 | 0) | 0;
    $1038($3_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 32 | 0;
  return $2_1 ^ 1 | 0 | 0;
 }
 
 function $1278($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1630($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1279($0_1) {
  $0_1 = $0_1 | 0;
  return $1058($0_1 | 0) | 0 | 0;
 }
 
 function $1280($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1057($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1057($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1281($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1053($0_1 | 0, $1280($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($867($1279($1_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($1058($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1282($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (!($1096($0_1 | 0) | 0)) {
    break label$1
   }
   $1632($1634($0_1 | 0) | 0 | 0, $1248($0_1 | 0) | 0 | 0, $1637($0_1 | 0) | 0 | 0);
  }
  $1756($0_1 | 0, $1_1 | 0);
  $3_1 = $1636($1_1 | 0) | 0;
  $0_1 = $1636($0_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1252($1_1 | 0, 0 | 0);
  $0_1 = $1251($1_1 | 0) | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $1249($0_1 | 0, $2_1 + 12 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1283($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var $7_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, $12_1 = 0, $14_1 = 0, $16_1 = 0, $18_1 = 0, $11_1 = 0, $9_1 = 0, $15_1 = 0, $17_1 = 0, $10_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 464 | 0;
  global$0 = $7_1;
  i64toi32_i32$0 = $5$hi;
  HEAP32[($7_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[($7_1 + 24 | 0) >> 2] = $6_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($7_1 + 348 | 0) >> 2] = $7_1 + 352 | 0;
  $8_1 = $692($7_1 + 352 | 0 | 0, 100 | 0, 10479 | 0, $7_1 + 16 | 0 | 0) | 0;
  HEAP32[($7_1 + 240 | 0) >> 2] = 67;
  $9_1 = 0;
  $10_1 = $1023($7_1 + 232 | 0 | 0, 0 | 0, $7_1 + 240 | 0 | 0) | 0;
  HEAP32[($7_1 + 240 | 0) >> 2] = 67;
  $11_1 = $1023($7_1 + 224 | 0 | 0, 0 | 0, $7_1 + 240 | 0 | 0) | 0;
  $12_1 = $7_1 + 240 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 100 >>> 0) {
     break label$2
    }
    $8_1 = $958() | 0;
    i64toi32_i32$0 = $5$hi;
    HEAP32[$7_1 >> 2] = $5_1;
    HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    HEAP32[($7_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $8_1 = $1024($7_1 + 348 | 0 | 0, $8_1 | 0, 10479 | 0, $7_1 | 0) | 0;
    $12_1 = HEAP32[($7_1 + 348 | 0) >> 2] | 0;
    if (!$12_1) {
     break label$1
    }
    $1025($10_1 | 0, $12_1 | 0);
    $1025($11_1 | 0, $1923($8_1 | 0) | 0 | 0);
    if ($1284($11_1 | 0, 0 | 0) | 0) {
     break label$1
    }
    $12_1 = $1179($11_1 | 0) | 0;
   }
   $807($7_1 + 216 | 0 | 0, $3_1 | 0);
   $13_1 = $522($7_1 + 216 | 0 | 0) | 0;
   $14_1 = HEAP32[($7_1 + 348 | 0) >> 2] | 0;
   $957($13_1 | 0, $14_1 | 0, $14_1 + $8_1 | 0 | 0, $12_1 | 0) | 0;
   label$3 : {
    if (!$8_1) {
     break label$3
    }
    $9_1 = (HEAPU8[(HEAP32[($7_1 + 348 | 0) >> 2] | 0) >> 0] | 0 | 0) == (45 | 0);
   }
   $15_1 = $41($7_1 + 192 | 0 | 0) | 0;
   $14_1 = $41($7_1 + 176 | 0 | 0) | 0;
   $16_1 = $41($7_1 + 160 | 0 | 0) | 0;
   $1285($2_1 | 0, $9_1 | 0, $7_1 + 216 | 0 | 0, $7_1 + 208 | 0 | 0, $7_1 + 207 | 0 | 0, $7_1 + 206 | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, $7_1 + 156 | 0 | 0);
   HEAP32[($7_1 + 48 | 0) >> 2] = 67;
   $17_1 = $1023($7_1 + 40 | 0 | 0, 0 | 0, $7_1 + 48 | 0 | 0) | 0;
   label$4 : {
    label$5 : {
     $2_1 = HEAP32[($7_1 + 156 | 0) >> 2] | 0;
     if (($8_1 | 0) <= ($2_1 | 0)) {
      break label$5
     }
     $18_1 = (($8_1 - $2_1 | 0) << 1 | 0 | 1 | 0) + ($44($16_1 | 0) | 0) | 0;
     break label$4;
    }
    $18_1 = ($44($16_1 | 0) | 0) + 2 | 0;
   }
   $2_1 = $7_1 + 48 | 0;
   label$6 : {
    $18_1 = ($18_1 + ($44($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 156 | 0) >> 2] | 0) | 0;
    if ($18_1 >>> 0 < 101 >>> 0) {
     break label$6
    }
    $1025($17_1 | 0, $1923($18_1 | 0) | 0 | 0);
    $2_1 = $1179($17_1 | 0) | 0;
    if (!$2_1) {
     break label$1
    }
   }
   $1286($2_1 | 0, $7_1 + 36 | 0 | 0, $7_1 + 32 | 0 | 0, $509($3_1 | 0) | 0 | 0, $12_1 | 0, $12_1 + $8_1 | 0 | 0, $13_1 | 0, $9_1 | 0, $7_1 + 208 | 0 | 0, HEAP8[($7_1 + 207 | 0) >> 0] | 0 | 0, HEAP8[($7_1 + 206 | 0) >> 0] | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, HEAP32[($7_1 + 156 | 0) >> 2] | 0 | 0);
   $8_1 = $511($1_1 | 0, $2_1 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   $1027($17_1 | 0) | 0;
   $1835($16_1 | 0) | 0;
   $1835($14_1 | 0) | 0;
   $1835($15_1 | 0) | 0;
   $911($7_1 + 216 | 0 | 0) | 0;
   $1027($11_1 | 0) | 0;
   $1027($10_1 | 0) | 0;
   global$0 = $7_1 + 464 | 0;
   return $8_1 | 0;
  }
  $1805();
  abort();
 }
 
 function $1284($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1287($0_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1285($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $0_1 = $1198($2_1 | 0) | 0;
    label$3 : {
     label$4 : {
      if (!$1_1) {
       break label$4
      }
      $1199($10_1 | 0, $0_1 | 0);
      $11_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP8[$3_1 >> 0] = $11_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = $11_1 >>> 8 | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = $11_1 >>> 16 | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = $11_1 >>> 24 | 0;
      $1200($10_1 | 0, $0_1 | 0);
      $46($8_1 | 0, $10_1 | 0) | 0;
      $1835($10_1 | 0) | 0;
      break label$3;
     }
     $1288($10_1 | 0, $0_1 | 0);
     $12_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = $12_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
     $1201($10_1 | 0, $0_1 | 0);
     $46($8_1 | 0, $10_1 | 0) | 0;
     $1835($10_1 | 0) | 0;
    }
    HEAP8[$4_1 >> 0] = $1202($0_1 | 0) | 0;
    HEAP8[$5_1 >> 0] = $1203($0_1 | 0) | 0;
    $1204($10_1 | 0, $0_1 | 0);
    $46($6_1 | 0, $10_1 | 0) | 0;
    $1835($10_1 | 0) | 0;
    $1205($10_1 | 0, $0_1 | 0);
    $46($7_1 | 0, $10_1 | 0) | 0;
    $1835($10_1 | 0) | 0;
    $0_1 = $1206($0_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $1207($2_1 | 0) | 0;
   label$5 : {
    label$6 : {
     if (!$1_1) {
      break label$6
     }
     $1208($10_1 | 0, $0_1 | 0);
     $13_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = $13_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $13_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $13_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $13_1 >>> 24 | 0;
     $1209($10_1 | 0, $0_1 | 0);
     $46($8_1 | 0, $10_1 | 0) | 0;
     $1835($10_1 | 0) | 0;
     break label$5;
    }
    $1289($10_1 | 0, $0_1 | 0);
    $14_1 = HEAP32[$10_1 >> 2] | 0;
    HEAP8[$3_1 >> 0] = $14_1;
    HEAP8[($3_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
    HEAP8[($3_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
    HEAP8[($3_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
    $1210($10_1 | 0, $0_1 | 0);
    $46($8_1 | 0, $10_1 | 0) | 0;
    $1835($10_1 | 0) | 0;
   }
   HEAP8[$4_1 >> 0] = $1211($0_1 | 0) | 0;
   HEAP8[$5_1 >> 0] = $1212($0_1 | 0) | 0;
   $1213($10_1 | 0, $0_1 | 0);
   $46($6_1 | 0, $10_1 | 0) | 0;
   $1835($10_1 | 0) | 0;
   $1214($10_1 | 0, $0_1 | 0);
   $46($7_1 | 0, $10_1 | 0) | 0;
   $1835($10_1 | 0) | 0;
   $0_1 = $1215($0_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $0_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1286($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  var $18_1 = 0, $19_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $15_1 = 0, $17_1 = 0, $16_1 = 0, $20_1 = 0;
  $15_1 = global$0 - 16 | 0;
  global$0 = $15_1;
  HEAP32[$2_1 >> 2] = $0_1;
  $16_1 = $3_1 & 512 | 0;
  $17_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($17_1 | 0) != (4 | 0)) {
     break label$2
    }
    label$3 : {
     if (($44($13_1 | 0) | 0) >>> 0 <= 1 >>> 0) {
      break label$3
     }
     HEAP32[($15_1 + 8 | 0) >> 2] = $83($13_1 | 0) | 0;
     HEAP32[$2_1 >> 2] = $1291($1290($15_1 + 8 | 0 | 0, 1 | 0) | 0 | 0, $84($13_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
    }
    label$4 : {
     $18_1 = $3_1 & 176 | 0;
     if (($18_1 | 0) == (16 | 0)) {
      break label$4
     }
     label$5 : {
      if (($18_1 | 0) != (32 | 0)) {
       break label$5
      }
      $0_1 = HEAP32[$2_1 >> 2] | 0;
     }
     HEAP32[$1_1 >> 2] = $0_1;
    }
    global$0 = $15_1 + 16 | 0;
    return;
   }
   label$6 : {
    label$7 : {
     switch (HEAP8[($8_1 + $17_1 | 0) >> 0] | 0 | 0) {
     case 0:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      break label$6;
     case 1:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      $18_1 = $523($6_1 | 0, 32 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
      HEAP8[$19_1 >> 0] = $18_1;
      break label$6;
     case 3:
      if ($53($13_1 | 0) | 0) {
       break label$6
      }
      $18_1 = HEAPU8[($52($13_1 | 0, 0 | 0) | 0) >> 0] | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
      HEAP8[$19_1 >> 0] = $18_1;
      break label$6;
     case 2:
      $18_1 = $53($12_1 | 0) | 0;
      if (!$16_1) {
       break label$6
      }
      if ($18_1) {
       break label$6
      }
      HEAP32[$2_1 >> 2] = $1291($83($12_1 | 0) | 0 | 0, $84($12_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
      break label$6;
     case 4:
      break label$7;
     default:
      break label$6;
     };
    }
    $20_1 = HEAP32[$2_1 >> 2] | 0;
    $4_1 = $7_1 ? $4_1 + 1 | 0 : $4_1;
    $18_1 = $4_1;
    label$12 : {
     label$13 : while (1) {
      if ($18_1 >>> 0 >= $5_1 >>> 0) {
       break label$12
      }
      if (!($810($6_1 | 0, 2048 | 0, HEAP8[$18_1 >> 0] | 0 | 0) | 0)) {
       break label$12
      }
      $18_1 = $18_1 + 1 | 0;
      continue label$13;
     };
    }
    $19_1 = $14_1;
    label$14 : {
     if (($19_1 | 0) < (1 | 0)) {
      break label$14
     }
     label$15 : {
      label$16 : while (1) {
       $21_1 = ($19_1 | 0) < (1 | 0);
       if ($21_1) {
        break label$15
       }
       if ($18_1 >>> 0 <= $4_1 >>> 0) {
        break label$15
       }
       $18_1 = $18_1 + -1 | 0;
       $21_1 = HEAPU8[$18_1 >> 0] | 0;
       $22_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $22_1 + 1 | 0;
       HEAP8[$22_1 >> 0] = $21_1;
       $19_1 = $19_1 + -1 | 0;
       continue label$16;
      };
     }
     label$17 : {
      label$18 : {
       if (!$21_1) {
        break label$18
       }
       $22_1 = 0;
       break label$17;
      }
      $22_1 = $523($6_1 | 0, 48 | 0) | 0;
     }
     label$19 : {
      label$20 : while (1) {
       $21_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
       if (($19_1 | 0) < (1 | 0)) {
        break label$19
       }
       HEAP8[$21_1 >> 0] = $22_1;
       $19_1 = $19_1 + -1 | 0;
       continue label$20;
      };
     }
     HEAP8[$21_1 >> 0] = $9_1;
    }
    label$21 : {
     label$22 : {
      if (($18_1 | 0) != ($4_1 | 0)) {
       break label$22
      }
      $18_1 = $523($6_1 | 0, 48 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
      HEAP8[$19_1 >> 0] = $18_1;
      break label$21;
     }
     label$23 : {
      label$24 : {
       if (!($53($11_1 | 0) | 0)) {
        break label$24
       }
       $23_1 = $599() | 0;
       break label$23;
      }
      $23_1 = HEAP8[($52($11_1 | 0, 0 | 0) | 0) >> 0] | 0;
     }
     $19_1 = 0;
     $24_1 = 0;
     label$25 : while (1) {
      if (($18_1 | 0) == ($4_1 | 0)) {
       break label$21
      }
      label$26 : {
       label$27 : {
        if (($19_1 | 0) == ($23_1 | 0)) {
         break label$27
        }
        $22_1 = $19_1;
        break label$26;
       }
       $21_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
       HEAP8[$21_1 >> 0] = $10_1;
       $22_1 = 0;
       label$28 : {
        $24_1 = $24_1 + 1 | 0;
        if ($24_1 >>> 0 < ($44($11_1 | 0) | 0) >>> 0) {
         break label$28
        }
        $23_1 = $19_1;
        break label$26;
       }
       label$29 : {
        if ((HEAPU8[($52($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0 | 0) != (($581() | 0) & 255 | 0 | 0)) {
         break label$29
        }
        $23_1 = $599() | 0;
        break label$26;
       }
       $23_1 = HEAP8[($52($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0;
      }
      $18_1 = $18_1 + -1 | 0;
      $19_1 = HEAPU8[$18_1 >> 0] | 0;
      $21_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
      HEAP8[$21_1 >> 0] = $19_1;
      $19_1 = $22_1 + 1 | 0;
      continue label$25;
     };
    }
    $1015($20_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0);
   }
   $17_1 = $17_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $1287($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($1192($0_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $1288($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1289($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1290($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1307($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1291($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1306($1305($0_1 | 0) | 0 | 0, $1305($1_1 | 0) | 0 | 0, $1124($2_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1292($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $13_1 = 0, $11_1 = 0, $10_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 192 | 0;
  global$0 = $6_1;
  $807($6_1 + 184 | 0 | 0, $3_1 | 0);
  $7_1 = $522($6_1 + 184 | 0 | 0) | 0;
  $8_1 = 0;
  label$1 : {
   if (!($44($5_1 | 0) | 0)) {
    break label$1
   }
   $8_1 = (HEAPU8[($52($5_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0) == (($523($7_1 | 0, 45 | 0) | 0) & 255 | 0 | 0);
  }
  $9_1 = $41($6_1 + 160 | 0 | 0) | 0;
  $10_1 = $41($6_1 + 144 | 0 | 0) | 0;
  $11_1 = $41($6_1 + 128 | 0 | 0) | 0;
  $1285($2_1 | 0, $8_1 | 0, $6_1 + 184 | 0 | 0, $6_1 + 176 | 0 | 0, $6_1 + 175 | 0 | 0, $6_1 + 174 | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, $6_1 + 124 | 0 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 67;
  $12_1 = $1023($6_1 + 8 | 0 | 0, 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  label$2 : {
   label$3 : {
    if (($44($5_1 | 0) | 0 | 0) <= (HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $2_1 = $44($5_1 | 0) | 0;
    $13_1 = HEAP32[($6_1 + 124 | 0) >> 2] | 0;
    $13_1 = (($44($11_1 | 0) | 0) + (($2_1 - $13_1 | 0) << 1 | 0) | 0) + 1 | 0;
    break label$2;
   }
   $13_1 = ($44($11_1 | 0) | 0) + 2 | 0;
  }
  $2_1 = $6_1 + 16 | 0;
  label$4 : {
   $13_1 = ($13_1 + ($44($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 124 | 0) >> 2] | 0) | 0;
   if ($13_1 >>> 0 < 101 >>> 0) {
    break label$4
   }
   $1025($12_1 | 0, $1923($13_1 | 0) | 0 | 0);
   $2_1 = $1179($12_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   $1805();
   abort();
  }
  $1286($2_1 | 0, $6_1 + 4 | 0 | 0, $6_1 | 0, $509($3_1 | 0) | 0 | 0, $26($5_1 | 0) | 0 | 0, ($26($5_1 | 0) | 0) + ($44($5_1 | 0) | 0) | 0 | 0, $7_1 | 0, $8_1 | 0, $6_1 + 176 | 0 | 0, HEAP8[($6_1 + 175 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 174 | 0) >> 0] | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0);
  $5_1 = $511($1_1 | 0, $2_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $1027($12_1 | 0) | 0;
  $1835($11_1 | 0) | 0;
  $1835($10_1 | 0) | 0;
  $1835($9_1 | 0) | 0;
  $911($6_1 + 184 | 0 | 0) | 0;
  global$0 = $6_1 + 192 | 0;
  return $5_1 | 0;
 }
 
 function $1293($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var $7_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, $12_1 = 0, $14_1 = 0, $16_1 = 0, $18_1 = 0, $11_1 = 0, $9_1 = 0, $15_1 = 0, $17_1 = 0, $10_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 1072 | 0;
  global$0 = $7_1;
  i64toi32_i32$0 = $5$hi;
  HEAP32[($7_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[($7_1 + 24 | 0) >> 2] = $6_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($7_1 + 956 | 0) >> 2] = $7_1 + 960 | 0;
  $8_1 = $692($7_1 + 960 | 0 | 0, 100 | 0, 10479 | 0, $7_1 + 16 | 0 | 0) | 0;
  HEAP32[($7_1 + 544 | 0) >> 2] = 67;
  $9_1 = 0;
  $10_1 = $1023($7_1 + 536 | 0 | 0, 0 | 0, $7_1 + 544 | 0 | 0) | 0;
  HEAP32[($7_1 + 544 | 0) >> 2] = 67;
  $11_1 = $1052($7_1 + 528 | 0 | 0, 0 | 0, $7_1 + 544 | 0 | 0) | 0;
  $12_1 = $7_1 + 544 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 100 >>> 0) {
     break label$2
    }
    $8_1 = $958() | 0;
    i64toi32_i32$0 = $5$hi;
    HEAP32[$7_1 >> 2] = $5_1;
    HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    HEAP32[($7_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $8_1 = $1024($7_1 + 956 | 0 | 0, $8_1 | 0, 10479 | 0, $7_1 | 0) | 0;
    $12_1 = HEAP32[($7_1 + 956 | 0) >> 2] | 0;
    if (!$12_1) {
     break label$1
    }
    $1025($10_1 | 0, $12_1 | 0);
    $1053($11_1 | 0, $1923($8_1 << 2 | 0 | 0) | 0 | 0);
    if ($1294($11_1 | 0, 0 | 0) | 0) {
     break label$1
    }
    $12_1 = $1229($11_1 | 0) | 0;
   }
   $807($7_1 + 520 | 0 | 0, $3_1 | 0);
   $13_1 = $821($7_1 + 520 | 0 | 0) | 0;
   $14_1 = HEAP32[($7_1 + 956 | 0) >> 2] | 0;
   $997($13_1 | 0, $14_1 | 0, $14_1 + $8_1 | 0 | 0, $12_1 | 0) | 0;
   label$3 : {
    if (!$8_1) {
     break label$3
    }
    $9_1 = (HEAPU8[(HEAP32[($7_1 + 956 | 0) >> 2] | 0) >> 0] | 0 | 0) == (45 | 0);
   }
   $15_1 = $41($7_1 + 488 | 0 | 0) | 0;
   $14_1 = $1160($7_1 + 472 | 0 | 0) | 0;
   $16_1 = $1160($7_1 + 456 | 0 | 0) | 0;
   $1295($2_1 | 0, $9_1 | 0, $7_1 + 520 | 0 | 0, $7_1 + 512 | 0 | 0, $7_1 + 508 | 0 | 0, $7_1 + 504 | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, $7_1 + 452 | 0 | 0);
   HEAP32[($7_1 + 48 | 0) >> 2] = 67;
   $17_1 = $1052($7_1 + 40 | 0 | 0, 0 | 0, $7_1 + 48 | 0 | 0) | 0;
   label$4 : {
    label$5 : {
     $2_1 = HEAP32[($7_1 + 452 | 0) >> 2] | 0;
     if (($8_1 | 0) <= ($2_1 | 0)) {
      break label$5
     }
     $18_1 = (($8_1 - $2_1 | 0) << 1 | 0 | 1 | 0) + ($970($16_1 | 0) | 0) | 0;
     break label$4;
    }
    $18_1 = ($970($16_1 | 0) | 0) + 2 | 0;
   }
   $2_1 = $7_1 + 48 | 0;
   label$6 : {
    $18_1 = ($18_1 + ($970($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 452 | 0) >> 2] | 0) | 0;
    if ($18_1 >>> 0 < 101 >>> 0) {
     break label$6
    }
    $1053($17_1 | 0, $1923($18_1 << 2 | 0 | 0) | 0 | 0);
    $2_1 = $1229($17_1 | 0) | 0;
    if (!$2_1) {
     break label$1
    }
   }
   $1296($2_1 | 0, $7_1 + 36 | 0 | 0, $7_1 + 32 | 0 | 0, $509($3_1 | 0) | 0 | 0, $12_1 | 0, $12_1 + ($8_1 << 2 | 0) | 0 | 0, $13_1 | 0, $9_1 | 0, $7_1 + 512 | 0 | 0, HEAP32[($7_1 + 508 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 504 | 0) >> 2] | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, HEAP32[($7_1 + 452 | 0) >> 2] | 0 | 0);
   $8_1 = $1044($1_1 | 0, $2_1 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   $1055($17_1 | 0) | 0;
   $1849($16_1 | 0) | 0;
   $1849($14_1 | 0) | 0;
   $1835($15_1 | 0) | 0;
   $911($7_1 + 520 | 0 | 0) | 0;
   $1055($11_1 | 0) | 0;
   $1027($10_1 | 0) | 0;
   global$0 = $7_1 + 1072 | 0;
   return $8_1 | 0;
  }
  $1805();
  abort();
 }
 
 function $1294($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1297($0_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1295($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $0_1 = $1254($2_1 | 0) | 0;
    label$3 : {
     label$4 : {
      if (!$1_1) {
       break label$4
      }
      $1255($10_1 | 0, $0_1 | 0);
      $11_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP8[$3_1 >> 0] = $11_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = $11_1 >>> 8 | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = $11_1 >>> 16 | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = $11_1 >>> 24 | 0;
      $1256($10_1 | 0, $0_1 | 0);
      $1257($8_1 | 0, $10_1 | 0) | 0;
      $1849($10_1 | 0) | 0;
      break label$3;
     }
     $1298($10_1 | 0, $0_1 | 0);
     $12_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = $12_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
     $1258($10_1 | 0, $0_1 | 0);
     $1257($8_1 | 0, $10_1 | 0) | 0;
     $1849($10_1 | 0) | 0;
    }
    HEAP32[$4_1 >> 2] = $1259($0_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $1260($0_1 | 0) | 0;
    $1261($10_1 | 0, $0_1 | 0);
    $46($6_1 | 0, $10_1 | 0) | 0;
    $1835($10_1 | 0) | 0;
    $1262($10_1 | 0, $0_1 | 0);
    $1257($7_1 | 0, $10_1 | 0) | 0;
    $1849($10_1 | 0) | 0;
    $0_1 = $1263($0_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $1264($2_1 | 0) | 0;
   label$5 : {
    label$6 : {
     if (!$1_1) {
      break label$6
     }
     $1265($10_1 | 0, $0_1 | 0);
     $13_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = $13_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $13_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $13_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $13_1 >>> 24 | 0;
     $1266($10_1 | 0, $0_1 | 0);
     $1257($8_1 | 0, $10_1 | 0) | 0;
     $1849($10_1 | 0) | 0;
     break label$5;
    }
    $1299($10_1 | 0, $0_1 | 0);
    $14_1 = HEAP32[$10_1 >> 2] | 0;
    HEAP8[$3_1 >> 0] = $14_1;
    HEAP8[($3_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
    HEAP8[($3_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
    HEAP8[($3_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
    $1267($10_1 | 0, $0_1 | 0);
    $1257($8_1 | 0, $10_1 | 0) | 0;
    $1849($10_1 | 0) | 0;
   }
   HEAP32[$4_1 >> 2] = $1268($0_1 | 0) | 0;
   HEAP32[$5_1 >> 2] = $1269($0_1 | 0) | 0;
   $1270($10_1 | 0, $0_1 | 0);
   $46($6_1 | 0, $10_1 | 0) | 0;
   $1835($10_1 | 0) | 0;
   $1271($10_1 | 0, $0_1 | 0);
   $1257($7_1 | 0, $10_1 | 0) | 0;
   $1849($10_1 | 0) | 0;
   $0_1 = $1272($0_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $0_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1296($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  var $18_1 = 0, $19_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $15_1 = 0, $17_1 = 0, $16_1 = 0, $20_1 = 0;
  $15_1 = global$0 - 16 | 0;
  global$0 = $15_1;
  HEAP32[$2_1 >> 2] = $0_1;
  $16_1 = $3_1 & 512 | 0;
  $17_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($17_1 | 0) != (4 | 0)) {
     break label$2
    }
    label$3 : {
     if (($970($13_1 | 0) | 0) >>> 0 <= 1 >>> 0) {
      break label$3
     }
     HEAP32[($15_1 + 8 | 0) >> 2] = $1300($13_1 | 0) | 0;
     HEAP32[$2_1 >> 2] = $1303($1301($15_1 + 8 | 0 | 0, 1 | 0) | 0 | 0, $1302($13_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
    }
    label$4 : {
     $18_1 = $3_1 & 176 | 0;
     if (($18_1 | 0) == (16 | 0)) {
      break label$4
     }
     label$5 : {
      if (($18_1 | 0) != (32 | 0)) {
       break label$5
      }
      $0_1 = HEAP32[$2_1 >> 2] | 0;
     }
     HEAP32[$1_1 >> 2] = $0_1;
    }
    global$0 = $15_1 + 16 | 0;
    return;
   }
   label$6 : {
    label$7 : {
     switch (HEAP8[($8_1 + $17_1 | 0) >> 0] | 0 | 0) {
     case 0:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      break label$6;
     case 1:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      $18_1 = $866($6_1 | 0, 32 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 4 | 0;
      HEAP32[$19_1 >> 2] = $18_1;
      break label$6;
     case 3:
      if ($972($13_1 | 0) | 0) {
       break label$6
      }
      $18_1 = HEAP32[($971($13_1 | 0, 0 | 0) | 0) >> 2] | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 4 | 0;
      HEAP32[$19_1 >> 2] = $18_1;
      break label$6;
     case 2:
      $18_1 = $972($12_1 | 0) | 0;
      if (!$16_1) {
       break label$6
      }
      if ($18_1) {
       break label$6
      }
      HEAP32[$2_1 >> 2] = $1303($1300($12_1 | 0) | 0 | 0, $1302($12_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
      break label$6;
     case 4:
      break label$7;
     default:
      break label$6;
     };
    }
    $20_1 = HEAP32[$2_1 >> 2] | 0;
    $4_1 = $7_1 ? $4_1 + 4 | 0 : $4_1;
    $18_1 = $4_1;
    label$12 : {
     label$13 : while (1) {
      if ($18_1 >>> 0 >= $5_1 >>> 0) {
       break label$12
      }
      if (!($824($6_1 | 0, 2048 | 0, HEAP32[$18_1 >> 2] | 0 | 0) | 0)) {
       break label$12
      }
      $18_1 = $18_1 + 4 | 0;
      continue label$13;
     };
    }
    $19_1 = $14_1;
    label$14 : {
     if (($19_1 | 0) < (1 | 0)) {
      break label$14
     }
     label$15 : {
      label$16 : while (1) {
       $21_1 = ($19_1 | 0) < (1 | 0);
       if ($21_1) {
        break label$15
       }
       if ($18_1 >>> 0 <= $4_1 >>> 0) {
        break label$15
       }
       $18_1 = $18_1 + -4 | 0;
       $21_1 = HEAP32[$18_1 >> 2] | 0;
       $22_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $22_1 + 4 | 0;
       HEAP32[$22_1 >> 2] = $21_1;
       $19_1 = $19_1 + -1 | 0;
       continue label$16;
      };
     }
     label$17 : {
      label$18 : {
       if (!$21_1) {
        break label$18
       }
       $23_1 = 0;
       break label$17;
      }
      $23_1 = $866($6_1 | 0, 48 | 0) | 0;
     }
     $21_1 = HEAP32[$2_1 >> 2] | 0;
     label$19 : {
      label$20 : while (1) {
       $22_1 = $21_1 + 4 | 0;
       if (($19_1 | 0) < (1 | 0)) {
        break label$19
       }
       HEAP32[$21_1 >> 2] = $23_1;
       $19_1 = $19_1 + -1 | 0;
       $21_1 = $22_1;
       continue label$20;
      };
     }
     HEAP32[$2_1 >> 2] = $22_1;
     HEAP32[$21_1 >> 2] = $9_1;
    }
    label$21 : {
     label$22 : {
      if (($18_1 | 0) != ($4_1 | 0)) {
       break label$22
      }
      $19_1 = $866($6_1 | 0, 48 | 0) | 0;
      $21_1 = HEAP32[$2_1 >> 2] | 0;
      $18_1 = $21_1 + 4 | 0;
      HEAP32[$2_1 >> 2] = $18_1;
      HEAP32[$21_1 >> 2] = $19_1;
      break label$21;
     }
     label$23 : {
      label$24 : {
       if (!($53($11_1 | 0) | 0)) {
        break label$24
       }
       $23_1 = $599() | 0;
       break label$23;
      }
      $23_1 = HEAP8[($52($11_1 | 0, 0 | 0) | 0) >> 0] | 0;
     }
     $19_1 = 0;
     $24_1 = 0;
     label$25 : {
      label$26 : while (1) {
       if (($18_1 | 0) == ($4_1 | 0)) {
        break label$25
       }
       label$27 : {
        label$28 : {
         if (($19_1 | 0) == ($23_1 | 0)) {
          break label$28
         }
         $22_1 = $19_1;
         break label$27;
        }
        $21_1 = HEAP32[$2_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $21_1 + 4 | 0;
        HEAP32[$21_1 >> 2] = $10_1;
        $22_1 = 0;
        label$29 : {
         $24_1 = $24_1 + 1 | 0;
         if ($24_1 >>> 0 < ($44($11_1 | 0) | 0) >>> 0) {
          break label$29
         }
         $23_1 = $19_1;
         break label$27;
        }
        label$30 : {
         if ((HEAPU8[($52($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0 | 0) != (($581() | 0) & 255 | 0 | 0)) {
          break label$30
         }
         $23_1 = $599() | 0;
         break label$27;
        }
        $23_1 = HEAP8[($52($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0;
       }
       $18_1 = $18_1 + -4 | 0;
       $19_1 = HEAP32[$18_1 >> 2] | 0;
       $21_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $21_1 + 4 | 0;
       HEAP32[$21_1 >> 2] = $19_1;
       $19_1 = $22_1 + 1 | 0;
       continue label$26;
      };
     }
     $18_1 = HEAP32[$2_1 >> 2] | 0;
    }
    $1045($20_1 | 0, $18_1 | 0);
   }
   $17_1 = $17_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $1297($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($1243($0_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $1298($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1299($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1300($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1310($1_1 + 8 | 0 | 0, $1094($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1301($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1311($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1302($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1310($1_1 + 8 | 0 | 0, ($1094($0_1 | 0) | 0) + (($970($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1303($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1309($1308($0_1 | 0) | 0 | 0, $1308($1_1 | 0) | 0 | 0, $1133($2_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1304($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $13_1 = 0, $11_1 = 0, $10_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 496 | 0;
  global$0 = $6_1;
  $807($6_1 + 488 | 0 | 0, $3_1 | 0);
  $7_1 = $821($6_1 + 488 | 0 | 0) | 0;
  $8_1 = 0;
  label$1 : {
   if (!($970($5_1 | 0) | 0)) {
    break label$1
   }
   $8_1 = (HEAP32[($971($5_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0) == ($866($7_1 | 0, 45 | 0) | 0 | 0);
  }
  $9_1 = $41($6_1 + 456 | 0 | 0) | 0;
  $10_1 = $1160($6_1 + 440 | 0 | 0) | 0;
  $11_1 = $1160($6_1 + 424 | 0 | 0) | 0;
  $1295($2_1 | 0, $8_1 | 0, $6_1 + 488 | 0 | 0, $6_1 + 480 | 0 | 0, $6_1 + 476 | 0 | 0, $6_1 + 472 | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, $6_1 + 420 | 0 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 67;
  $12_1 = $1052($6_1 + 8 | 0 | 0, 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  label$2 : {
   label$3 : {
    if (($970($5_1 | 0) | 0 | 0) <= (HEAP32[($6_1 + 420 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $2_1 = $970($5_1 | 0) | 0;
    $13_1 = HEAP32[($6_1 + 420 | 0) >> 2] | 0;
    $13_1 = (($970($11_1 | 0) | 0) + (($2_1 - $13_1 | 0) << 1 | 0) | 0) + 1 | 0;
    break label$2;
   }
   $13_1 = ($970($11_1 | 0) | 0) + 2 | 0;
  }
  $2_1 = $6_1 + 16 | 0;
  label$4 : {
   $13_1 = ($13_1 + ($970($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 420 | 0) >> 2] | 0) | 0;
   if ($13_1 >>> 0 < 101 >>> 0) {
    break label$4
   }
   $1053($12_1 | 0, $1923($13_1 << 2 | 0 | 0) | 0 | 0);
   $2_1 = $1229($12_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   $1805();
   abort();
  }
  $1296($2_1 | 0, $6_1 + 4 | 0 | 0, $6_1 | 0, $509($3_1 | 0) | 0 | 0, $1093($5_1 | 0) | 0 | 0, ($1093($5_1 | 0) | 0) + (($970($5_1 | 0) | 0) << 2 | 0) | 0 | 0, $7_1 | 0, $8_1 | 0, $6_1 + 480 | 0 | 0, HEAP32[($6_1 + 476 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 472 | 0) >> 2] | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, HEAP32[($6_1 + 420 | 0) >> 2] | 0 | 0);
  $5_1 = $1044($1_1 | 0, $2_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $1055($12_1 | 0) | 0;
  $1849($11_1 | 0) | 0;
  $1849($10_1 | 0) | 0;
  $1835($9_1 | 0) | 0;
  $911($6_1 + 488 | 0 | 0) | 0;
  global$0 = $6_1 + 496 | 0;
  return $5_1 | 0;
 }
 
 function $1305($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
  $0_1 = $289($1_1 + 8 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1306($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   $1_1 = $1_1 - $0_1 | 0;
   if (!$1_1) {
    break label$1
   }
   $1934($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
  }
  return $2_1 + $1_1 | 0 | 0;
 }
 
 function $1307($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1308($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
  $0_1 = $1276($1_1 + 8 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1309($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   $1_1 = $1_1 - $0_1 | 0;
   if (!$1_1) {
    break label$1
   }
   $1934($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
  }
  return $2_1 + $1_1 | 0 | 0;
 }
 
 function $1310($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1311($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1312($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $876($25($1_1 | 0) | 0 | 0, 1 | 0) | 0;
  return (($1_1 | 0) == (-1 | 0) ? -1 : $1_1 >>> 1 | 0) | 0;
 }
 
 function $1313($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  $7_1 = $41($6_1 + 16 | 0 | 0) | 0;
  $1315($6_1 + 8 | 0 | 0, $1314($7_1 | 0) | 0 | 0, $25($5_1 | 0) | 0 | 0, ($25($5_1 | 0) | 0) + ($44($5_1 | 0) | 0) | 0 | 0) | 0;
  $5_1 = $877((($2_1 | 0) == (-1 | 0) ? -1 : $2_1 << 1 | 0) | 0, $3_1 | 0, $4_1 | 0, $25($7_1 | 0) | 0 | 0) | 0;
  $1316($6_1 | 0, $1314($41($0_1 | 0) | 0 | 0) | 0 | 0, $5_1 | 0, $5_1 + ($1940($5_1 | 0) | 0) | 0 | 0) | 0;
  $1835($7_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
 }
 
 function $1314($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1320($1_1 + 8 | 0 | 0, $0_1 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1315($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : while (1) {
    if ($2_1 >>> 0 >= $3_1 >>> 0) {
     break label$1
    }
    $1318($1317($4_1 + 8 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $2_1 = $2_1 + 1 | 0;
    $1319($4_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $2_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1316($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : while (1) {
    if ($2_1 >>> 0 >= $3_1 >>> 0) {
     break label$1
    }
    $1318($1317($4_1 + 8 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $2_1 = $2_1 + 1 | 0;
    $1319($4_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $2_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1317($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1318($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1845(HEAP32[$0_1 >> 2] | 0 | 0, HEAP8[$1_1 >> 0] | 0 | 0);
  return $0_1 | 0;
 }
 
 function $1319($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1320($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1803($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1321($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $878((($1_1 | 0) == (-1 | 0) ? -1 : $1_1 << 1 | 0) | 0) | 0;
 }
 
 function $1322($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $876($25($1_1 | 0) | 0 | 0, 1 | 0) | 0;
  return (($1_1 | 0) == (-1 | 0) ? -1 : $1_1 >>> 1 | 0) | 0;
 }
 
 function $1323($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  $7_1 = $41($6_1 + 16 | 0 | 0) | 0;
  $8_1 = $1324($6_1 + 8 | 0 | 0) | 0;
  $1326($8_1 | 0, $1314($7_1 | 0) | 0 | 0, $1325($5_1 | 0) | 0 | 0, ($1325($5_1 | 0) | 0) + (($970($5_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0;
  $895($8_1 | 0) | 0;
  $5_1 = $877((($2_1 | 0) == (-1 | 0) ? -1 : $2_1 << 1 | 0) | 0, $3_1 | 0, $4_1 | 0, $25($7_1 | 0) | 0 | 0) | 0;
  $2_1 = $1160($0_1 | 0) | 0;
  $3_1 = $1327($6_1 + 8 | 0 | 0) | 0;
  $1329($3_1 | 0, $1328($2_1 | 0) | 0 | 0, $5_1 | 0, $5_1 + ($1940($5_1 | 0) | 0) | 0 | 0) | 0;
  $895($3_1 | 0) | 0;
  $1835($7_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
 }
 
 function $1324($0_1) {
  $0_1 = $0_1 | 0;
  $1330($0_1 | 0, 1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 11604;
  return $0_1 | 0;
 }
 
 function $1325($0_1) {
  $0_1 = $0_1 | 0;
  return $1093($0_1 | 0) | 0 | 0;
 }
 
 function $1326($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
  $5_1 = $4_1 + 48 | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if ($2_1 >>> 0 >= $3_1 >>> 0) {
      break label$2
     }
     HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
     if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $4_1 + 48 | 0, $2_1, $3_1, $4_1 + 8 | 0, $4_1 + 16 | 0, $5_1, $4_1 + 12 | 0) | 0 | 0) == (2 | 0)) {
      break label$1
     }
     $1_1 = $4_1 + 16 | 0;
     if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
      break label$1
     }
     label$4 : while (1) {
      label$5 : {
       if ($1_1 >>> 0 < (HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       $2_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
       continue label$3;
      }
      $1318($1317($4_1 + 56 | 0 | 0) | 0 | 0, $1_1 | 0) | 0;
      $1_1 = $1_1 + 1 | 0;
      $1319($4_1 + 56 | 0 | 0) | 0;
      continue label$4;
     };
    };
   }
   $1_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
   global$0 = $4_1 + 64 | 0;
   return $1_1 | 0;
  }
  $1132($1_1 | 0);
  abort();
 }
 
 function $1327($0_1) {
  $0_1 = $0_1 | 0;
  $1330($0_1 | 0, 1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 11700;
  return $0_1 | 0;
 }
 
 function $1328($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1334($1_1 + 8 | 0 | 0, $0_1 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1329($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 152 | 0) >> 2] = $1_1;
  $5_1 = $4_1 + 144 | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if ($2_1 >>> 0 >= $3_1 >>> 0) {
      break label$2
     }
     HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
     if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $4_1 + 144 | 0, $2_1, ($3_1 - $2_1 | 0 | 0) > (32 | 0) ? $2_1 + 32 | 0 : $3_1, $4_1 + 8 | 0, $4_1 + 16 | 0, $5_1, $4_1 + 12 | 0) | 0 | 0) == (2 | 0)) {
      break label$1
     }
     $1_1 = $4_1 + 16 | 0;
     if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
      break label$1
     }
     label$4 : while (1) {
      label$5 : {
       if ($1_1 >>> 0 < (HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       $2_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
       continue label$3;
      }
      HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
      $1332($1331($4_1 + 152 | 0 | 0) | 0 | 0, $4_1 + 4 | 0 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $1333($4_1 + 152 | 0 | 0) | 0;
      continue label$4;
     };
    };
   }
   $1_1 = HEAP32[($4_1 + 152 | 0) >> 2] | 0;
   global$0 = $4_1 + 160 | 0;
   return $1_1 | 0;
  }
  $1132($4_1 | 0);
  abort();
 }
 
 function $1330($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  $1509($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 11488;
  return $0_1 | 0;
 }
 
 function $1331($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1332($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1856(HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[($1760($1_1 | 0) | 0) >> 2] | 0 | 0);
  return $0_1 | 0;
 }
 
 function $1333($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1334($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1804($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1335($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $878((($1_1 | 0) == (-1 | 0) ? -1 : $1_1 << 1 | 0) | 0) | 0;
 }
 
 function $1336($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 10568;
  label$1 : {
   if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) == ($958() | 0 | 0)) {
    break label$1
   }
   $879(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
  }
  $895($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1337($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 10496;
  $1_1 = $1339($0_1 + 16 | 0 | 0, 28 | 0) | 0;
  $21($0_1 + 176 | 0 | 0, 10485 | 0) | 0;
  $1340($1_1 | 0);
  $1341();
  $1342($0_1 | 0, 20768 | 0);
  $1343();
  $1344($0_1 | 0, 20776 | 0);
  $1345();
  $1346($0_1 | 0, 20784 | 0);
  $1347();
  $1348($0_1 | 0, 20800 | 0);
  $1349();
  $1350($0_1 | 0, 20808 | 0);
  $1351();
  $1352($0_1 | 0, 20816 | 0);
  $1353();
  $1354($0_1 | 0, 20832 | 0);
  $1355();
  $1356($0_1 | 0, 20840 | 0);
  $1357();
  $1358($0_1 | 0, 20848 | 0);
  $1359();
  $1360($0_1 | 0, 20880 | 0);
  $1361();
  $1362($0_1 | 0, 20912 | 0);
  $1363();
  $1364($0_1 | 0, 20920 | 0);
  $1365();
  $1366($0_1 | 0, 20928 | 0);
  $1367();
  $1368($0_1 | 0, 20936 | 0);
  $1369();
  $1370($0_1 | 0, 20944 | 0);
  $1371();
  $1372($0_1 | 0, 20952 | 0);
  $1373();
  $1374($0_1 | 0, 20960 | 0);
  $1375();
  $1376($0_1 | 0, 20968 | 0);
  $1377();
  $1378($0_1 | 0, 20976 | 0);
  $1379();
  $1380($0_1 | 0, 20984 | 0);
  $1381();
  $1382($0_1 | 0, 20992 | 0);
  $1383();
  $1384($0_1 | 0, 21e3 | 0);
  $1385();
  $1386($0_1 | 0, 21008 | 0);
  $1387();
  $1388($0_1 | 0, 21024 | 0);
  $1389();
  $1390($0_1 | 0, 21040 | 0);
  $1391();
  $1392($0_1 | 0, 21056 | 0);
  $1393();
  $1394($0_1 | 0, 21072 | 0);
  $1395();
  $1396($0_1 | 0, 21080 | 0);
  return $0_1 | 0;
 }
 
 function $1338($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1397($0_1 | 0, $1_1 + -1 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 11020;
  return $0_1 | 0;
 }
 
 function $1339($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1398($0_1 | 0) | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1399($0_1 | 0, $1_1 | 0);
   $1400($0_1 | 0, $1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1340($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $1401($0_1 | 0) | 0;
  $1402($0_1 | 0);
  $1403($0_1 | 0, $1_1 | 0);
  $1404($0_1 | 0);
 }
 
 function $1341() {
  $1407(20768 | 0, 1 | 0) | 0;
 }
 
 function $1342($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19300 | 0) | 0 | 0);
 }
 
 function $1343() {
  $1408(20776 | 0, 1 | 0) | 0;
 }
 
 function $1344($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19308 | 0) | 0 | 0);
 }
 
 function $1345() {
  $1409(20784 | 0, 0 | 0, 0 | 0, 1 | 0) | 0;
 }
 
 function $1346($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19504 | 0) | 0 | 0);
 }
 
 function $1347() {
  $1410(20800 | 0, 1 | 0) | 0;
 }
 
 function $1348($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19496 | 0) | 0 | 0);
 }
 
 function $1349() {
  $1411(20808 | 0, 1 | 0) | 0;
 }
 
 function $1350($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19512 | 0) | 0 | 0);
 }
 
 function $1351() {
  $1412(20816 | 0, 1 | 0) | 0;
 }
 
 function $1352($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19520 | 0) | 0 | 0);
 }
 
 function $1353() {
  $1413(20832 | 0, 1 | 0) | 0;
 }
 
 function $1354($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19528 | 0) | 0 | 0);
 }
 
 function $1355() {
  $1330(20840 | 0, 1 | 0) | 0;
 }
 
 function $1356($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19536 | 0) | 0 | 0);
 }
 
 function $1357() {
  $1414(20848 | 0, 1 | 0) | 0;
 }
 
 function $1358($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19544 | 0) | 0 | 0);
 }
 
 function $1359() {
  $1415(20880 | 0, 1 | 0) | 0;
 }
 
 function $1360($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19552 | 0) | 0 | 0);
 }
 
 function $1361() {
  $1416(20912 | 0, 1 | 0) | 0;
 }
 
 function $1362($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19316 | 0) | 0 | 0);
 }
 
 function $1363() {
  $1417(20920 | 0, 1 | 0) | 0;
 }
 
 function $1364($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19324 | 0) | 0 | 0);
 }
 
 function $1365() {
  $1418(20928 | 0, 1 | 0) | 0;
 }
 
 function $1366($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19332 | 0) | 0 | 0);
 }
 
 function $1367() {
  $1419(20936 | 0, 1 | 0) | 0;
 }
 
 function $1368($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19340 | 0) | 0 | 0);
 }
 
 function $1369() {
  $1420(20944 | 0, 1 | 0) | 0;
 }
 
 function $1370($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19380 | 0) | 0 | 0);
 }
 
 function $1371() {
  $1421(20952 | 0, 1 | 0) | 0;
 }
 
 function $1372($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19388 | 0) | 0 | 0);
 }
 
 function $1373() {
  $1422(20960 | 0, 1 | 0) | 0;
 }
 
 function $1374($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19396 | 0) | 0 | 0);
 }
 
 function $1375() {
  $1423(20968 | 0, 1 | 0) | 0;
 }
 
 function $1376($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19404 | 0) | 0 | 0);
 }
 
 function $1377() {
  $1424(20976 | 0, 1 | 0) | 0;
 }
 
 function $1378($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19412 | 0) | 0 | 0);
 }
 
 function $1379() {
  $1425(20984 | 0, 1 | 0) | 0;
 }
 
 function $1380($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19420 | 0) | 0 | 0);
 }
 
 function $1381() {
  $1426(20992 | 0, 1 | 0) | 0;
 }
 
 function $1382($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19428 | 0) | 0 | 0);
 }
 
 function $1383() {
  $1427(21e3 | 0, 1 | 0) | 0;
 }
 
 function $1384($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19436 | 0) | 0 | 0);
 }
 
 function $1385() {
  $1428(21008 | 0, 1 | 0) | 0;
 }
 
 function $1386($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19348 | 0) | 0 | 0);
 }
 
 function $1387() {
  $1429(21024 | 0, 1 | 0) | 0;
 }
 
 function $1388($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19356 | 0) | 0 | 0);
 }
 
 function $1389() {
  $1430(21040 | 0, 1 | 0) | 0;
 }
 
 function $1390($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19364 | 0) | 0 | 0);
 }
 
 function $1391() {
  $1431(21056 | 0, 1 | 0) | 0;
 }
 
 function $1392($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19372 | 0) | 0 | 0);
 }
 
 function $1393() {
  $1432(21072 | 0, 1 | 0) | 0;
 }
 
 function $1394($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19444 | 0) | 0 | 0);
 }
 
 function $1395() {
  $1433(21080 | 0, 1 | 0) | 0;
 }
 
 function $1396($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0, $1405(19452 | 0) | 0 | 0);
 }
 
 function $1397($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 16428 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $1398($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $338($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = 0;
  $1641($0_1 + 16 | 0 | 0, $1_1 + 12 | 0 | 0, $1_1 + 8 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1399($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   if (($1642($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $771($0_1 | 0);
   abort();
  }
  $2_1 = $1644($1643($0_1 | 0) | 0 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[($1645($0_1 | 0) | 0) >> 2] = $2_1 + ($1_1 << 2 | 0) | 0;
  $1646($0_1 | 0, 0 | 0);
 }
 
 function $1400($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = $1647($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
  $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (($3_1 | 0) == (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
    $1649($1643($0_1 | 0) | 0 | 0, $1648(HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
    $3_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 4 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $3_1;
    continue label$2;
   };
  }
  $1650($1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1401($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1402($0_1) {
  $0_1 = $0_1 | 0;
  $1675($0_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0);
 }
 
 function $1403($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1661($0_1 | 0, $1659($0_1 | 0) | 0 | 0, ($1659($0_1 | 0) | 0) + (($1660($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1659($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0, ($1659($0_1 | 0) | 0) + (($1401($0_1 | 0) | 0) << 2 | 0) | 0 | 0);
 }
 
 function $1404($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1405($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = 69;
  i64toi32_i32$1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1466($0_1 | 0, $1465($1_1 + 16 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0 | 0);
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  global$0 = $1_1 + 32 | 0;
  return $0_1 + -1 | 0 | 0;
 }
 
 function $1406($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1436($1_1 | 0);
  $4_1 = $1440($3_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  label$1 : {
   $1_1 = $0_1 + 16 | 0;
   if (($1401($1_1 | 0) | 0) >>> 0 > $2_1 >>> 0) {
    break label$1
   }
   $1443($1_1 | 0, $2_1 + 1 | 0 | 0);
  }
  label$2 : {
   if (!(HEAP32[($1435($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0)) {
    break label$2
   }
   $1444(HEAP32[($1435($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0 | 0) | 0;
  }
  $0_1 = $1445($4_1 | 0) | 0;
  HEAP32[($1435($1_1 | 0, $2_1 | 0) | 0) >> 2] = $0_1;
  $1441($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1407($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 12088;
  return $0_1 | 0;
 }
 
 function $1408($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 12120;
  return $0_1 | 0;
 }
 
 function $1409($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1338($0_1 | 0, $3_1 | 0) | 0;
  $1490($0_1 | 0) | 0;
  HEAP8[($0_1 + 12 | 0) >> 0] = $2_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 10516;
  label$1 : {
   if ($1_1) {
    break label$1
   }
   HEAP32[($0_1 + 8 | 0) >> 2] = $1476() | 0;
  }
  return $0_1 | 0;
 }
 
 function $1410($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  $1490($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 11076;
  return $0_1 | 0;
 }
 
 function $1411($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  $1509($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 11224;
  return $0_1 | 0;
 }
 
 function $1412($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  $1509($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 10568;
  HEAP32[($0_1 + 8 | 0) >> 2] = $958() | 0;
  return $0_1 | 0;
 }
 
 function $1413($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  $1509($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 11372;
  return $0_1 | 0;
 }
 
 function $1414($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  HEAP16[($0_1 + 8 | 0) >> 1] = 11310;
  HEAP32[$0_1 >> 2] = 10616;
  $41($0_1 + 12 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1415($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 46;
  HEAP32[($0_1 + 12 | 0) >> 2] = 44;
  HEAP32[$0_1 >> 2] = 10656;
  $41($0_1 + 16 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1416($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 12152;
  return $0_1 | 0;
 }
 
 function $1417($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 12396;
  return $0_1 | 0;
 }
 
 function $1418($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 12608;
  return $0_1 | 0;
 }
 
 function $1419($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 12840;
  return $0_1 | 0;
 }
 
 function $1420($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  $1679($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 13824;
  return $0_1 | 0;
 }
 
 function $1421($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  $1679($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 13972;
  return $0_1 | 0;
 }
 
 function $1422($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  $1679($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 14088;
  return $0_1 | 0;
 }
 
 function $1423($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  $1679($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 14204;
  return $0_1 | 0;
 }
 
 function $1424($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  $1680($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 14320;
  return $0_1 | 0;
 }
 
 function $1425($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  $1681($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 14484;
  return $0_1 | 0;
 }
 
 function $1426($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  $1682($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 14648;
  return $0_1 | 0;
 }
 
 function $1427($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  $1683($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 14812;
  return $0_1 | 0;
 }
 
 function $1428($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  $1_1 = $1684($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 13040;
  HEAP32[$1_1 >> 2] = 13088;
  return $0_1 | 0;
 }
 
 function $1429($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  $1_1 = $1685($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 13304;
  HEAP32[$1_1 >> 2] = 13352;
  return $0_1 | 0;
 }
 
 function $1430($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  $1686($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 13540;
  return $0_1 | 0;
 }
 
 function $1431($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  $1686($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 13696;
  return $0_1 | 0;
 }
 
 function $1432($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  $1687($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 14976;
  return $0_1 | 0;
 }
 
 function $1433($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1338($0_1 | 0, $1_1 | 0) | 0;
  $1687($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 15096;
  return $0_1 | 0;
 }
 
 function $1434() {
  label$1 : {
   if ((HEAPU8[(0 + 19476 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1867(19476 | 0) | 0)) {
    break label$1
   }
   $1437() | 0;
   HEAP32[(0 + 19472 | 0) >> 2] = 19468;
   $1875(19476 | 0);
  }
  return HEAP32[(0 + 19472 | 0) >> 2] | 0 | 0;
 }
 
 function $1435($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $1436($0_1) {
  $0_1 = $0_1 | 0;
  $1438($0_1 + 4 | 0 | 0) | 0;
 }
 
 function $1437() {
  $1459();
  HEAP32[(0 + 19468 | 0) >> 2] = 21088;
  return 19468 | 0;
 }
 
 function $1438($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $1439($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1456($0_1 | 0, $1_1 | 0) | 0) {
    break label$1
   }
   $1457();
   abort();
  }
  return HEAP32[($1458($0_1 + 16 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1440($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1442($0_1 | 0, $2_1 + 12 | 0 | 0, $2_1 + 8 | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1441($0_1) {
  $0_1 = $0_1 | 0;
  $1446($0_1 | 0);
  return $0_1 | 0;
 }
 
 function $1442($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1691($0_1 | 0, $1690($1_1 | 0) | 0 | 0) | 0;
  $341($2_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1443($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = $1401($0_1 | 0) | 0;
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $1453($0_1 | 0, $1_1 - $2_1 | 0 | 0);
   return;
  }
  label$2 : {
   if ($2_1 >>> 0 <= $1_1 >>> 0) {
    break label$2
   }
   $1454($0_1 | 0, (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0);
  }
 }
 
 function $1444($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = $1449($0_1 + 4 | 0 | 0) | 0;
   if (($1_1 | 0) != (-1 | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1);
  }
  return ($1_1 | 0) == (-1 | 0) | 0;
 }
 
 function $1445($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1455($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1455($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1446($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1455($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1455($0_1 | 0) | 0) >> 2] = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1692($1_1 | 0);
  }
 }
 
 function $1447($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  HEAP32[$0_1 >> 2] = 10496;
  $1_1 = $0_1 + 16 | 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if ($2_1 >>> 0 >= ($1401($1_1 | 0) | 0) >>> 0) {
     break label$1
    }
    label$3 : {
     if (!(HEAP32[($1435($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0)) {
      break label$3
     }
     $1444(HEAP32[($1435($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0 | 0) | 0;
    }
    $2_1 = $2_1 + 1 | 0;
    continue label$2;
   };
  }
  $1835($0_1 + 176 | 0 | 0) | 0;
  $1448($1_1 | 0) | 0;
  $895($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1448($0_1) {
  $0_1 = $0_1 | 0;
  $1450($0_1 | 0);
  $1451($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1449($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + -1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $1450($0_1) {
  $0_1 = $0_1 | 0;
  $1661($0_1 | 0, $1659($0_1 | 0) | 0 | 0, ($1659($0_1 | 0) | 0) + (($1660($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1659($0_1 | 0) | 0) + (($1401($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1659($0_1 | 0) | 0) + (($1660($0_1 | 0) | 0) << 2 | 0) | 0 | 0);
 }
 
 function $1451($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!(HEAP32[$0_1 >> 2] | 0)) {
    break label$1
   }
   $1402($0_1 | 0);
   $1674($1643($0_1 | 0) | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $1668($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1452($0_1) {
  $0_1 = $0_1 | 0;
  $1807($1447($0_1 | 0) | 0 | 0);
 }
 
 function $1453($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ((((HEAP32[($1645($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >> 2 | 0) >>> 0 < $1_1 >>> 0) {
     break label$2
    }
    $1400($0_1 | 0, $1_1 | 0);
    break label$1;
   }
   $3_1 = $1643($0_1 | 0) | 0;
   $3_1 = $1694($2_1 + 8 | 0 | 0, $1688($0_1 | 0, ($1401($0_1 | 0) | 0) + $1_1 | 0 | 0) | 0 | 0, $1401($0_1 | 0) | 0 | 0, $3_1 | 0) | 0;
   $1695($3_1 | 0, $1_1 | 0);
   $1696($0_1 | 0, $3_1 | 0);
   $1697($3_1 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $1454($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $1689($0_1 | 0, $1_1 | 0);
  $2_1 = $1401($0_1 | 0) | 0;
  $1675($0_1 | 0, $1_1 | 0);
  $1403($0_1 | 0, $2_1 | 0);
 }
 
 function $1455($0_1) {
  $0_1 = $0_1 | 0;
  return $1693($0_1 | 0) | 0 | 0;
 }
 
 function $1456($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   $0_1 = $0_1 + 16 | 0;
   if (($1401($0_1 | 0) | 0) >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   $2_1 = (HEAP32[($1458($0_1 | 0, $1_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0);
  }
  return $2_1 | 0;
 }
 
 function $1457() {
  fimport$1();
  abort();
 }
 
 function $1458($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $1459() {
  $1337(21088 | 0, 1 | 0) | 0;
 }
 
 function $1460() {
  $1461(19480 | 0, $1434() | 0 | 0) | 0;
  return 19480 | 0;
 }
 
 function $1461($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $1436($1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1462() {
  label$1 : {
   if ((HEAPU8[(0 + 19488 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1867(19488 | 0) | 0)) {
    break label$1
   }
   $1460() | 0;
   HEAP32[(0 + 19484 | 0) >> 2] = 19480;
   $1875(19488 | 0);
  }
  return HEAP32[(0 + 19484 | 0) >> 2] | 0 | 0;
 }
 
 function $1463($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1462() | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $1436($1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1464($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1473() | 0;
 }
 
 function $1465($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[i64toi32_i32$2 >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[$0_1 >> 2] = $2_1;
  return $0_1 | 0;
 }
 
 function $1466($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (($1469($0_1 | 0) | 0 | 0) == (-1 | 0)) {
    break label$1
   }
   $1471($2_1 | 0, $1470($2_1 + 8 | 0 | 0, $1_1 | 0) | 0 | 0) | 0;
   $1820($0_1 | 0, $2_1 | 0, 70 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1467($0_1) {
  $0_1 = $0_1 | 0;
  $1807($895($0_1 | 0) | 0 | 0);
 }
 
 function $1468($0_1) {
  $0_1 = $0_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1);
 }
 
 function $1469($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1470($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1717($0_1 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1471($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1472($0_1) {
  $0_1 = $0_1 | 0;
  $1718($0_1 | 0);
 }
 
 function $1473() {
  var $0_1 = 0;
  $0_1 = (HEAP32[(0 + 19492 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(0 + 19492 | 0) >> 2] = $0_1;
  return $0_1 | 0;
 }
 
 function $1474($0_1) {
  $0_1 = $0_1 | 0;
  $895($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1475($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 > 127 >>> 0) {
    break label$1
   }
   $3_1 = ((HEAPU16[(($1476() | 0) + ($2_1 << 1 | 0) | 0) >> 1] | 0) & $1_1 | 0 | 0) != (0 | 0);
  }
  return $3_1 | 0;
 }
 
 function $1476() {
  return HEAP32[($881() | 0) >> 2] | 0 | 0;
 }
 
 function $1477($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $4_1 = 0;
    label$3 : {
     if ((HEAP32[$1_1 >> 2] | 0) >>> 0 > 127 >>> 0) {
      break label$3
     }
     $4_1 = HEAPU16[(($1476() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 1 | 0) | 0) >> 1] | 0;
    }
    HEAP16[$3_1 >> 1] = $4_1;
    $3_1 = $3_1 + 2 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1478($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($2_1 | 0) == ($3_1 | 0)) {
      break label$3
     }
     if ((HEAP32[$2_1 >> 2] | 0) >>> 0 > 127 >>> 0) {
      break label$2
     }
     if (!((HEAPU16[(($1476() | 0) + ((HEAP32[$2_1 >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) & $1_1 | 0)) {
      break label$2
     }
     $3_1 = $2_1;
    }
    return $3_1 | 0;
   }
   $2_1 = $2_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $1479($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[$2_1 >> 2] | 0) >>> 0 > 127 >>> 0) {
      break label$3
     }
     if (!((HEAPU16[(($1476() | 0) + ((HEAP32[$2_1 >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) & $1_1 | 0)) {
      break label$3
     }
     $2_1 = $2_1 + 4 | 0;
     continue label$2;
    }
    break label$2;
   };
   $3_1 = $2_1;
  }
  return $3_1 | 0;
 }
 
 function $1480($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 > 127 >>> 0) {
    break label$1
   }
   $1_1 = HEAP32[(($1481() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $1481() {
  return HEAP32[($882() | 0) >> 2] | 0 | 0;
 }
 
 function $1482($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     if ($3_1 >>> 0 > 127 >>> 0) {
      break label$3
     }
     $3_1 = HEAP32[(($1481() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1483($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 > 127 >>> 0) {
    break label$1
   }
   $1_1 = HEAP32[(($1484() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $1484() {
  return HEAP32[($883() | 0) >> 2] | 0 | 0;
 }
 
 function $1485($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     if ($3_1 >>> 0 > 127 >>> 0) {
      break label$3
     }
     $3_1 = HEAP32[(($1484() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1486($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $1487($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    HEAP32[$3_1 >> 2] = HEAP8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1488($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (($1_1 >>> 0 < 128 >>> 0 ? $1_1 : $2_1) << 24 | 0) >> 24 | 0 | 0;
 }
 
 function $1489($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $5_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP8[$4_1 >> 0] = $5_1 >>> 0 < 128 >>> 0 ? $5_1 : $3_1;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1490($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1491($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 10516;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   if (!(HEAPU8[($0_1 + 12 | 0) >> 0] | 0)) {
    break label$1
   }
   $1808($1_1 | 0);
  }
  $895($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1492($0_1) {
  $0_1 = $0_1 | 0;
  $1807($1491($0_1 | 0) | 0 | 0);
 }
 
 function $1493($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1_1 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[(($1481() | 0) + (($1_1 & 255 | 0) << 2 | 0) | 0) >> 2] | 0;
  }
  return ($1_1 << 24 | 0) >> 24 | 0 | 0;
 }
 
 function $1494($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP8[$1_1 >> 0] | 0;
     if (($3_1 | 0) < (0 | 0)) {
      break label$3
     }
     $3_1 = HEAP32[(($1481() | 0) + ((HEAP8[$1_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP8[$1_1 >> 0] = $3_1;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1495($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1_1 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[(($1484() | 0) + (($1_1 & 255 | 0) << 2 | 0) | 0) >> 2] | 0;
  }
  return ($1_1 << 24 | 0) >> 24 | 0 | 0;
 }
 
 function $1496($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP8[$1_1 >> 0] | 0;
     if (($3_1 | 0) < (0 | 0)) {
      break label$3
     }
     $3_1 = HEAP32[(($1484() | 0) + ((HEAP8[$1_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP8[$1_1 >> 0] = $3_1;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1497($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $1498($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1499($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (($1_1 | 0) > (-1 | 0) ? $1_1 : $2_1) | 0;
 }
 
 function $1500($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $5_1 = HEAP8[$1_1 >> 0] | 0;
    HEAP8[$4_1 >> 0] = ($5_1 | 0) > (-1 | 0) ? $5_1 : $3_1;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1501($0_1) {
  $0_1 = $0_1 | 0;
  $895($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1502($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP32[$7_1 >> 2] = $5_1;
  return 3 | 0;
 }
 
 function $1503($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP32[$7_1 >> 2] = $5_1;
  return 3 | 0;
 }
 
 function $1504($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $1505($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1506($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1507($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $3_1 - $2_1 | 0;
  $3_1 = HEAP32[($178($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $1508($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1509($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1510($0_1) {
  $0_1 = $0_1 | 0;
  $1807($1336($0_1 | 0) | 0 | 0);
 }
 
 function $1511($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $9_1 = $2_1;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (($9_1 | 0) != ($3_1 | 0)) {
      break label$3
     }
     $9_1 = $3_1;
     break label$1;
    }
    if (!(HEAP32[$9_1 >> 2] | 0)) {
     break label$1
    }
    $9_1 = $9_1 + 4 | 0;
    continue label$2;
   };
  }
  HEAP32[$7_1 >> 2] = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  label$4 : while (1) {
   label$5 : {
    label$6 : {
     label$7 : {
      if (($5_1 | 0) == ($6_1 | 0)) {
       break label$7
      }
      if (($2_1 | 0) == ($3_1 | 0)) {
       break label$7
      }
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($8_1 + 8 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
      $10_1 = 1;
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           $11_1 = $1512($5_1 | 0, $4_1 | 0, ($9_1 - $2_1 | 0) >> 2 | 0 | 0, $6_1 - $5_1 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
           switch ($11_1 + 1 | 0 | 0) {
           case 0:
            break label$12;
           case 1:
            break label$6;
           default:
            break label$11;
           };
          }
          HEAP32[$7_1 >> 2] = $5_1;
          label$13 : {
           label$14 : while (1) {
            if (($2_1 | 0) == (HEAP32[$4_1 >> 2] | 0 | 0)) {
             break label$13
            }
            $9_1 = $1513($5_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, $8_1 + 8 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
            if (($9_1 | 0) == (-1 | 0)) {
             break label$13
            }
            $5_1 = (HEAP32[$7_1 >> 2] | 0) + $9_1 | 0;
            HEAP32[$7_1 >> 2] = $5_1;
            $2_1 = $2_1 + 4 | 0;
            continue label$14;
           };
          }
          HEAP32[$4_1 >> 2] = $2_1;
          break label$10;
         }
         $5_1 = (HEAP32[$7_1 >> 2] | 0) + $11_1 | 0;
         HEAP32[$7_1 >> 2] = $5_1;
         if (($5_1 | 0) == ($6_1 | 0)) {
          break label$8
         }
         label$15 : {
          if (($9_1 | 0) != ($3_1 | 0)) {
           break label$15
          }
          $2_1 = HEAP32[$4_1 >> 2] | 0;
          $9_1 = $3_1;
          continue label$4;
         }
         $9_1 = $1513($8_1 + 4 | 0 | 0, 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
         if (($9_1 | 0) != (-1 | 0)) {
          break label$9
         }
        }
        $10_1 = 2;
        break label$6;
       }
       $2_1 = $8_1 + 4 | 0;
       label$16 : {
        if ($9_1 >>> 0 <= ($6_1 - (HEAP32[$7_1 >> 2] | 0) | 0) >>> 0) {
         break label$16
        }
        $10_1 = 1;
        break label$6;
       }
       label$17 : {
        label$18 : while (1) {
         if (!$9_1) {
          break label$17
         }
         $5_1 = HEAPU8[$2_1 >> 0] | 0;
         $10_1 = HEAP32[$7_1 >> 2] | 0;
         HEAP32[$7_1 >> 2] = $10_1 + 1 | 0;
         HEAP8[$10_1 >> 0] = $5_1;
         $9_1 = $9_1 + -1 | 0;
         $2_1 = $2_1 + 1 | 0;
         continue label$18;
        };
       }
       $2_1 = (HEAP32[$4_1 >> 2] | 0) + 4 | 0;
       HEAP32[$4_1 >> 2] = $2_1;
       $9_1 = $2_1;
       label$19 : while (1) {
        label$20 : {
         if (($9_1 | 0) != ($3_1 | 0)) {
          break label$20
         }
         $9_1 = $3_1;
         break label$5;
        }
        if (!(HEAP32[$9_1 >> 2] | 0)) {
         break label$5
        }
        $9_1 = $9_1 + 4 | 0;
        continue label$19;
       };
      }
      $2_1 = HEAP32[$4_1 >> 2] | 0;
     }
     $10_1 = ($2_1 | 0) != ($3_1 | 0);
    }
    global$0 = $8_1 + 16 | 0;
    return $10_1 | 0;
   }
   $5_1 = HEAP32[$7_1 >> 2] | 0;
   continue label$4;
  };
 }
 
 function $1512($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
  $5_1 = $961($6_1 + 8 | 0 | 0, $6_1 + 12 | 0 | 0) | 0;
  $0_1 = $885($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $962($5_1 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1513($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $961($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $698($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $962($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1514($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $8_1 = 0, $10_1 = 0, i64toi32_i32$1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $9_1 = $2_1;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (($9_1 | 0) != ($3_1 | 0)) {
      break label$3
     }
     $9_1 = $3_1;
     break label$1;
    }
    if (!(HEAPU8[$9_1 >> 0] | 0)) {
     break label$1
    }
    $9_1 = $9_1 + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[$7_1 >> 2] = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  label$4 : while (1) {
   label$5 : {
    label$6 : {
     label$7 : {
      if (($5_1 | 0) == ($6_1 | 0)) {
       break label$7
      }
      if (($2_1 | 0) == ($3_1 | 0)) {
       break label$7
      }
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($8_1 + 8 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           $10_1 = $1515($5_1 | 0, $4_1 | 0, $9_1 - $2_1 | 0 | 0, ($6_1 - $5_1 | 0) >> 2 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
           if (($10_1 | 0) != (-1 | 0)) {
            break label$12
           }
           label$13 : {
            label$14 : while (1) {
             HEAP32[$7_1 >> 2] = $5_1;
             if (($2_1 | 0) == (HEAP32[$4_1 >> 2] | 0 | 0)) {
              break label$13
             }
             $6_1 = 1;
             label$15 : {
              label$16 : {
               label$17 : {
                $5_1 = $1516($5_1 | 0, $2_1 | 0, $9_1 - $2_1 | 0 | 0, $8_1 + 8 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
                switch ($5_1 + 2 | 0 | 0) {
                case 2:
                 break label$15;
                case 1:
                 break label$17;
                case 0:
                 break label$9;
                default:
                 break label$16;
                };
               }
               HEAP32[$4_1 >> 2] = $2_1;
               break label$11;
              }
              $6_1 = $5_1;
             }
             $2_1 = $2_1 + $6_1 | 0;
             $5_1 = (HEAP32[$7_1 >> 2] | 0) + 4 | 0;
             continue label$14;
            };
           }
           HEAP32[$4_1 >> 2] = $2_1;
           break label$7;
          }
          $5_1 = (HEAP32[$7_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0;
          HEAP32[$7_1 >> 2] = $5_1;
          if (($5_1 | 0) == ($6_1 | 0)) {
           break label$8
          }
          $2_1 = HEAP32[$4_1 >> 2] | 0;
          label$18 : {
           if (($9_1 | 0) != ($3_1 | 0)) {
            break label$18
           }
           $9_1 = $3_1;
           continue label$4;
          }
          if (!($1516($5_1 | 0, $2_1 | 0, 1 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0)) {
           break label$10
          }
         }
         $9_1 = 2;
         break label$6;
        }
        HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + 4 | 0;
        $2_1 = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
        HEAP32[$4_1 >> 2] = $2_1;
        $9_1 = $2_1;
        label$19 : while (1) {
         label$20 : {
          if (($9_1 | 0) != ($3_1 | 0)) {
           break label$20
          }
          $9_1 = $3_1;
          break label$5;
         }
         if (!(HEAPU8[$9_1 >> 0] | 0)) {
          break label$5
         }
         $9_1 = $9_1 + 1 | 0;
         continue label$19;
        };
       }
       HEAP32[$4_1 >> 2] = $2_1;
       $9_1 = 1;
       break label$6;
      }
      $2_1 = HEAP32[$4_1 >> 2] | 0;
     }
     $9_1 = ($2_1 | 0) != ($3_1 | 0);
    }
    global$0 = $8_1 + 16 | 0;
    return $9_1 | 0;
   }
   $5_1 = HEAP32[$7_1 >> 2] | 0;
   continue label$4;
  };
 }
 
 function $1515($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
  $5_1 = $961($6_1 + 8 | 0 | 0, $6_1 + 12 | 0 | 0) | 0;
  $0_1 = $887($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $962($5_1 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1516($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  $4_1 = $961($5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  $0_1 = $728($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $962($4_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1517($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  $2_1 = 2;
  label$1 : {
   $1_1 = $1513($5_1 + 12 | 0 | 0, 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   if (($1_1 + 1 | 0) >>> 0 < 2 >>> 0) {
    break label$1
   }
   $2_1 = 1;
   $1_1 = $1_1 + -1 | 0;
   if ($1_1 >>> 0 > ($3_1 - (HEAP32[$4_1 >> 2] | 0) | 0) >>> 0) {
    break label$1
   }
   $2_1 = $5_1 + 12 | 0;
   label$2 : while (1) {
    label$3 : {
     if ($1_1) {
      break label$3
     }
     $2_1 = 0;
     break label$1;
    }
    $0_1 = HEAPU8[$2_1 >> 0] | 0;
    $3_1 = HEAP32[$4_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = $0_1;
    $1_1 = $1_1 + -1 | 0;
    $2_1 = $2_1 + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $5_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1518($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = -1;
  label$1 : {
   label$2 : {
    if ($1519(0 | 0, 0 | 0, 4 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
     break label$2
    }
    $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if ($0_1) {
     break label$1
    }
    $1_1 = 1;
   }
   return $1_1 | 0;
  }
  return ($1520($0_1 | 0) | 0 | 0) == (1 | 0) | 0;
 }
 
 function $1519($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $961($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $888($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $962($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1520($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $961($1_1 + 8 | 0 | 0, $1_1 + 12 | 0 | 0) | 0;
  $2_1 = $889() | 0;
  $962($0_1 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1521($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1522($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $5_1 = 0;
  $6_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$1
    }
    if ($6_1 >>> 0 >= $4_1 >>> 0) {
     break label$1
    }
    $7_1 = 1;
    label$3 : {
     label$4 : {
      $8_1 = $1523($2_1 | 0, $3_1 - $2_1 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
      switch ($8_1 + 2 | 0 | 0) {
      case 0:
      case 1:
       break label$1;
      case 2:
       break label$3;
      default:
       break label$4;
      };
     }
     $7_1 = $8_1;
    }
    $6_1 = $6_1 + 1 | 0;
    $5_1 = $7_1 + $5_1 | 0;
    $2_1 = $2_1 + $7_1 | 0;
    continue label$2;
   };
  }
  return $5_1 | 0;
 }
 
 function $1523($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $961($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $890($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $962($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1524($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($0_1) {
    break label$1
   }
   return 1 | 0;
  }
  return $1520($0_1 | 0) | 0 | 0;
 }
 
 function $1525($0_1) {
  $0_1 = $0_1 | 0;
  $895($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1526($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $5_1 = $1527($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1527($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!($7_1 & 2 | 0)) {
     break label$2
    }
    $0_1 = 1;
    if (($4_1 - $3_1 | 0 | 0) < (3 | 0)) {
     break label$1
    }
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 239;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 187;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 191;
   }
   $7_1 = HEAP32[$2_1 >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     label$5 : {
      if ($7_1 >>> 0 < $1_1 >>> 0) {
       break label$5
      }
      $0_1 = 0;
      break label$1;
     }
     $0_1 = 2;
     $3_1 = HEAPU16[$7_1 >> 1] | 0;
     if ($3_1 >>> 0 > $6_1 >>> 0) {
      break label$1
     }
     label$6 : {
      label$7 : {
       label$8 : {
        if ($3_1 >>> 0 > 127 >>> 0) {
         break label$8
        }
        $0_1 = 1;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $7_1 | 0 | 0) < (1 | 0)) {
         break label$1
        }
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1;
        break label$7;
       }
       label$9 : {
        if ($3_1 >>> 0 > 2047 >>> 0) {
         break label$9
        }
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $7_1 | 0 | 0) < (2 | 0)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1 >>> 6 | 0 | 192 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
        break label$7;
       }
       label$10 : {
        if ($3_1 >>> 0 > 55295 >>> 0) {
         break label$10
        }
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $7_1 | 0 | 0) < (3 | 0)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
        break label$7;
       }
       label$11 : {
        if ($3_1 >>> 0 > 56319 >>> 0) {
         break label$11
        }
        $0_1 = 1;
        if (($1_1 - $7_1 | 0 | 0) < (4 | 0)) {
         break label$1
        }
        $8_1 = HEAPU16[($7_1 + 2 | 0) >> 1] | 0;
        if (($8_1 & 64512 | 0 | 0) != (56320 | 0)) {
         break label$6
        }
        if (($4_1 - (HEAP32[$5_1 >> 2] | 0) | 0 | 0) < (4 | 0)) {
         break label$1
        }
        $0_1 = $3_1 & 960 | 0;
        if ((($0_1 << 10 | 0 | (($3_1 << 10 | 0) & 64512 | 0) | 0 | ($8_1 & 1023 | 0) | 0) + 65536 | 0) >>> 0 > $6_1 >>> 0) {
         break label$6
        }
        HEAP32[$2_1 >> 2] = $7_1 + 2 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        $0_1 = ($0_1 >>> 6 | 0) + 1 | 0;
        HEAP8[$7_1 >> 0] = $0_1 >>> 2 | 0 | 240 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = ($0_1 << 4 | 0) & 48 | 0 | (($3_1 >>> 2 | 0) & 15 | 0) | 0 | 128 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = ($8_1 >>> 6 | 0) & 15 | 0 | (($3_1 << 4 | 0) & 48 | 0) | 0 | 128 | 0;
        $3_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
        HEAP8[$3_1 >> 0] = $8_1 & 63 | 0 | 128 | 0;
        break label$7;
       }
       if ($3_1 >>> 0 < 57344 >>> 0) {
        break label$1
       }
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $7_1 | 0 | 0) < (3 | 0)) {
        break label$3
       }
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
      }
      $7_1 = (HEAP32[$2_1 >> 2] | 0) + 2 | 0;
      HEAP32[$2_1 >> 2] = $7_1;
      continue label$4;
     }
     break label$4;
    };
    return 2 | 0;
   }
   return 1 | 0;
  }
  return $0_1 | 0;
 }
 
 function $1528($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $5_1 = $1529($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1529($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $184_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   if (!($7_1 & 4 | 0)) {
    break label$1
   }
   $7_1 = HEAP32[$2_1 >> 2] | 0;
   if (($1_1 - $7_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   if ((HEAPU8[$7_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   if ((HEAPU8[($7_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   if ((HEAPU8[($7_1 + 2 | 0) >> 0] | 0 | 0) != (191 | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = $7_1 + 3 | 0;
   $3_1 = HEAP32[$5_1 >> 2] | 0;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : while (1) {
       $0_1 = HEAP32[$2_1 >> 2] | 0;
       if ($0_1 >>> 0 >= $1_1 >>> 0) {
        break label$5
       }
       if ($3_1 >>> 0 >= $4_1 >>> 0) {
        break label$5
       }
       $8_1 = 2;
       $7_1 = HEAPU8[$0_1 >> 0] | 0;
       if ($7_1 >>> 0 > $6_1 >>> 0) {
        break label$2
       }
       label$7 : {
        label$8 : {
         if ((($7_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0)) {
          break label$8
         }
         HEAP16[$3_1 >> 1] = $7_1;
         $7_1 = $0_1 + 1 | 0;
         break label$7;
        }
        if ($7_1 >>> 0 < 194 >>> 0) {
         break label$2
        }
        label$9 : {
         if ($7_1 >>> 0 > 223 >>> 0) {
          break label$9
         }
         if (($1_1 - $0_1 | 0 | 0) < (2 | 0)) {
          break label$3
         }
         $9_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
         if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$4
         }
         $8_1 = 2;
         $7_1 = $9_1 & 63 | 0 | (($7_1 << 6 | 0) & 1984 | 0) | 0;
         if ($7_1 >>> 0 > $6_1 >>> 0) {
          break label$4
         }
         HEAP16[$3_1 >> 1] = $7_1;
         $7_1 = $0_1 + 2 | 0;
         break label$7;
        }
        label$10 : {
         if ($7_1 >>> 0 > 239 >>> 0) {
          break label$10
         }
         if (($1_1 - $0_1 | 0 | 0) < (3 | 0)) {
          break label$3
         }
         $10_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
         $9_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
         label$11 : {
          label$12 : {
           label$13 : {
            if (($7_1 | 0) == (237 | 0)) {
             break label$13
            }
            if (($7_1 | 0) != (224 | 0)) {
             break label$12
            }
            if (($9_1 & 224 | 0 | 0) == (160 | 0)) {
             break label$11
            }
            break label$4;
           }
           if (($9_1 & 224 | 0 | 0) == (128 | 0)) {
            break label$11
           }
           break label$4;
          }
          if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
           break label$4
          }
         }
         if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$4
         }
         $8_1 = 2;
         $7_1 = ($9_1 & 63 | 0) << 6 | 0 | ($7_1 << 12 | 0) | 0 | ($10_1 & 63 | 0) | 0;
         if (($7_1 & 65535 | 0) >>> 0 > $6_1 >>> 0) {
          break label$4
         }
         HEAP16[$3_1 >> 1] = $7_1;
         $7_1 = $0_1 + 3 | 0;
         break label$7;
        }
        if ($7_1 >>> 0 > 244 >>> 0) {
         break label$2
        }
        $8_1 = 1;
        if (($1_1 - $0_1 | 0 | 0) < (4 | 0)) {
         break label$4
        }
        $10_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0;
        $9_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
        $0_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
        label$14 : {
         label$15 : {
          switch ($7_1 + -240 | 0 | 0) {
          case 0:
           if ((($0_1 + 112 | 0) & 255 | 0) >>> 0 >= 48 >>> 0) {
            break label$2
           }
           break label$14;
          case 4:
           if (($0_1 & 240 | 0 | 0) != (128 | 0)) {
            break label$2
           }
           break label$14;
          default:
           break label$15;
          };
         }
         if (($0_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$2
         }
        }
        if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
        if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
        if (($4_1 - $3_1 | 0 | 0) < (4 | 0)) {
         break label$4
        }
        $8_1 = 2;
        $7_1 = $7_1 & 7 | 0;
        $11_1 = $9_1 << 6 | 0;
        $10_1 = $10_1 & 63 | 0;
        if ((($0_1 << 12 | 0) & 258048 | 0 | ($7_1 << 18 | 0) | 0 | ($11_1 & 4032 | 0) | 0 | $10_1 | 0) >>> 0 > $6_1 >>> 0) {
         break label$4
        }
        $184_1 = $7_1 << 8 | 0;
        $7_1 = $0_1 << 2 | 0;
        HEAP16[$3_1 >> 1] = ($184_1 | ($7_1 & 192 | 0) | 0 | ($7_1 & 60 | 0) | 0 | (($9_1 >>> 4 | 0) & 3 | 0) | 0) + 16320 | 0 | 55296 | 0;
        HEAP32[$5_1 >> 2] = $3_1 + 2 | 0;
        HEAP16[($3_1 + 2 | 0) >> 1] = $11_1 & 960 | 0 | $10_1 | 0 | 56320 | 0;
        $7_1 = (HEAP32[$2_1 >> 2] | 0) + 4 | 0;
       }
       HEAP32[$2_1 >> 2] = $7_1;
       $3_1 = (HEAP32[$5_1 >> 2] | 0) + 2 | 0;
       HEAP32[$5_1 >> 2] = $3_1;
       continue label$6;
      };
     }
     $8_1 = $0_1 >>> 0 < $1_1 >>> 0;
    }
    return $8_1 | 0;
   }
   return 1 | 0;
  }
  return 2 | 0;
 }
 
 function $1530($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $1531($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1532($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1533($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1534($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1534($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0;
  $5_1 = $0_1;
  label$1 : {
   if (!($4_1 & 4 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if ((HEAPU8[$5_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   $5_1 = (HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | 0) == (191 | 0) ? $0_1 + 3 | 0 : $0_1;
  }
  $6_1 = 0;
  label$2 : {
   label$3 : while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    if ($5_1 >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    $4_1 = HEAPU8[$5_1 >> 0] | 0;
    if ($4_1 >>> 0 > $3_1 >>> 0) {
     break label$2
    }
    label$4 : {
     label$5 : {
      if ((($4_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0)) {
       break label$5
      }
      $5_1 = $5_1 + 1 | 0;
      break label$4;
     }
     if ($4_1 >>> 0 < 194 >>> 0) {
      break label$2
     }
     label$6 : {
      if ($4_1 >>> 0 > 223 >>> 0) {
       break label$6
      }
      if (($1_1 - $5_1 | 0 | 0) < (2 | 0)) {
       break label$2
      }
      $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
      if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
       break label$2
      }
      if (($7_1 & 63 | 0 | (($4_1 << 6 | 0) & 1984 | 0) | 0) >>> 0 > $3_1 >>> 0) {
       break label$2
      }
      $5_1 = $5_1 + 2 | 0;
      break label$4;
     }
     label$7 : {
      label$8 : {
       label$9 : {
        if ($4_1 >>> 0 > 239 >>> 0) {
         break label$9
        }
        if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
         break label$2
        }
        $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
        $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        if (($4_1 | 0) == (237 | 0)) {
         break label$8
        }
        label$10 : {
         if (($4_1 | 0) != (224 | 0)) {
          break label$10
         }
         if (($7_1 & 224 | 0 | 0) == (160 | 0)) {
          break label$7
         }
         break label$2;
        }
        if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
        break label$7;
       }
       if ($4_1 >>> 0 > 244 >>> 0) {
        break label$2
       }
       if (($2_1 - $6_1 | 0) >>> 0 < 2 >>> 0) {
        break label$2
       }
       if (($1_1 - $5_1 | 0 | 0) < (4 | 0)) {
        break label$2
       }
       $9_1 = HEAPU8[($5_1 + 3 | 0) >> 0] | 0;
       $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
       $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
       label$11 : {
        label$12 : {
         switch ($4_1 + -240 | 0 | 0) {
         case 0:
          if ((($7_1 + 112 | 0) & 255 | 0) >>> 0 < 48 >>> 0) {
           break label$11
          }
          break label$2;
         case 4:
          if (($7_1 & 240 | 0 | 0) == (128 | 0)) {
           break label$11
          }
          break label$2;
         default:
          break label$12;
         };
        }
        if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
       }
       if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       if ((($7_1 & 63 | 0) << 12 | 0 | (($4_1 << 18 | 0) & 1835008 | 0) | 0 | (($8_1 << 6 | 0) & 4032 | 0) | 0 | ($9_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
        break label$2
       }
       $5_1 = $5_1 + 4 | 0;
       $6_1 = $6_1 + 1 | 0;
       break label$4;
      }
      if (($7_1 & 224 | 0 | 0) != (128 | 0)) {
       break label$2
      }
     }
     if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
      break label$2
     }
     if ((($7_1 & 63 | 0) << 6 | 0 | (($4_1 << 12 | 0) & 61440 | 0) | 0 | ($8_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
      break label$2
     }
     $5_1 = $5_1 + 3 | 0;
    }
    $6_1 = $6_1 + 1 | 0;
    continue label$3;
   };
  }
  return $5_1 - $0_1 | 0 | 0;
 }
 
 function $1535($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $1536($0_1) {
  $0_1 = $0_1 | 0;
  $895($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1537($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $5_1 = $1538($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1538($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!($7_1 & 2 | 0)) {
     break label$2
    }
    $7_1 = 1;
    if (($4_1 - $3_1 | 0 | 0) < (3 | 0)) {
     break label$1
    }
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 239;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 187;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 191;
   }
   $3_1 = HEAP32[$2_1 >> 2] | 0;
   label$3 : while (1) {
    label$4 : {
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$4
     }
     $7_1 = 0;
     break label$1;
    }
    $7_1 = 2;
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ($3_1 >>> 0 > $6_1 >>> 0) {
     break label$1
    }
    if (($3_1 & -2048 | 0 | 0) == (55296 | 0)) {
     break label$1
    }
    label$5 : {
     label$6 : {
      label$7 : {
       if ($3_1 >>> 0 > 127 >>> 0) {
        break label$7
       }
       $7_1 = 1;
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $0_1 | 0 | 0) < (1 | 0)) {
        break label$1
       }
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = $3_1;
       break label$6;
      }
      label$8 : {
       if ($3_1 >>> 0 > 2047 >>> 0) {
        break label$8
       }
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $7_1 | 0 | 0) < (2 | 0)) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 >>> 6 | 0 | 192 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
       break label$6;
      }
      $7_1 = HEAP32[$5_1 >> 2] | 0;
      $0_1 = $4_1 - $7_1 | 0;
      label$9 : {
       if ($3_1 >>> 0 > 65535 >>> 0) {
        break label$9
       }
       if (($0_1 | 0) < (3 | 0)) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
       break label$6;
      }
      if (($0_1 | 0) < (4 | 0)) {
       break label$5
      }
      HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
      HEAP8[$7_1 >> 0] = $3_1 >>> 18 | 0 | 240 | 0;
      $7_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
      HEAP8[$7_1 >> 0] = ($3_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      $7_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
      HEAP8[$7_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      $7_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
      HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
     }
     $3_1 = (HEAP32[$2_1 >> 2] | 0) + 4 | 0;
     HEAP32[$2_1 >> 2] = $3_1;
     continue label$3;
    }
    break label$3;
   };
   return 1 | 0;
  }
  return $7_1 | 0;
 }
 
 function $1539($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $5_1 = $1540($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1540($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $8_1 = 0, $11_1 = 0, $9_1 = 0, $12_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   if (!($7_1 & 4 | 0)) {
    break label$1
   }
   $7_1 = HEAP32[$2_1 >> 2] | 0;
   if (($1_1 - $7_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   if ((HEAPU8[$7_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   if ((HEAPU8[($7_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   if ((HEAPU8[($7_1 + 2 | 0) >> 0] | 0 | 0) != (191 | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = $7_1 + 3 | 0;
   $3_1 = HEAP32[$5_1 >> 2] | 0;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      $0_1 = HEAP32[$2_1 >> 2] | 0;
      if ($0_1 >>> 0 >= $1_1 >>> 0) {
       break label$4
      }
      if ($3_1 >>> 0 >= $4_1 >>> 0) {
       break label$4
      }
      $8_1 = HEAP8[$0_1 >> 0] | 0;
      $7_1 = $8_1 & 255 | 0;
      label$6 : {
       label$7 : {
        if (($8_1 | 0) < (0 | 0)) {
         break label$7
        }
        label$8 : {
         if ($7_1 >>> 0 > $6_1 >>> 0) {
          break label$8
         }
         $8_1 = 1;
         break label$6;
        }
        return 2 | 0;
       }
       $9_1 = 2;
       if ($7_1 >>> 0 < 194 >>> 0) {
        break label$3
       }
       label$9 : {
        if ($7_1 >>> 0 > 223 >>> 0) {
         break label$9
        }
        if (($1_1 - $0_1 | 0 | 0) < (2 | 0)) {
         break label$2
        }
        $10_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
        if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$3
        }
        $8_1 = 2;
        $9_1 = 2;
        $7_1 = $10_1 & 63 | 0 | (($7_1 << 6 | 0) & 1984 | 0) | 0;
        if ($7_1 >>> 0 <= $6_1 >>> 0) {
         break label$6
        }
        break label$3;
       }
       label$10 : {
        if ($7_1 >>> 0 > 239 >>> 0) {
         break label$10
        }
        if (($1_1 - $0_1 | 0 | 0) < (3 | 0)) {
         break label$2
        }
        $11_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
        $10_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
        label$11 : {
         label$12 : {
          label$13 : {
           if (($7_1 | 0) == (237 | 0)) {
            break label$13
           }
           if (($7_1 | 0) != (224 | 0)) {
            break label$12
           }
           if (($10_1 & 224 | 0 | 0) == (160 | 0)) {
            break label$11
           }
           break label$3;
          }
          if (($10_1 & 224 | 0 | 0) == (128 | 0)) {
           break label$11
          }
          break label$3;
         }
         if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$3
         }
        }
        if (($11_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$3
        }
        $8_1 = 3;
        $7_1 = ($10_1 & 63 | 0) << 6 | 0 | (($7_1 << 12 | 0) & 61440 | 0) | 0 | ($11_1 & 63 | 0) | 0;
        if ($7_1 >>> 0 <= $6_1 >>> 0) {
         break label$6
        }
        break label$3;
       }
       if ($7_1 >>> 0 > 244 >>> 0) {
        break label$3
       }
       if (($1_1 - $0_1 | 0 | 0) < (4 | 0)) {
        break label$2
       }
       $12_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0;
       $11_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
       $10_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
       label$14 : {
        label$15 : {
         switch ($7_1 + -240 | 0 | 0) {
         case 0:
          if ((($10_1 + 112 | 0) & 255 | 0) >>> 0 < 48 >>> 0) {
           break label$14
          }
          break label$3;
         case 4:
          if (($10_1 & 240 | 0 | 0) == (128 | 0)) {
           break label$14
          }
          break label$3;
         default:
          break label$15;
         };
        }
        if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$3
        }
       }
       if (($11_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$3
       }
       if (($12_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$3
       }
       $8_1 = 4;
       $7_1 = ($10_1 & 63 | 0) << 12 | 0 | (($7_1 << 18 | 0) & 1835008 | 0) | 0 | (($11_1 << 6 | 0) & 4032 | 0) | 0 | ($12_1 & 63 | 0) | 0;
       if ($7_1 >>> 0 > $6_1 >>> 0) {
        break label$3
       }
      }
      HEAP32[$3_1 >> 2] = $7_1;
      HEAP32[$2_1 >> 2] = $0_1 + $8_1 | 0;
      $3_1 = (HEAP32[$5_1 >> 2] | 0) + 4 | 0;
      HEAP32[$5_1 >> 2] = $3_1;
      continue label$5;
     };
    }
    $9_1 = $0_1 >>> 0 < $1_1 >>> 0;
   }
   return $9_1 | 0;
  }
  return 1 | 0;
 }
 
 function $1541($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $1542($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1543($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1544($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1545($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1545($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $6_1 = 0, $10_1 = 0;
  $5_1 = $0_1;
  label$1 : {
   if (!($4_1 & 4 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if ((HEAPU8[$5_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   $5_1 = (HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | 0) == (191 | 0) ? $0_1 + 3 | 0 : $0_1;
  }
  $6_1 = 0;
  label$2 : {
   label$3 : while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    if ($5_1 >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    $7_1 = HEAP8[$5_1 >> 0] | 0;
    $4_1 = $7_1 & 255 | 0;
    label$4 : {
     label$5 : {
      if (($7_1 | 0) < (0 | 0)) {
       break label$5
      }
      $7_1 = 1;
      if ($4_1 >>> 0 <= $3_1 >>> 0) {
       break label$4
      }
      break label$2;
     }
     if ($4_1 >>> 0 < 194 >>> 0) {
      break label$2
     }
     label$6 : {
      if ($4_1 >>> 0 > 223 >>> 0) {
       break label$6
      }
      if (($1_1 - $5_1 | 0 | 0) < (2 | 0)) {
       break label$2
      }
      $8_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
      if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
       break label$2
      }
      $7_1 = 2;
      if (($8_1 & 63 | 0 | (($4_1 << 6 | 0) & 1984 | 0) | 0) >>> 0 <= $3_1 >>> 0) {
       break label$4
      }
      break label$2;
     }
     label$7 : {
      label$8 : {
       label$9 : {
        if ($4_1 >>> 0 > 239 >>> 0) {
         break label$9
        }
        if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
         break label$2
        }
        $9_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
        $8_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        if (($4_1 | 0) == (237 | 0)) {
         break label$8
        }
        label$10 : {
         if (($4_1 | 0) != (224 | 0)) {
          break label$10
         }
         if (($8_1 & 224 | 0 | 0) == (160 | 0)) {
          break label$7
         }
         break label$2;
        }
        if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
        break label$7;
       }
       if ($4_1 >>> 0 > 244 >>> 0) {
        break label$2
       }
       if (($1_1 - $5_1 | 0 | 0) < (4 | 0)) {
        break label$2
       }
       $10_1 = HEAPU8[($5_1 + 3 | 0) >> 0] | 0;
       $9_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
       $8_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
       label$11 : {
        label$12 : {
         switch ($4_1 + -240 | 0 | 0) {
         case 0:
          if ((($8_1 + 112 | 0) & 255 | 0) >>> 0 < 48 >>> 0) {
           break label$11
          }
          break label$2;
         case 4:
          if (($8_1 & 240 | 0 | 0) == (128 | 0)) {
           break label$11
          }
          break label$2;
         default:
          break label$12;
         };
        }
        if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
       }
       if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       $7_1 = 4;
       if ((($8_1 & 63 | 0) << 12 | 0 | (($4_1 << 18 | 0) & 1835008 | 0) | 0 | (($9_1 << 6 | 0) & 4032 | 0) | 0 | ($10_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
        break label$2
       }
       break label$4;
      }
      if (($8_1 & 224 | 0 | 0) != (128 | 0)) {
       break label$2
      }
     }
     if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
      break label$2
     }
     $7_1 = 3;
     if ((($8_1 & 63 | 0) << 6 | 0 | (($4_1 << 12 | 0) & 61440 | 0) | 0 | ($9_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
      break label$2
     }
    }
    $6_1 = $6_1 + 1 | 0;
    $5_1 = $5_1 + $7_1 | 0;
    continue label$3;
   };
  }
  return $5_1 - $0_1 | 0 | 0;
 }
 
 function $1546($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $1547($0_1) {
  $0_1 = $0_1 | 0;
  $895($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1548($0_1) {
  $0_1 = $0_1 | 0;
  $895($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1549($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 10616;
  $1835($0_1 + 12 | 0 | 0) | 0;
  $895($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1550($0_1) {
  $0_1 = $0_1 | 0;
  $1807($1549($0_1 | 0) | 0 | 0);
 }
 
 function $1551($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 10656;
  $1835($0_1 + 16 | 0 | 0) | 0;
  $895($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1552($0_1) {
  $0_1 = $0_1 | 0;
  $1807($1551($0_1 | 0) | 0 | 0);
 }
 
 function $1553($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[($0_1 + 8 | 0) >> 0] | 0 | 0;
 }
 
 function $1554($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $1555($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[($0_1 + 9 | 0) >> 0] | 0 | 0;
 }
 
 function $1556($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $1557($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1828($0_1 | 0, $1_1 + 12 | 0 | 0) | 0;
 }
 
 function $1558($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1828($0_1 | 0, $1_1 + 16 | 0 | 0) | 0;
 }
 
 function $1559($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $21($0_1 | 0, 10688 | 0) | 0;
 }
 
 function $1560($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1561($0_1 | 0, 10696 | 0) | 0;
 }
 
 function $1561($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $907($0_1 | 0, $2_1 + 8 | 0 | 0, $2_1 | 0) | 0;
  $1848($0_1 | 0, $1_1 | 0, $1562($1_1 | 0) | 0 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1562($0_1) {
  $0_1 = $0_1 | 0;
  return $880($0_1 | 0) | 0 | 0;
 }
 
 function $1563($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $21($0_1 | 0, 10716 | 0) | 0;
 }
 
 function $1564($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1561($0_1 | 0, 10724 | 0) | 0;
 }
 
 function $1565($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -4 | 0;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $1748($0_1 | 0, $1_1 | 0);
    $0_1 = $0_1 + 4 | 0;
    continue label$2;
   };
  }
 }
 
 function $1566($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 19564 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1867(19564 | 0) | 0)) {
    break label$1
   }
   $1567();
   HEAP32[(0 + 19560 | 0) >> 2] = 19744;
   $1875(19564 | 0);
  }
  return HEAP32[(0 + 19560 | 0) >> 2] | 0 | 0;
 }
 
 function $1567() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 19912 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1867(19912 | 0) | 0)) {
    break label$1
   }
   $0_1 = 19744;
   label$2 : while (1) {
    $0_1 = ($41($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (19912 | 0)) {
     continue label$2
    }
    break label$2;
   };
   fimport$0(71 | 0, 0 | 0, 1024 | 0) | 0;
   $1875(19912 | 0);
  }
  $45(19744 | 0, 15176 | 0) | 0;
  $45(19756 | 0, 15183 | 0) | 0;
  $45(19768 | 0, 15190 | 0) | 0;
  $45(19780 | 0, 15198 | 0) | 0;
  $45(19792 | 0, 15208 | 0) | 0;
  $45(19804 | 0, 15217 | 0) | 0;
  $45(19816 | 0, 15224 | 0) | 0;
  $45(19828 | 0, 15233 | 0) | 0;
  $45(19840 | 0, 15237 | 0) | 0;
  $45(19852 | 0, 15241 | 0) | 0;
  $45(19864 | 0, 15245 | 0) | 0;
  $45(19876 | 0, 15249 | 0) | 0;
  $45(19888 | 0, 15253 | 0) | 0;
  $45(19900 | 0, 15257 | 0) | 0;
 }
 
 function $1568($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 19912;
  label$1 : while (1) {
   $1_1 = $1835($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (19744 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1569($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 19572 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1867(19572 | 0) | 0)) {
    break label$1
   }
   $1570();
   HEAP32[(0 + 19568 | 0) >> 2] = 19920;
   $1875(19572 | 0);
  }
  return HEAP32[(0 + 19568 | 0) >> 2] | 0 | 0;
 }
 
 function $1570() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 20088 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1867(20088 | 0) | 0)) {
    break label$1
   }
   $0_1 = 19920;
   label$2 : while (1) {
    $0_1 = ($1160($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (20088 | 0)) {
     continue label$2
    }
    break label$2;
   };
   fimport$0(72 | 0, 0 | 0, 1024 | 0) | 0;
   $1875(20088 | 0);
  }
  $1572(19920 | 0, 15264 | 0) | 0;
  $1572(19932 | 0, 15292 | 0) | 0;
  $1572(19944 | 0, 15320 | 0) | 0;
  $1572(19956 | 0, 15352 | 0) | 0;
  $1572(19968 | 0, 15392 | 0) | 0;
  $1572(19980 | 0, 15428 | 0) | 0;
  $1572(19992 | 0, 15456 | 0) | 0;
  $1572(20004 | 0, 15492 | 0) | 0;
  $1572(20016 | 0, 15508 | 0) | 0;
  $1572(20028 | 0, 15524 | 0) | 0;
  $1572(20040 | 0, 15540 | 0) | 0;
  $1572(20052 | 0, 15556 | 0) | 0;
  $1572(20064 | 0, 15572 | 0) | 0;
  $1572(20076 | 0, 15588 | 0) | 0;
 }
 
 function $1571($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 20088;
  label$1 : while (1) {
   $1_1 = $1849($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (19920 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1572($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1857($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1573($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 19580 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1867(19580 | 0) | 0)) {
    break label$1
   }
   $1574();
   HEAP32[(0 + 19576 | 0) >> 2] = 20096;
   $1875(19580 | 0);
  }
  return HEAP32[(0 + 19576 | 0) >> 2] | 0 | 0;
 }
 
 function $1574() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 20384 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1867(20384 | 0) | 0)) {
    break label$1
   }
   $0_1 = 20096;
   label$2 : while (1) {
    $0_1 = ($41($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (20384 | 0)) {
     continue label$2
    }
    break label$2;
   };
   fimport$0(73 | 0, 0 | 0, 1024 | 0) | 0;
   $1875(20384 | 0);
  }
  $45(20096 | 0, 15604 | 0) | 0;
  $45(20108 | 0, 15612 | 0) | 0;
  $45(20120 | 0, 15621 | 0) | 0;
  $45(20132 | 0, 15627 | 0) | 0;
  $45(20144 | 0, 15633 | 0) | 0;
  $45(20156 | 0, 15637 | 0) | 0;
  $45(20168 | 0, 15642 | 0) | 0;
  $45(20180 | 0, 15647 | 0) | 0;
  $45(20192 | 0, 15654 | 0) | 0;
  $45(20204 | 0, 15664 | 0) | 0;
  $45(20216 | 0, 15672 | 0) | 0;
  $45(20228 | 0, 15681 | 0) | 0;
  $45(20240 | 0, 15690 | 0) | 0;
  $45(20252 | 0, 15694 | 0) | 0;
  $45(20264 | 0, 15698 | 0) | 0;
  $45(20276 | 0, 15702 | 0) | 0;
  $45(20288 | 0, 15633 | 0) | 0;
  $45(20300 | 0, 15706 | 0) | 0;
  $45(20312 | 0, 15710 | 0) | 0;
  $45(20324 | 0, 15714 | 0) | 0;
  $45(20336 | 0, 15718 | 0) | 0;
  $45(20348 | 0, 15722 | 0) | 0;
  $45(20360 | 0, 15726 | 0) | 0;
  $45(20372 | 0, 15730 | 0) | 0;
 }
 
 function $1575($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 20384;
  label$1 : while (1) {
   $1_1 = $1835($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (20096 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1576($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 19588 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1867(19588 | 0) | 0)) {
    break label$1
   }
   $1577();
   HEAP32[(0 + 19584 | 0) >> 2] = 20400;
   $1875(19588 | 0);
  }
  return HEAP32[(0 + 19584 | 0) >> 2] | 0 | 0;
 }
 
 function $1577() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 20688 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1867(20688 | 0) | 0)) {
    break label$1
   }
   $0_1 = 20400;
   label$2 : while (1) {
    $0_1 = ($1160($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (20688 | 0)) {
     continue label$2
    }
    break label$2;
   };
   fimport$0(74 | 0, 0 | 0, 1024 | 0) | 0;
   $1875(20688 | 0);
  }
  $1572(20400 | 0, 15736 | 0) | 0;
  $1572(20412 | 0, 15768 | 0) | 0;
  $1572(20424 | 0, 15804 | 0) | 0;
  $1572(20436 | 0, 15828 | 0) | 0;
  $1572(20448 | 0, 15852 | 0) | 0;
  $1572(20460 | 0, 15868 | 0) | 0;
  $1572(20472 | 0, 15888 | 0) | 0;
  $1572(20484 | 0, 15908 | 0) | 0;
  $1572(20496 | 0, 15936 | 0) | 0;
  $1572(20508 | 0, 15976 | 0) | 0;
  $1572(20520 | 0, 16008 | 0) | 0;
  $1572(20532 | 0, 16044 | 0) | 0;
  $1572(20544 | 0, 16080 | 0) | 0;
  $1572(20556 | 0, 16096 | 0) | 0;
  $1572(20568 | 0, 16112 | 0) | 0;
  $1572(20580 | 0, 16128 | 0) | 0;
  $1572(20592 | 0, 15852 | 0) | 0;
  $1572(20604 | 0, 16144 | 0) | 0;
  $1572(20616 | 0, 16160 | 0) | 0;
  $1572(20628 | 0, 16176 | 0) | 0;
  $1572(20640 | 0, 16192 | 0) | 0;
  $1572(20652 | 0, 16208 | 0) | 0;
  $1572(20664 | 0, 16224 | 0) | 0;
  $1572(20676 | 0, 16240 | 0) | 0;
 }
 
 function $1578($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 20688;
  label$1 : while (1) {
   $1_1 = $1849($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (20400 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1579($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 19596 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1867(19596 | 0) | 0)) {
    break label$1
   }
   $1580();
   HEAP32[(0 + 19592 | 0) >> 2] = 20704;
   $1875(19596 | 0);
  }
  return HEAP32[(0 + 19592 | 0) >> 2] | 0 | 0;
 }
 
 function $1580() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 20728 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1867(20728 | 0) | 0)) {
    break label$1
   }
   $0_1 = 20704;
   label$2 : while (1) {
    $0_1 = ($41($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (20728 | 0)) {
     continue label$2
    }
    break label$2;
   };
   fimport$0(75 | 0, 0 | 0, 1024 | 0) | 0;
   $1875(20728 | 0);
  }
  $45(20704 | 0, 16256 | 0) | 0;
  $45(20716 | 0, 16259 | 0) | 0;
 }
 
 function $1581($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 20728;
  label$1 : while (1) {
   $1_1 = $1835($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (20704 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1582($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 19604 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1867(19604 | 0) | 0)) {
    break label$1
   }
   $1583();
   HEAP32[(0 + 19600 | 0) >> 2] = 20736;
   $1875(19604 | 0);
  }
  return HEAP32[(0 + 19600 | 0) >> 2] | 0 | 0;
 }
 
 function $1583() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 20760 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1867(20760 | 0) | 0)) {
    break label$1
   }
   $0_1 = 20736;
   label$2 : while (1) {
    $0_1 = ($1160($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (20760 | 0)) {
     continue label$2
    }
    break label$2;
   };
   fimport$0(76 | 0, 0 | 0, 1024 | 0) | 0;
   $1875(20760 | 0);
  }
  $1572(20736 | 0, 16264 | 0) | 0;
  $1572(20748 | 0, 16276 | 0) | 0;
 }
 
 function $1584($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 20760;
  label$1 : while (1) {
   $1_1 = $1849($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (20736 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1585($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 19620 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1867(19620 | 0) | 0)) {
    break label$1
   }
   $21(19608 | 0, 10748 | 0) | 0;
   fimport$0(77 | 0, 0 | 0, 1024 | 0) | 0;
   $1875(19620 | 0);
  }
  return 19608 | 0;
 }
 
 function $1586($0_1) {
  $0_1 = $0_1 | 0;
  $1835(19608 | 0) | 0;
 }
 
 function $1587($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 19636 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1867(19636 | 0) | 0)) {
    break label$1
   }
   $1561(19624 | 0, 10760 | 0) | 0;
   fimport$0(78 | 0, 0 | 0, 1024 | 0) | 0;
   $1875(19636 | 0);
  }
  return 19624 | 0;
 }
 
 function $1588($0_1) {
  $0_1 = $0_1 | 0;
  $1849(19624 | 0) | 0;
 }
 
 function $1589($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 19652 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1867(19652 | 0) | 0)) {
    break label$1
   }
   $21(19640 | 0, 10796 | 0) | 0;
   fimport$0(79 | 0, 0 | 0, 1024 | 0) | 0;
   $1875(19652 | 0);
  }
  return 19640 | 0;
 }
 
 function $1590($0_1) {
  $0_1 = $0_1 | 0;
  $1835(19640 | 0) | 0;
 }
 
 function $1591($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 19668 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1867(19668 | 0) | 0)) {
    break label$1
   }
   $1561(19656 | 0, 10808 | 0) | 0;
   fimport$0(80 | 0, 0 | 0, 1024 | 0) | 0;
   $1875(19668 | 0);
  }
  return 19656 | 0;
 }
 
 function $1592($0_1) {
  $0_1 = $0_1 | 0;
  $1849(19656 | 0) | 0;
 }
 
 function $1593($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 19684 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1867(19684 | 0) | 0)) {
    break label$1
   }
   $21(19672 | 0, 10844 | 0) | 0;
   fimport$0(81 | 0, 0 | 0, 1024 | 0) | 0;
   $1875(19684 | 0);
  }
  return 19672 | 0;
 }
 
 function $1594($0_1) {
  $0_1 = $0_1 | 0;
  $1835(19672 | 0) | 0;
 }
 
 function $1595($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 19700 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1867(19700 | 0) | 0)) {
    break label$1
   }
   $1561(19688 | 0, 10868 | 0) | 0;
   fimport$0(82 | 0, 0 | 0, 1024 | 0) | 0;
   $1875(19700 | 0);
  }
  return 19688 | 0;
 }
 
 function $1596($0_1) {
  $0_1 = $0_1 | 0;
  $1849(19688 | 0) | 0;
 }
 
 function $1597($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 19716 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1867(19716 | 0) | 0)) {
    break label$1
   }
   $21(19704 | 0, 10952 | 0) | 0;
   fimport$0(83 | 0, 0 | 0, 1024 | 0) | 0;
   $1875(19716 | 0);
  }
  return 19704 | 0;
 }
 
 function $1598($0_1) {
  $0_1 = $0_1 | 0;
  $1835(19704 | 0) | 0;
 }
 
 function $1599($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 19732 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1867(19732 | 0) | 0)) {
    break label$1
   }
   $1561(19720 | 0, 10964 | 0) | 0;
   fimport$0(84 | 0, 0 | 0, 1024 | 0) | 0;
   $1875(19732 | 0);
  }
  return 19720 | 0;
 }
 
 function $1600($0_1) {
  $0_1 = $0_1 | 0;
  $1849(19720 | 0) | 0;
 }
 
 function $1601($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1755($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1602($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 1;
  label$1 : {
   if (!($1096($0_1 | 0) | 0)) {
    break label$1
   }
   $1_1 = ($1637($0_1 | 0) | 0) + -1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $1603($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1604($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!($1096($0_1 | 0) | 0)) {
    break label$1
   }
   $1250($0_1 | 0, $1_1 | 0);
   return;
  }
  $1252($0_1 | 0, $1_1 | 0);
 }
 
 function $1605($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($958() | 0 | 0)) {
    break label$1
   }
   $879(HEAP32[$0_1 >> 2] | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1606($0_1) {
  $0_1 = $0_1 | 0;
  $895($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1607($0_1) {
  $0_1 = $0_1 | 0;
  $895($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1608($0_1) {
  $0_1 = $0_1 | 0;
  $895($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1609($0_1) {
  $0_1 = $0_1 | 0;
  $895($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1610($0_1) {
  $0_1 = $0_1 | 0;
  $1611($0_1 + 8 | 0 | 0) | 0;
  $895($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1611($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1612($0_1) {
  $0_1 = $0_1 | 0;
  $1807($1610($0_1 | 0) | 0 | 0);
 }
 
 function $1613($0_1) {
  $0_1 = $0_1 | 0;
  $1614($0_1 + 8 | 0 | 0) | 0;
  $895($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1614($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1615($0_1) {
  $0_1 = $0_1 | 0;
  $1807($1613($0_1 | 0) | 0 | 0);
 }
 
 function $1616($0_1) {
  $0_1 = $0_1 | 0;
  $1807($1617($0_1 | 0) | 0 | 0);
 }
 
 function $1617($0_1) {
  $0_1 = $0_1 | 0;
  $1605($0_1 + 8 | 0 | 0) | 0;
  $895($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1618($0_1) {
  $0_1 = $0_1 | 0;
  $1807($1619($0_1 | 0) | 0 | 0);
 }
 
 function $1619($0_1) {
  $0_1 = $0_1 | 0;
  $1605($0_1 + 8 | 0 | 0) | 0;
  $895($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1620($0_1) {
  $0_1 = $0_1 | 0;
  $895($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1621($0_1) {
  $0_1 = $0_1 | 0;
  $895($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1622($0_1) {
  $0_1 = $0_1 | 0;
  $895($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1623($0_1) {
  $0_1 = $0_1 | 0;
  $895($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1624($0_1) {
  $0_1 = $0_1 | 0;
  $895($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1625($0_1) {
  $0_1 = $0_1 | 0;
  $895($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1626($0_1) {
  $0_1 = $0_1 | 0;
  $895($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1627($0_1) {
  $0_1 = $0_1 | 0;
  $895($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1628($0_1) {
  $0_1 = $0_1 | 0;
  $895($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1629($0_1) {
  $0_1 = $0_1 | 0;
  $895($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1630($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1631($0_1) {
  $0_1 = $0_1 | 0;
  return $1638($0_1 | 0) | 0 | 0;
 }
 
 function $1632($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1633($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1633($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $210($1_1 | 0, $2_1 << 2 | 0 | 0, 4 | 0);
 }
 
 function $1634($0_1) {
  $0_1 = $0_1 | 0;
  return $1635($0_1 | 0) | 0 | 0;
 }
 
 function $1635($0_1) {
  $0_1 = $0_1 | 0;
  return $1639($0_1 | 0) | 0 | 0;
 }
 
 function $1636($0_1) {
  $0_1 = $0_1 | 0;
  return $1640($0_1 | 0) | 0 | 0;
 }
 
 function $1637($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[(($1631($0_1 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0 | 0;
 }
 
 function $1638($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1639($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1640($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1641($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1651($0_1 | 0, $189($1_1 | 0) | 0 | 0) | 0;
  $341($2_1 | 0) | 0;
  $1652($0_1 + 16 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1642($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $1655($1654($0_1 | 0) | 0 | 0) | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $177() | 0;
  $0_1 = HEAP32[($178($1_1 + 12 | 0 | 0, $1_1 + 8 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1643($0_1) {
  $0_1 = $0_1 | 0;
  return $1657($0_1 + 16 | 0 | 0) | 0 | 0;
 }
 
 function $1644($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1656($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1645($0_1) {
  $0_1 = $0_1 | 0;
  return $1658($0_1 + 16 | 0 | 0) | 0 | 0;
 }
 
 function $1646($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1661($0_1 | 0, $1659($0_1 | 0) | 0 | 0, ($1659($0_1 | 0) | 0) + (($1660($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1659($0_1 | 0) | 0) + (($1660($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1659($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0);
 }
 
 function $1647($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + ($2_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1648($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1649($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1672($0_1 | 0, $1_1 | 0);
 }
 
 function $1650($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1651($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $189($1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $1652($0_1) {
  $0_1 = $0_1 | 0;
  $1653($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1653($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[($0_1 + 112 | 0) >> 0] = 0;
  return $0_1 | 0;
 }
 
 function $1654($0_1) {
  $0_1 = $0_1 | 0;
  return $1663($0_1 + 16 | 0 | 0) | 0 | 0;
 }
 
 function $1655($0_1) {
  $0_1 = $0_1 | 0;
  return $1662($0_1 | 0) | 0 | 0;
 }
 
 function $1656($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 > 28 >>> 0) {
    break label$1
   }
   if ((HEAPU8[($0_1 + 112 | 0) >> 0] | 0) & 255 | 0) {
    break label$1
   }
   HEAP8[($0_1 + 112 | 0) >> 0] = 1;
   return $0_1 | 0;
  }
  return $197($1_1 << 2 | 0 | 0, 4 | 0) | 0 | 0;
 }
 
 function $1657($0_1) {
  $0_1 = $0_1 | 0;
  return $1666($0_1 + 16 | 0 | 0) | 0 | 0;
 }
 
 function $1658($0_1) {
  $0_1 = $0_1 | 0;
  return $1667($0_1 | 0) | 0 | 0;
 }
 
 function $1659($0_1) {
  $0_1 = $0_1 | 0;
  return $1648(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1660($0_1) {
  $0_1 = $0_1 | 0;
  return $1668($0_1 | 0) | 0 | 0;
 }
 
 function $1661($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
 }
 
 function $1662($0_1) {
  $0_1 = $0_1 | 0;
  return $1664($0_1 | 0) | 0 | 0;
 }
 
 function $1663($0_1) {
  $0_1 = $0_1 | 0;
  return $1665($0_1 + 16 | 0 | 0) | 0 | 0;
 }
 
 function $1664($0_1) {
  $0_1 = $0_1 | 0;
  return 1073741823 | 0;
 }
 
 function $1665($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1666($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1667($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1668($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($1669($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1669($0_1) {
  $0_1 = $0_1 | 0;
  return $1670($0_1 + 16 | 0 | 0) | 0 | 0;
 }
 
 function $1670($0_1) {
  $0_1 = $0_1 | 0;
  return $1671($0_1 | 0) | 0 | 0;
 }
 
 function $1671($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1672($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$1_1 >> 2] = 0;
 }
 
 function $1673($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1674($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1676($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1675($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) == ($1_1 | 0)) {
     break label$1
    }
    $2_1 = $2_1 + -4 | 0;
    $1677($1643($0_1 | 0) | 0 | 0, $1648($2_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
 }
 
 function $1676($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (($0_1 | 0) != ($1_1 | 0)) {
    break label$1
   }
   HEAP8[($0_1 + 112 | 0) >> 0] = 0;
   return;
  }
  $210($1_1 | 0, $2_1 << 2 | 0 | 0, 4 | 0);
 }
 
 function $1677($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1678($0_1 | 0, $1_1 | 0);
 }
 
 function $1678($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1679($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1680($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1681($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1682($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1683($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1684($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 16364;
  return $0_1 | 0;
 }
 
 function $1685($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 16400;
  return $0_1 | 0;
 }
 
 function $1686($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = $958() | 0;
  return $0_1 | 0;
 }
 
 function $1687($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1688($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  label$1 : {
   $3_1 = $1642($0_1 | 0) | 0;
   if ($3_1 >>> 0 < $1_1 >>> 0) {
    break label$1
   }
   label$2 : {
    $0_1 = $1660($0_1 | 0) | 0;
    if ($0_1 >>> 0 >= ($3_1 >>> 1 | 0) >>> 0) {
     break label$2
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $0_1 << 1 | 0;
    $3_1 = HEAP32[($60($2_1 + 8 | 0 | 0, $2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
   }
   global$0 = $2_1 + 16 | 0;
   return $3_1 | 0;
  }
  $771($0_1 | 0);
  abort();
 }
 
 function $1689($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1690($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1691($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1690($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1692($0_1) {
  $0_1 = $0_1 | 0;
  $1444($0_1 | 0) | 0;
 }
 
 function $1693($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1694($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  $1698($0_1 + 12 | 0 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0) | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $5_1 = $1644($1699($0_1 | 0) | 0 | 0, $1_1 | 0) | 0;
  }
  HEAP32[$0_1 >> 2] = $5_1;
  $2_1 = $5_1 + ($2_1 << 2 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[($1700($0_1 | 0) | 0) >> 2] = $5_1 + ($1_1 << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1695($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = $1701($2_1 | 0, $0_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (($3_1 | 0) == (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
    $1649($1699($0_1 | 0) | 0 | 0, $1648(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0);
    $3_1 = (HEAP32[$1_1 >> 2] | 0) + 4 | 0;
    HEAP32[$1_1 >> 2] = $3_1;
    continue label$2;
   };
  }
  $1702($1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1696($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $1450($0_1 | 0);
  $2_1 = $1_1 + 4 | 0;
  $1703($1643($0_1 | 0) | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 | 0);
  $1704($0_1 | 0, $2_1 | 0);
  $1704($0_1 + 4 | 0 | 0, $1_1 + 8 | 0 | 0);
  $1704($1645($0_1 | 0) | 0 | 0, $1700($1_1 | 0) | 0 | 0);
  HEAP32[$1_1 >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $1646($0_1 | 0, $1401($0_1 | 0) | 0 | 0);
  $1404($0_1 | 0);
 }
 
 function $1697($0_1) {
  $0_1 = $0_1 | 0;
  $1705($0_1 | 0);
  label$1 : {
   if (!(HEAP32[$0_1 >> 2] | 0)) {
    break label$1
   }
   $1674($1699($0_1 | 0) | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $1706($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1698($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1651($0_1 | 0, $189($1_1 | 0) | 0 | 0) | 0;
  $1708($0_1 + 4 | 0 | 0, $1707($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1699($0_1) {
  $0_1 = $0_1 | 0;
  return $1709($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $1700($0_1) {
  $0_1 = $0_1 | 0;
  return $1710($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $1701($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + ($2_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1702($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1703($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $2_1 = $2_1 - $1_1 | 0;
  $4_1 = (HEAP32[$3_1 >> 2] | 0) - $2_1 | 0;
  HEAP32[$3_1 >> 2] = $4_1;
  label$1 : {
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $1932($4_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
 }
 
 function $1704($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1712($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1712($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($1712($2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1705($0_1) {
  $0_1 = $0_1 | 0;
  $1713($0_1 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $1706($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($1714($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1707($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1708($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1707($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1709($0_1) {
  $0_1 = $0_1 | 0;
  return $1711($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1710($0_1) {
  $0_1 = $0_1 | 0;
  return $1667($0_1 | 0) | 0 | 0;
 }
 
 function $1711($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1712($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1713($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1715($0_1 | 0, $1_1 | 0);
 }
 
 function $1714($0_1) {
  $0_1 = $0_1 | 0;
  return $1716($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $1715($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
     break label$1
    }
    $2_1 = $1699($0_1 | 0) | 0;
    $3_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + -4 | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    $1677($2_1 | 0, $1648($3_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
 }
 
 function $1716($0_1) {
  $0_1 = $0_1 | 0;
  return $1671($0_1 | 0) | 0 | 0;
 }
 
 function $1717($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1719($0_1 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1718($0_1) {
  $0_1 = $0_1 | 0;
  $1720($0_1 | 0);
 }
 
 function $1719($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1720($0_1) {
  $0_1 = $0_1 | 0;
  $1722($1721(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0);
 }
 
 function $1721($0_1) {
  $0_1 = $0_1 | 0;
  return $1724($0_1 | 0) | 0 | 0;
 }
 
 function $1722($0_1) {
  $0_1 = $0_1 | 0;
  $1723($0_1 | 0);
 }
 
 function $1723($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $2_1 = (HEAP32[$0_1 >> 2] | 0) + ($1_1 >> 1 | 0) | 0;
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   if (!($1_1 & 1 | 0)) {
    break label$1
   }
   $0_1 = HEAP32[((HEAP32[$2_1 >> 2] | 0) + $0_1 | 0) >> 2] | 0;
  }
  FUNCTION_TABLE[$0_1 | 0]($2_1);
 }
 
 function $1724($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1725($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1726($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1726($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1727($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1728($0_1) {
  $0_1 = $0_1 | 0;
  $1735($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1729($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1736($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1730($0_1) {
  $0_1 = $0_1 | 0;
  return ($1738($1737($0_1 | 0) | 0 | 0) | 0) + -16 | 0 | 0;
 }
 
 function $1731($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = 0;
  $1_1 = 1;
  label$1 : {
   if ($0_1 >>> 0 < 2 >>> 0) {
    break label$1
   }
   $0_1 = $1740($0_1 + 1 | 0 | 0) | 0;
   $7_1 = $0_1;
   $0_1 = $0_1 + -1 | 0;
   $1_1 = ($0_1 | 0) == (2 | 0) ? $7_1 : $0_1;
  }
  return $1_1 | 0;
 }
 
 function $1732($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1741($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1733($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($1636($0_1 | 0) | 0) >> 2] = $1_1;
 }
 
 function $1734($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($1636($0_1 | 0) | 0) + 8 | 0) >> 2] = $1_1 | -2147483648 | 0;
 }
 
 function $1735($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1736($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $1737($0_1) {
  $0_1 = $0_1 | 0;
  return $1743($0_1 | 0) | 0 | 0;
 }
 
 function $1738($0_1) {
  $0_1 = $0_1 | 0;
  return $1742($0_1 | 0) | 0 | 0;
 }
 
 function $1739($0_1) {
  $0_1 = $0_1 | 0;
  return $1746($0_1 | 0) | 0 | 0;
 }
 
 function $1740($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + 3 | 0) & -4 | 0 | 0;
 }
 
 function $1741($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (($1744($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $196(16288 | 0);
   abort();
  }
  return $197($1_1 << 2 | 0 | 0, 4 | 0) | 0 | 0;
 }
 
 function $1742($0_1) {
  $0_1 = $0_1 | 0;
  return $1744($0_1 | 0) | 0 | 0;
 }
 
 function $1743($0_1) {
  $0_1 = $0_1 | 0;
  return $1745($0_1 | 0) | 0 | 0;
 }
 
 function $1744($0_1) {
  $0_1 = $0_1 | 0;
  return 1073741823 | 0;
 }
 
 function $1745($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1746($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1747($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1748($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $862($0_1 | 0, $1_1 | 0);
 }
 
 function $1749($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1753($0_1 | 0, $1752($1_1 | 0) | 0 | 0) | 0;
  $868($0_1 + 4 | 0 | 0, $867($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1750($0_1) {
  $0_1 = $0_1 | 0;
  return $1754($0_1 | 0) | 0 | 0;
 }
 
 function $1751($0_1) {
  $0_1 = $0_1 | 0;
  return $869($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1752($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1753($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1752($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1754($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1755($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $1756($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1757($0_1 | 0, $1_1 | 0);
 }
 
 function $1757($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1758($1634($1_1 | 0) | 0 | 0) | 0;
  $1634($0_1 | 0) | 0;
 }
 
 function $1758($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1759($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1760($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1761($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1760($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1760($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($1760($2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1762($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0 | 0) / (12 | 0) | 0 | 0;
 }
 
 function $1763() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1765() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1764() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1766() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1765() {
  i64toi32_i32$HIGH_BITS = -2147483648;
  return 0 | 0;
 }
 
 function $1766() {
  i64toi32_i32$HIGH_BITS = 2147483647;
  return -1 | 0;
 }
 
 function $1767() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1768() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1768() {
  i64toi32_i32$HIGH_BITS = -1;
  return -1 | 0;
 }
 
 function $1769($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return Math_fround(Math_fround($747($0_1 | 0, $1_1 | 0, $958() | 0 | 0)));
 }
 
 function $1770($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return +(+$748($0_1 | 0, $1_1 | 0, $958() | 0 | 0));
 }
 
 function $1771($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $13_1 = 0, $16_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $749($3_1 | 0, $1_1 | 0, $2_1 | 0, $958() | 0 | 0);
  i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $13_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1772($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0 | 0) / (12 | 0) | 0 | 0;
 }
 
 function $1773($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1774($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1773($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1775($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1776($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1777($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1776($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1778($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1779($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1122($0_1 | 0, $1_1 | 0);
 }
 
 function $1780($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1761($0_1 | 0, $1_1 | 0);
 }
 
 function $1781($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1631($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1782($0_1) {
  $0_1 = $0_1 | 0;
  return $1783($1631($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1783($0_1) {
  $0_1 = $0_1 | 0;
  return $1784($0_1 | 0) | 0 | 0;
 }
 
 function $1784($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1785($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if (($0_1 | 0) == ($1_1 | 0)) {
     break label$1
    }
    $2_1 = HEAP8[$0_1 >> 0] | 0;
    $845($844($3_1 + 8 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $0_1 = $0_1 + 1 | 0;
    $846($3_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1786($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if (($0_1 | 0) == ($1_1 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $848($847($3_1 + 8 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $0_1 = $0_1 + 4 | 0;
    $849($3_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1787($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1788($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1_1 >>> 0 <= $0_1 >>> 0 & $0_1 >>> 0 < $2_1 >>> 0 | 0 | 0;
 }
 
 function $1789($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!($48($0_1 | 0) | 0)) {
    break label$1
   }
   $121($0_1 | 0, $1_1 | 0);
   return;
  }
  $123($0_1 | 0, $1_1 | 0);
 }
 
 function $1790($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1791($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1790($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1792($0_1) {
  $0_1 = $0_1 | 0;
  return $256($0_1 | 0) | 0 | 0;
 }
 
 function $1793($0_1) {
  $0_1 = $0_1 | 0;
  return $869($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1794($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAPU8[$1_1 >> 0] | 0 | 0) == (HEAPU8[$2_1 >> 0] | 0 | 0) | 0;
 }
 
 function $1795($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1796($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1_1 >>> 0 <= $0_1 >>> 0 & $0_1 >>> 0 < $2_1 >>> 0 | 0 | 0;
 }
 
 function $1797($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $1798($0_1 | 0, $4_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $1799($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1798($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $341($1_1 | 0) | 0;
  $1727($0_1 | 0) | 0;
  $1801($0_1 | 0, $1800($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1799($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $1601($1_1 | 0, $2_1 | 0) | 0;
   if ($4_1 >>> 0 > ($1730($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $1252($0_1 | 0, $4_1 | 0);
     $5_1 = $1251($0_1 | 0) | 0;
     break label$2;
    }
    $5_1 = $1731($4_1 | 0) | 0;
    $6_1 = $5_1 + 1 | 0;
    $5_1 = $1732($1634($0_1 | 0) | 0 | 0, $6_1 | 0) | 0;
    $1733($0_1 | 0, $5_1 | 0);
    $1734($0_1 | 0, $6_1 | 0);
    $1250($0_1 | 0, $4_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $1249($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$5;
    };
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   $1249($5_1 | 0, $3_1 + 12 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1827($0_1 | 0);
  abort();
 }
 
 function $1800($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1801($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1800($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1802($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0 | 0) == (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1803($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1804($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1805() {
  fimport$1();
  abort();
 }
 
 function $1806($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $0_1 ? $0_1 : 1;
  label$1 : {
   label$2 : while (1) {
    $0_1 = $1923($1_1 | 0) | 0;
    if ($0_1) {
     break label$1
    }
    label$3 : {
     $0_1 = $1882() | 0;
     if (!$0_1) {
      break label$3
     }
     FUNCTION_TABLE[$0_1 | 0]();
     continue label$2;
    }
    break label$2;
   };
   fimport$1();
   abort();
  }
  return $0_1 | 0;
 }
 
 function $1807($0_1) {
  $0_1 = $0_1 | 0;
  $1924($0_1 | 0);
 }
 
 function $1808($0_1) {
  $0_1 = $0_1 | 0;
  $1807($0_1 | 0);
 }
 
 function $1809() {
  global$2 = 5264752;
  global$1 = (21864 + 15 | 0) & -16 | 0;
 }
 
 function $1810() {
  return global$0 - global$1 | 0 | 0;
 }
 
 function $1811() {
  return global$1 | 0;
 }
 
 function $1812($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1813($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1814($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $1815($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1816($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1817($0_1) {
  $0_1 = $0_1 | 0;
  abort();
 }
 
 function $1818($0_1) {
  $0_1 = $0_1 | 0;
  return $1812($0_1 | 0) | 0 | 0;
 }
 
 function $1819($0_1) {
  $0_1 = $0_1 | 0;
  return $1813($0_1 | 0) | 0 | 0;
 }
 
 function $1820($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1818(21280 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if ((HEAP32[$0_1 >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    $1821(21308 | 0, 21280 | 0) | 0;
    continue label$2;
   };
  }
  label$3 : {
   if (HEAP32[$0_1 >> 2] | 0) {
    break label$3
   }
   $1822($0_1 | 0);
   $1819(21280 | 0) | 0;
   FUNCTION_TABLE[$2_1 | 0]($1_1);
   $1818(21280 | 0) | 0;
   $1823($0_1 | 0);
   $1819(21280 | 0) | 0;
   $1824(21308 | 0) | 0;
   return;
  }
  $1819(21280 | 0) | 0;
 }
 
 function $1821($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1814($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1822($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 1;
 }
 
 function $1823($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = -1;
 }
 
 function $1824($0_1) {
  $0_1 = $0_1 | 0;
  return $1815($0_1 | 0) | 0 | 0;
 }
 
 function $1825($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $0_1;
   label$2 : while (1) {
    HEAP32[$3_1 >> 2] = $1_1;
    $3_1 = $3_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $1826($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    if ((($0_1 - $1_1 | 0) >> 2 | 0) >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    label$3 : while (1) {
     $2_1 = $2_1 + -1 | 0;
     $3_1 = $2_1 << 2 | 0;
     HEAP32[($0_1 + $3_1 | 0) >> 2] = HEAP32[($1_1 + $3_1 | 0) >> 2] | 0;
     if ($2_1) {
      continue label$3
     }
     break label$1;
    };
   }
   if (!$2_1) {
    break label$1
   }
   $3_1 = $0_1;
   label$4 : while (1) {
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$4
    }
    break label$4;
   };
  }
  return $0_1 | 0;
 }
 
 function $1827($0_1) {
  $0_1 = $0_1 | 0;
  $196(16484 | 0);
  abort();
 }
 
 function $1828($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1829($77($1_1 | 0) | 0 | 0);
  $3_1 = $1830($0_1 | 0, $2_1 + 8 | 0 | 0, $2_1 | 0) | 0;
  label$1 : {
   label$2 : {
    if ($48($1_1 | 0) | 0) {
     break label$2
    }
    $1_1 = $124($1_1 | 0) | 0;
    $3_1 = $125($3_1 | 0) | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    break label$1;
   }
   $1831($0_1 | 0, $56($416($1_1 | 0) | 0 | 0) | 0 | 0, $49($1_1 | 0) | 0 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1829($0_1) {
  $0_1 = $0_1 | 0;
  $1832($0_1 | 0);
 }
 
 function $1830($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $341($1_1 | 0) | 0;
  $399($0_1 | 0) | 0;
  $1834($0_1 | 0, $1833($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1831($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($527($0_1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($2_1 >>> 0 > 10 >>> 0) {
      break label$3
     }
     $123($0_1 | 0, $2_1 | 0);
     $4_1 = $122($0_1 | 0) | 0;
     break label$2;
    }
    $4_1 = $528($2_1 | 0) | 0;
    $5_1 = $4_1 + 1 | 0;
    $4_1 = $529($407($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
    $530($0_1 | 0, $4_1 | 0);
    $531($0_1 | 0, $5_1 | 0);
    $121($0_1 | 0, $2_1 | 0);
   }
   $788($1673($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $120($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1827($0_1 | 0);
  abort();
 }
 
 function $1832($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1833($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1834($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1833($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1835($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($48($0_1 | 0) | 0)) {
    break label$1
   }
   $409($407($0_1 | 0) | 0 | 0, $119($0_1 | 0) | 0 | 0, $408($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1836($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $496($0_1 | 0) | 0;
    if ($4_1 >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    $4_1 = $1673($73($0_1 | 0) | 0 | 0) | 0;
    $1837($4_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    $120($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
    $1789($0_1 | 0, $2_1 | 0);
    $1759($0_1 | 0, $2_1 | 0);
    break label$1;
   }
   $5_1 = $44($0_1 | 0) | 0;
   $1838($0_1 | 0, $4_1 | 0, $2_1 - $4_1 | 0 | 0, $5_1 | 0, 0 | 0, $5_1 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1837($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $1934($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1838($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  label$1 : {
   $9_1 = $527($0_1 | 0) | 0;
   if (($9_1 + ($1_1 ^ -1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $10_1 = $73($0_1 | 0) | 0;
   label$2 : {
    label$3 : {
     if ((($9_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
      break label$3
     }
     HEAP32[($8_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
     HEAP32[($8_1 + 12 | 0) >> 2] = $2_1 + $1_1 | 0;
     $2_1 = $528(HEAP32[($60($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
     break label$2;
    }
    $2_1 = $9_1 + -1 | 0;
   }
   $9_1 = $2_1 + 1 | 0;
   $2_1 = $529($407($0_1 | 0) | 0 | 0, $9_1 | 0) | 0;
   $118($0_1 | 0);
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    $788($1673($2_1 | 0) | 0 | 0, $1673($10_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$5 : {
    if (!$6_1) {
     break label$5
    }
    $788(($1673($2_1 | 0) | 0) + $4_1 | 0 | 0, $7_1 | 0, $6_1 | 0) | 0;
   }
   label$6 : {
    $3_1 = $3_1 - $5_1 | 0;
    $7_1 = $3_1 - $4_1 | 0;
    if (!$7_1) {
     break label$6
    }
    $788((($1673($2_1 | 0) | 0) + $4_1 | 0) + $6_1 | 0 | 0, (($1673($10_1 | 0) | 0) + $4_1 | 0) + $5_1 | 0 | 0, $7_1 | 0) | 0;
   }
   label$7 : {
    $4_1 = $1_1 + 1 | 0;
    if (($4_1 | 0) == (11 | 0)) {
     break label$7
    }
    $409($407($0_1 | 0) | 0 | 0, $10_1 | 0, $4_1 | 0);
   }
   $530($0_1 | 0, $2_1 | 0);
   $531($0_1 | 0, $9_1 | 0);
   $4_1 = $3_1 + $6_1 | 0;
   $121($0_1 | 0, $4_1 | 0);
   HEAP8[($8_1 + 7 | 0) >> 0] = 0;
   $120($2_1 + $4_1 | 0 | 0, $8_1 + 7 | 0 | 0);
   global$0 = $8_1 + 16 | 0;
   return;
  }
  $1827($0_1 | 0);
  abort();
 }
 
 function $1839($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   $3_1 = $44($0_1 | 0) | 0;
   if ($3_1 >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $1840($0_1 | 0, $1_1 - $3_1 | 0 | 0, $2_1 | 0) | 0;
   return;
  }
  $1841($0_1 | 0, $1_1 | 0);
 }
 
 function $1840($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $4_1 = $496($0_1 | 0) | 0;
   $5_1 = $44($0_1 | 0) | 0;
   $6_1 = $5_1 + $1_1 | 0;
   label$2 : {
    if (($4_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    $1842($0_1 | 0, $4_1 | 0, $6_1 - $4_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, 0 | 0);
   }
   $4_1 = $73($0_1 | 0) | 0;
   $1843(($1673($4_1 | 0) | 0) + $5_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   $1789($0_1 | 0, $6_1 | 0);
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $120($4_1 + $6_1 | 0 | 0, $3_1 + 15 | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1841($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!($48($0_1 | 0) | 0)) {
     break label$2
    }
    $3_1 = $119($0_1 | 0) | 0;
    HEAP8[($2_1 + 15 | 0) >> 0] = 0;
    $120($3_1 + $1_1 | 0 | 0, $2_1 + 15 | 0 | 0);
    $121($0_1 | 0, $1_1 | 0);
    break label$1;
   }
   $3_1 = $122($0_1 | 0) | 0;
   HEAP8[($2_1 + 14 | 0) >> 0] = 0;
   $120($3_1 + $1_1 | 0 | 0, $2_1 + 14 | 0 | 0);
   $123($0_1 | 0, $1_1 | 0);
  }
  $1759($0_1 | 0, $1_1 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1842($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  label$1 : {
   $8_1 = $527($0_1 | 0) | 0;
   if (($8_1 - $1_1 | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $9_1 = $73($0_1 | 0) | 0;
   label$2 : {
    label$3 : {
     if ((($8_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
      break label$3
     }
     HEAP32[($7_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
     HEAP32[($7_1 + 12 | 0) >> 2] = $2_1 + $1_1 | 0;
     $2_1 = $528(HEAP32[($60($7_1 + 12 | 0 | 0, $7_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
     break label$2;
    }
    $2_1 = $8_1 + -1 | 0;
   }
   $8_1 = $2_1 + 1 | 0;
   $2_1 = $529($407($0_1 | 0) | 0 | 0, $8_1 | 0) | 0;
   $118($0_1 | 0);
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    $788($1673($2_1 | 0) | 0 | 0, $1673($9_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$5 : {
    $3_1 = ($3_1 - $5_1 | 0) - $4_1 | 0;
    if (!$3_1) {
     break label$5
    }
    $788((($1673($2_1 | 0) | 0) + $4_1 | 0) + $6_1 | 0 | 0, (($1673($9_1 | 0) | 0) + $4_1 | 0) + $5_1 | 0 | 0, $3_1 | 0) | 0;
   }
   label$6 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (11 | 0)) {
     break label$6
    }
    $409($407($0_1 | 0) | 0 | 0, $9_1 | 0, $1_1 | 0);
   }
   $530($0_1 | 0, $2_1 | 0);
   $531($0_1 | 0, $8_1 | 0);
   global$0 = $7_1 + 16 | 0;
   return;
  }
  $1827($0_1 | 0);
  abort();
 }
 
 function $1843($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1933($0_1 | 0, $488($2_1 | 0) | 0 | 0, $1_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1844($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $496($0_1 | 0) | 0;
    $5_1 = $44($0_1 | 0) | 0;
    if (($4_1 - $5_1 | 0) >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    if (!$2_1) {
     break label$1
    }
    $4_1 = $1673($73($0_1 | 0) | 0 | 0) | 0;
    $788($4_1 + $5_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $2_1 = $5_1 + $2_1 | 0;
    $1789($0_1 | 0, $2_1 | 0);
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    $120($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
    break label$1;
   }
   $1838($0_1 | 0, $4_1 | 0, ($5_1 + $2_1 | 0) - $4_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1845($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (!($48($0_1 | 0) | 0)) {
        break label$5
       }
       $1_1 = $408($0_1 | 0) | 0;
       $3_1 = $49($0_1 | 0) | 0;
       $4_1 = $1_1 + -1 | 0;
       if (($3_1 | 0) == ($4_1 | 0)) {
        break label$4
       }
       break label$2;
      }
      $3_1 = 10;
      $4_1 = 10;
      $1_1 = $50($0_1 | 0) | 0;
      if (($1_1 | 0) != (10 | 0)) {
       break label$3
      }
     }
     $1842($0_1 | 0, $4_1 | 0, 1 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
     $1_1 = $3_1;
     if ($48($0_1 | 0) | 0) {
      break label$2
     }
    }
    $4_1 = $122($0_1 | 0) | 0;
    $123($0_1 | 0, $1_1 + 1 | 0 | 0);
    break label$1;
   }
   $4_1 = $119($0_1 | 0) | 0;
   $121($0_1 | 0, $3_1 + 1 | 0 | 0);
   $1_1 = $3_1;
  }
  $0_1 = $4_1 + $1_1 | 0;
  $120($0_1 | 0, $2_1 + 15 | 0 | 0);
  HEAP8[($2_1 + 14 | 0) >> 0] = 0;
  $120($0_1 + 1 | 0 | 0, $2_1 + 14 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1846($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1836($0_1 | 0, $1_1 | 0, $23($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1847($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($527($0_1 | 0) | 0) >>> 0 < $1_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($1_1 >>> 0 > 10 >>> 0) {
      break label$3
     }
     $123($0_1 | 0, $1_1 | 0);
     $4_1 = $122($0_1 | 0) | 0;
     break label$2;
    }
    $4_1 = $528($1_1 | 0) | 0;
    $5_1 = $4_1 + 1 | 0;
    $4_1 = $529($407($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
    $530($0_1 | 0, $4_1 | 0);
    $531($0_1 | 0, $5_1 | 0);
    $121($0_1 | 0, $1_1 | 0);
   }
   $1843($1673($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $120($4_1 + $1_1 | 0 | 0, $3_1 + 15 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1827($0_1 | 0);
  abort();
 }
 
 function $1848($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($1730($0_1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($2_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $1252($0_1 | 0, $2_1 | 0);
     $4_1 = $1251($0_1 | 0) | 0;
     break label$2;
    }
    $4_1 = $1731($2_1 | 0) | 0;
    $5_1 = $4_1 + 1 | 0;
    $4_1 = $1732($1634($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
    $1733($0_1 | 0, $4_1 | 0);
    $1734($0_1 | 0, $5_1 | 0);
    $1250($0_1 | 0, $2_1 | 0);
   }
   $796($1747($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   $1249($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1827($0_1 | 0);
  abort();
 }
 
 function $1849($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($1096($0_1 | 0) | 0)) {
    break label$1
   }
   $1632($1634($0_1 | 0) | 0 | 0, $1248($0_1 | 0) | 0 | 0, $1637($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1850($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $1602($0_1 | 0) | 0;
    if ($4_1 >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    $4_1 = $1747($1039($0_1 | 0) | 0 | 0) | 0;
    $1851($4_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    $1249($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
    $1604($0_1 | 0, $2_1 | 0);
    $1603($0_1 | 0, $2_1 | 0);
    break label$1;
   }
   $5_1 = $970($0_1 | 0) | 0;
   $1852($0_1 | 0, $4_1 | 0, $2_1 - $4_1 | 0 | 0, $5_1 | 0, 0 | 0, $5_1 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1851($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $0_1 = $1826($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1852($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  label$1 : {
   $9_1 = $1730($0_1 | 0) | 0;
   if (($9_1 + ($1_1 ^ -1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $10_1 = $1039($0_1 | 0) | 0;
   label$2 : {
    label$3 : {
     if ((($9_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
      break label$3
     }
     HEAP32[($8_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
     HEAP32[($8_1 + 12 | 0) >> 2] = $2_1 + $1_1 | 0;
     $2_1 = $1731(HEAP32[($60($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
     break label$2;
    }
    $2_1 = $9_1 + -1 | 0;
   }
   $9_1 = $2_1 + 1 | 0;
   $2_1 = $1732($1634($0_1 | 0) | 0 | 0, $9_1 | 0) | 0;
   $1247($0_1 | 0);
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    $796($1747($2_1 | 0) | 0 | 0, $1747($10_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$5 : {
    if (!$6_1) {
     break label$5
    }
    $796(($1747($2_1 | 0) | 0) + ($4_1 << 2 | 0) | 0 | 0, $7_1 | 0, $6_1 | 0) | 0;
   }
   label$6 : {
    $3_1 = $3_1 - $5_1 | 0;
    $7_1 = $3_1 - $4_1 | 0;
    if (!$7_1) {
     break label$6
    }
    $4_1 = $4_1 << 2 | 0;
    $796((($1747($2_1 | 0) | 0) + $4_1 | 0) + ($6_1 << 2 | 0) | 0 | 0, (($1747($10_1 | 0) | 0) + $4_1 | 0) + ($5_1 << 2 | 0) | 0 | 0, $7_1 | 0) | 0;
   }
   label$7 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (2 | 0)) {
     break label$7
    }
    $1632($1634($0_1 | 0) | 0 | 0, $10_1 | 0, $1_1 | 0);
   }
   $1733($0_1 | 0, $2_1 | 0);
   $1734($0_1 | 0, $9_1 | 0);
   $1_1 = $3_1 + $6_1 | 0;
   $1250($0_1 | 0, $1_1 | 0);
   HEAP32[($8_1 + 4 | 0) >> 2] = 0;
   $1249($2_1 + ($1_1 << 2 | 0) | 0 | 0, $8_1 + 4 | 0 | 0);
   global$0 = $8_1 + 16 | 0;
   return;
  }
  $1827($0_1 | 0);
  abort();
 }
 
 function $1853($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  label$1 : {
   $8_1 = $1730($0_1 | 0) | 0;
   if (($8_1 - $1_1 | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $9_1 = $1039($0_1 | 0) | 0;
   label$2 : {
    label$3 : {
     if ((($8_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
      break label$3
     }
     HEAP32[($7_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
     HEAP32[($7_1 + 12 | 0) >> 2] = $2_1 + $1_1 | 0;
     $2_1 = $1731(HEAP32[($60($7_1 + 12 | 0 | 0, $7_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
     break label$2;
    }
    $2_1 = $8_1 + -1 | 0;
   }
   $8_1 = $2_1 + 1 | 0;
   $2_1 = $1732($1634($0_1 | 0) | 0 | 0, $8_1 | 0) | 0;
   $1247($0_1 | 0);
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    $796($1747($2_1 | 0) | 0 | 0, $1747($9_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$5 : {
    $3_1 = ($3_1 - $5_1 | 0) - $4_1 | 0;
    if (!$3_1) {
     break label$5
    }
    $4_1 = $4_1 << 2 | 0;
    $796((($1747($2_1 | 0) | 0) + $4_1 | 0) + ($6_1 << 2 | 0) | 0 | 0, (($1747($9_1 | 0) | 0) + $4_1 | 0) + ($5_1 << 2 | 0) | 0 | 0, $3_1 | 0) | 0;
   }
   label$6 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (2 | 0)) {
     break label$6
    }
    $1632($1634($0_1 | 0) | 0 | 0, $9_1 | 0, $1_1 | 0);
   }
   $1733($0_1 | 0, $2_1 | 0);
   $1734($0_1 | 0, $8_1 | 0);
   global$0 = $7_1 + 16 | 0;
   return;
  }
  $1827($0_1 | 0);
  abort();
 }
 
 function $1854($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $0_1 = $1825($0_1 | 0, $2_1 | 0, $1_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1855($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $1602($0_1 | 0) | 0;
    $5_1 = $970($0_1 | 0) | 0;
    if (($4_1 - $5_1 | 0) >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    if (!$2_1) {
     break label$1
    }
    $4_1 = $1747($1039($0_1 | 0) | 0 | 0) | 0;
    $796($4_1 + ($5_1 << 2 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $2_1 = $5_1 + $2_1 | 0;
    $1604($0_1 | 0, $2_1 | 0);
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    $1249($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
    break label$1;
   }
   $1852($0_1 | 0, $4_1 | 0, ($5_1 + $2_1 | 0) - $4_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1856($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (!($1096($0_1 | 0) | 0)) {
        break label$5
       }
       $1_1 = $1637($0_1 | 0) | 0;
       $3_1 = $1097($0_1 | 0) | 0;
       $4_1 = $1_1 + -1 | 0;
       if (($3_1 | 0) == ($4_1 | 0)) {
        break label$4
       }
       break label$2;
      }
      $3_1 = 1;
      $4_1 = 1;
      $1_1 = $1098($0_1 | 0) | 0;
      if (($1_1 | 0) != (1 | 0)) {
       break label$3
      }
     }
     $1853($0_1 | 0, $4_1 | 0, 1 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
     $1_1 = $3_1;
     if ($1096($0_1 | 0) | 0) {
      break label$2
     }
    }
    $4_1 = $1251($0_1 | 0) | 0;
    $1252($0_1 | 0, $1_1 + 1 | 0 | 0);
    break label$1;
   }
   $4_1 = $1248($0_1 | 0) | 0;
   $1250($0_1 | 0, $3_1 + 1 | 0 | 0);
   $1_1 = $3_1;
  }
  $0_1 = $4_1 + ($1_1 << 2 | 0) | 0;
  $1249($0_1 | 0, $2_1 + 12 | 0 | 0);
  HEAP32[($2_1 + 8 | 0) >> 2] = 0;
  $1249($0_1 + 4 | 0 | 0, $2_1 + 8 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1857($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1850($0_1 | 0, $1_1 | 0, $1562($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1858($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($1730($0_1 | 0) | 0) >>> 0 < $1_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($1_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $1252($0_1 | 0, $1_1 | 0);
     $4_1 = $1251($0_1 | 0) | 0;
     break label$2;
    }
    $4_1 = $1731($1_1 | 0) | 0;
    $5_1 = $4_1 + 1 | 0;
    $4_1 = $1732($1634($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
    $1733($0_1 | 0, $4_1 | 0);
    $1734($0_1 | 0, $5_1 | 0);
    $1250($0_1 | 0, $1_1 | 0);
   }
   $1854($1747($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   $1249($4_1 + ($1_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1827($0_1 | 0);
  abort();
 }
 
 function $1859() {
  return ($1860() | 0 | 0) > (0 | 0) | 0;
 }
 
 function $1860() {
  return $1922() | 0 | 0;
 }
 
 function $1861($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 16596 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $1862($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $1940($1_1 | 0) | 0;
  $3_1 = $1806($2_1 + 13 | 0 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$3_1 >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1932($1863($3_1 | 0) | 0 | 0, $1_1 | 0, $2_1 + 1 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1863($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 12 | 0 | 0;
 }
 
 function $1864($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1861($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 16640 + 8 | 0;
  $1862($0_1 + 4 | 0 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1865($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1866($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  abort();
 }
 
 function $1867($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = $1869($1868($1_1 | 0, $0_1 | 0) | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1868($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1870($0_1 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1869($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  label$1 : {
   if ($1872($1871($1_1 + 8 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) {
    break label$1
   }
   $2_1 = $1874($1873($0_1 | 0) | 0 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1870($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + 1 | 0;
  return $0_1 | 0;
 }
 
 function $1871($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1872($0_1) {
  $0_1 = $0_1 | 0;
  return $1879(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1873($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1874($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $0_1 = HEAPU8[$2_1 >> 0] | 0;
    if (($0_1 | 0) == (1 | 0)) {
     break label$2
    }
    if ($0_1 & 2 | 0) {
     break label$1
    }
    HEAP8[$2_1 >> 0] = 2;
    $1_1 = 1;
   }
   return $1_1 | 0;
  }
  $1866(16497 | 0, 0 | 0);
  abort();
 }
 
 function $1875($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $1876($1868($1_1 | 0, $0_1 | 0) | 0 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1876($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $1877($1871($1_1 + 8 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
  $1878($1873($0_1 | 0) | 0 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1877($0_1) {
  $0_1 = $0_1 | 0;
  $1880(HEAP32[$0_1 >> 2] | 0 | 0);
 }
 
 function $1878($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 0] = 1;
 }
 
 function $1879($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[$0_1 >> 0] | 0 | 0;
 }
 
 function $1880($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[$0_1 >> 0] = 1;
 }
 
 function $1881($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1882() {
  return $1881(21356 | 0) | 0 | 0;
 }
 
 function $1883() {
  $1866(16551 | 0, 0 | 0);
  abort();
 }
 
 function $1884($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1885($0_1) {
  $0_1 = $0_1 | 0;
  $1807($0_1 | 0);
 }
 
 function $1886($0_1) {
  $0_1 = $0_1 | 0;
  return 16581 | 0;
 }
 
 function $1887($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 16648;
  $1888($0_1 + 4 | 0 | 0) | 0;
  $1884($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1888($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!($1865($0_1 | 0) | 0)) {
    break label$1
   }
   $1_1 = $1889(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   if (($1890($1_1 + 8 | 0 | 0) | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   $1807($1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1889($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + -12 | 0 | 0;
 }
 
 function $1890($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + -1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $1891($0_1) {
  $0_1 = $0_1 | 0;
  $1807($1887($0_1 | 0) | 0 | 0);
 }
 
 function $1892($0_1) {
  $0_1 = $0_1 | 0;
  return $1893($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1893($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1894($0_1) {
  $0_1 = $0_1 | 0;
  $1887($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1895($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1896($0_1) {
  $0_1 = $0_1 | 0;
  $1895($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1897($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1898($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1899($0_1) {
  $0_1 = $0_1 | 0;
  $1896($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1900($0_1) {
  $0_1 = $0_1 | 0;
  $1896($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1901($0_1) {
  $0_1 = $0_1 | 0;
  $1896($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1902($0_1) {
  $0_1 = $0_1 | 0;
  $1896($0_1 | 0) | 0;
  $1807($0_1 | 0);
 }
 
 function $1903($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1904($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1904($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  }
  label$2 : {
   if (($0_1 | 0) != ($1_1 | 0)) {
    break label$2
   }
   return 1 | 0;
  }
  return !($683($545($0_1 | 0) | 0 | 0, $545($1_1 | 0) | 0 | 0) | 0) | 0;
 }
 
 function $1905($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  $4_1 = 1;
  label$1 : {
   if ($1904($0_1 | 0, $1_1 | 0, 0 | 0) | 0) {
    break label$1
   }
   $4_1 = 0;
   if (!$1_1) {
    break label$1
   }
   $4_1 = 0;
   $1_1 = $1906($1_1 | 0, 16800 | 0, 16848 | 0, 0 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   $1933($3_1 + 8 | 0 | 4 | 0 | 0, 0 | 0, 52 | 0) | 0;
   HEAP32[($3_1 + 56 | 0) >> 2] = 1;
   HEAP32[($3_1 + 20 | 0) >> 2] = -1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1_1, $3_1 + 8 | 0, HEAP32[$2_1 >> 2] | 0, 1);
   label$2 : {
    $4_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
    if (($4_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
   }
   $4_1 = ($4_1 | 0) == (1 | 0);
  }
  global$0 = $3_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $1906($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$0_1 >> 2] | 0;
  $6_1 = HEAP32[($5_1 + -4 | 0) >> 2] | 0;
  $5_1 = HEAP32[($5_1 + -8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
  $1_1 = 0;
  $1933($4_1 + 24 | 0 | 0, 0 | 0, 39 | 0) | 0;
  $0_1 = $0_1 + $5_1 | 0;
  label$1 : {
   label$2 : {
    if (!($1904($6_1 | 0, $2_1 | 0, 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 56 | 0) >> 2] = 1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, $4_1 + 8 | 0, $0_1, $0_1, 1, 0);
    $1_1 = (HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0) ? $0_1 : 0;
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($6_1, $4_1 + 8 | 0, $0_1, 1, 0);
   label$3 : {
    switch (HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) {
    case 0:
     $1_1 = (wasm2js_i32$0 = (wasm2js_i32$3 = (wasm2js_i32$6 = HEAP32[($4_1 + 28 | 0) >> 2] | 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = (HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$8 ? wasm2js_i32$6 : wasm2js_i32$7), wasm2js_i32$4 = 0, wasm2js_i32$5 = (HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     break label$1;
    case 1:
     break label$3;
    default:
     break label$1;
    };
   }
   label$5 : {
    if ((HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     break label$5
    }
    if (HEAP32[($4_1 + 48 | 0) >> 2] | 0) {
     break label$1
    }
    if ((HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    if ((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
   }
   $1_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 64 | 0;
  return $1_1 | 0;
 }
 
 function $1907($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   if ($4_1) {
    break label$1
   }
   HEAP32[($1_1 + 36 | 0) >> 2] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   return;
  }
  label$2 : {
   label$3 : {
    if (($4_1 | 0) != ($2_1 | 0)) {
     break label$3
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
    return;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = 2;
   HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function $1908($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($1904($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $1907($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
 }
 
 function $1909($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($1904($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $1907($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $1910($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ($2_1) {
     break label$2
    }
    $5_1 = 0;
    break label$1;
   }
   $5_1 = $4_1 >> 8 | 0;
   if (!($4_1 & 1 | 0)) {
    break label$1
   }
   $5_1 = HEAP32[((HEAP32[$2_1 >> 2] | 0) + $5_1 | 0) >> 2] | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1 + $5_1 | 0, $4_1 & 2 | 0 ? $3_1 : 2);
 }
 
 function $1911($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!($1904($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $1907($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $5_1 = $0_1 + 16 | 0;
  $1910($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  label$2 : {
   if (($4_1 | 0) < (2 | 0)) {
    break label$2
   }
   $4_1 = $5_1 + ($4_1 << 3 | 0) | 0;
   $0_1 = $0_1 + 24 | 0;
   label$3 : while (1) {
    $1910($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
    $0_1 = $0_1 + 8 | 0;
    if ($0_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    if (!((HEAPU8[($1_1 + 54 | 0) >> 0] | 0) & 255 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
 }
 
 function $1912($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 1;
  label$1 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
    break label$1
   }
   HEAP8[($1_1 + 52 | 0) >> 0] = 1;
   label$2 : {
    $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    HEAP32[($1_1 + 36 | 0) >> 2] = 1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
    if (($4_1 | 0) != (1 | 0)) {
     break label$1
    }
    if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   label$3 : {
    if (($3_1 | 0) != ($2_1 | 0)) {
     break label$3
    }
    label$4 : {
     $3_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     if (($3_1 | 0) != (2 | 0)) {
      break label$4
     }
     HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     $3_1 = $4_1;
    }
    if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    if (($3_1 | 0) != (1 | 0)) {
     break label$1
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function $1913($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
    break label$1
   }
   if ((HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = $3_1;
  }
 }
 
 function $1914($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   if (!($1904($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $1913($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!($1904($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$4
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    label$6 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     $5_1 = $0_1 + 16 | 0;
     $3_1 = $5_1 + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
     $6_1 = 0;
     $7_1 = 0;
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : while (1) {
         if ($5_1 >>> 0 >= $3_1 >>> 0) {
          break label$9
         }
         HEAP16[($1_1 + 52 | 0) >> 1] = 0;
         $1915($5_1 | 0, $1_1 | 0, $2_1 | 0, $2_1 | 0, 1 | 0, $4_1 | 0);
         if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
          break label$9
         }
         label$11 : {
          if (!(HEAPU8[($1_1 + 53 | 0) >> 0] | 0)) {
           break label$11
          }
          label$12 : {
           if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
            break label$12
           }
           $8_1 = 1;
           if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
            break label$8
           }
           $6_1 = 1;
           $7_1 = 1;
           $8_1 = 1;
           if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0) {
            break label$11
           }
           break label$8;
          }
          $6_1 = 1;
          $8_1 = $7_1;
          if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
           break label$8
          }
         }
         $5_1 = $5_1 + 8 | 0;
         continue label$10;
        };
       }
       $5_1 = 4;
       $8_1 = $7_1;
       if (!($6_1 & 1 | 0)) {
        break label$7
       }
      }
      $5_1 = 3;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = $5_1;
     if ($8_1 & 1 | 0) {
      break label$2
     }
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $8_1 = $0_1 + 16 | 0;
   $1916($8_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   if (($5_1 | 0) < (2 | 0)) {
    break label$2
   }
   $8_1 = $8_1 + ($5_1 << 3 | 0) | 0;
   $5_1 = $0_1 + 24 | 0;
   label$13 : {
    label$14 : {
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if ($0_1 & 2 | 0) {
      break label$14
     }
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$13
     }
    }
    label$15 : while (1) {
     if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break label$2
     }
     $1916($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $8_1 >>> 0) {
      continue label$15
     }
     break label$2;
    };
   }
   label$16 : {
    if ($0_1 & 1 | 0) {
     break label$16
    }
    label$17 : while (1) {
     if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break label$2
     }
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
     $1916($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $8_1 >>> 0) {
      continue label$17
     }
     break label$2;
    };
   }
   label$18 : while (1) {
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    label$19 : {
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$19
     }
     if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
    }
    $1916($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
    $5_1 = $5_1 + 8 | 0;
    if ($5_1 >>> 0 < $8_1 >>> 0) {
     continue label$18
    }
    break label$18;
   };
  }
 }
 
 function $1915($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $7_1 = $6_1 >> 8 | 0;
  label$1 : {
   if (!($6_1 & 1 | 0)) {
    break label$1
   }
   $7_1 = HEAP32[((HEAP32[$3_1 >> 2] | 0) + $7_1 | 0) >> 2] | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1 + $7_1 | 0, $6_1 & 2 | 0 ? $4_1 : 2, $5_1);
 }
 
 function $1916($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $6_1 = $5_1 >> 8 | 0;
  label$1 : {
   if (!($5_1 & 1 | 0)) {
    break label$1
   }
   $6_1 = HEAP32[((HEAP32[$2_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1 + $6_1 | 0, $5_1 & 2 | 0 ? $3_1 : 2, $4_1);
 }
 
 function $1917($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($1904($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $1913($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!($1904($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$4
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    label$6 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     HEAP16[($1_1 + 52 | 0) >> 1] = 0;
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $2_1, 1, $4_1);
     label$7 : {
      if (!(HEAPU8[($1_1 + 53 | 0) >> 0] | 0)) {
       break label$7
      }
      HEAP32[($1_1 + 44 | 0) >> 2] = 3;
      if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
       break label$6
      }
      break label$2;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = 4;
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1);
  }
 }
 
 function $1918($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($1904($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $1913($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   if (!($1904($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
      break label$4
     }
     if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$3
     }
    }
    if (($3_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = 1;
    return;
   }
   HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
   label$5 : {
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$5
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$5
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   }
   HEAP32[($1_1 + 44 | 0) >> 2] = 4;
  }
 }
 
 function $1919($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  label$1 : {
   if (!($1904($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $1912($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $6_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 0;
  $8_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  HEAP8[($1_1 + 52 | 0) >> 0] = 0;
  $9_1 = $0_1 + 16 | 0;
  $1915($9_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
  $10_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $6_1 = $6_1 | $10_1 | 0;
  $11_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  $8_1 = $8_1 | $11_1 | 0;
  label$2 : {
   if (($7_1 | 0) < (2 | 0)) {
    break label$2
   }
   $9_1 = $9_1 + ($7_1 << 3 | 0) | 0;
   $7_1 = $0_1 + 24 | 0;
   label$3 : while (1) {
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    label$4 : {
     label$5 : {
      if (!($11_1 & 255 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
       break label$2
      }
      if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0) {
       break label$4
      }
      break label$2;
     }
     if (!($10_1 & 255 | 0)) {
      break label$4
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP16[($1_1 + 52 | 0) >> 1] = 0;
    $1915($7_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
    $10_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
    $6_1 = $10_1 | $6_1 | 0;
    $11_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
    $8_1 = $11_1 | $8_1 | 0;
    $7_1 = $7_1 + 8 | 0;
    if ($7_1 >>> 0 < $9_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  HEAP8[($1_1 + 53 | 0) >> 0] = ($6_1 & 255 | 0 | 0) != (0 | 0);
  HEAP8[($1_1 + 52 | 0) >> 0] = ($8_1 & 255 | 0 | 0) != (0 | 0);
 }
 
 function $1920($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($1904($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $1912($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $1921($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($1904($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $1912($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
  }
 }
 
 function $1922() {
  return 0 | 0;
 }
 
 function $1923($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0, $8_1 = 0, $2_1 = 0, $12_1 = 0, $9_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $10_1 = 0, $11_1 = 0, $1_1 = 0, $83_1 = 0, $96_1 = 0, $107_1 = 0, $115_1 = 0, $123_1 = 0, $217_1 = 0, $228_1 = 0, $236_1 = 0, $244_1 = 0, $279_1 = 0, $354_1 = 0, $361_1 = 0, $368_1 = 0, $459_1 = 0, $470_1 = 0, $478_1 = 0, $486_1 = 0, $1194_1 = 0, $1201_1 = 0, $1208_1 = 0, $1330_1 = 0, $1332_1 = 0, $1393_1 = 0, $1400_1 = 0, $1407_1 = 0, $1640_1 = 0, $1647_1 = 0, $1654_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               if ($0_1 >>> 0 > 244 >>> 0) {
                break label$13
               }
               label$14 : {
                $2_1 = HEAP32[(0 + 21360 | 0) >> 2] | 0;
                $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & -8 | 0;
                $4_1 = $3_1 >>> 3 | 0;
                $0_1 = $2_1 >>> $4_1 | 0;
                if (!($0_1 & 3 | 0)) {
                 break label$14
                }
                $3_1 = (($0_1 ^ -1 | 0) & 1 | 0) + $4_1 | 0;
                $5_1 = $3_1 << 3 | 0;
                $4_1 = HEAP32[($5_1 + 21408 | 0) >> 2] | 0;
                $0_1 = $4_1 + 8 | 0;
                label$15 : {
                 label$16 : {
                  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                  $5_1 = $5_1 + 21400 | 0;
                  if (($6_1 | 0) != ($5_1 | 0)) {
                   break label$16
                  }
                  HEAP32[(0 + 21360 | 0) >> 2] = $2_1 & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
                  break label$15;
                 }
                 HEAP32[(0 + 21376 | 0) >> 2] | 0;
                 HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
                 HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
                }
                $6_1 = $3_1 << 3 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 | 3 | 0;
                $4_1 = $4_1 + $6_1 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
                break label$1;
               }
               $7_1 = HEAP32[(0 + 21368 | 0) >> 2] | 0;
               if ($3_1 >>> 0 <= $7_1 >>> 0) {
                break label$12
               }
               label$17 : {
                if (!$0_1) {
                 break label$17
                }
                label$18 : {
                 label$19 : {
                  $83_1 = $0_1 << $4_1 | 0;
                  $0_1 = 2 << $4_1 | 0;
                  $0_1 = $83_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0;
                  $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                  $96_1 = $0_1;
                  $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                  $4_1 = $96_1 >>> $0_1 | 0;
                  $6_1 = ($4_1 >>> 5 | 0) & 8 | 0;
                  $107_1 = $6_1 | $0_1 | 0;
                  $0_1 = $4_1 >>> $6_1 | 0;
                  $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                  $115_1 = $107_1 | $4_1 | 0;
                  $0_1 = $0_1 >>> $4_1 | 0;
                  $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                  $123_1 = $115_1 | $4_1 | 0;
                  $0_1 = $0_1 >>> $4_1 | 0;
                  $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                  $6_1 = ($123_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0;
                  $5_1 = $6_1 << 3 | 0;
                  $4_1 = HEAP32[($5_1 + 21408 | 0) >> 2] | 0;
                  $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                  $5_1 = $5_1 + 21400 | 0;
                  if (($0_1 | 0) != ($5_1 | 0)) {
                   break label$19
                  }
                  $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
                  HEAP32[(0 + 21360 | 0) >> 2] = $2_1;
                  break label$18;
                 }
                 HEAP32[(0 + 21376 | 0) >> 2] | 0;
                 HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
                 HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
                }
                $0_1 = $4_1 + 8 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                $5_1 = $4_1 + $3_1 | 0;
                $8_1 = $6_1 << 3 | 0;
                $6_1 = $8_1 - $3_1 | 0;
                HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
                HEAP32[($4_1 + $8_1 | 0) >> 2] = $6_1;
                label$20 : {
                 if (!$7_1) {
                  break label$20
                 }
                 $8_1 = $7_1 >>> 3 | 0;
                 $3_1 = ($8_1 << 3 | 0) + 21400 | 0;
                 $4_1 = HEAP32[(0 + 21380 | 0) >> 2] | 0;
                 label$21 : {
                  label$22 : {
                   $8_1 = 1 << $8_1 | 0;
                   if ($2_1 & $8_1 | 0) {
                    break label$22
                   }
                   HEAP32[(0 + 21360 | 0) >> 2] = $2_1 | $8_1 | 0;
                   $8_1 = $3_1;
                   break label$21;
                  }
                  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                 }
                 HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
                 HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
                 HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
                 HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
                }
                HEAP32[(0 + 21380 | 0) >> 2] = $5_1;
                HEAP32[(0 + 21368 | 0) >> 2] = $6_1;
                break label$1;
               }
               $9_1 = HEAP32[(0 + 21364 | 0) >> 2] | 0;
               if (!$9_1) {
                break label$12
               }
               $0_1 = ($9_1 & (0 - $9_1 | 0) | 0) + -1 | 0;
               $217_1 = $0_1;
               $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
               $4_1 = $217_1 >>> $0_1 | 0;
               $6_1 = ($4_1 >>> 5 | 0) & 8 | 0;
               $228_1 = $6_1 | $0_1 | 0;
               $0_1 = $4_1 >>> $6_1 | 0;
               $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
               $236_1 = $228_1 | $4_1 | 0;
               $0_1 = $0_1 >>> $4_1 | 0;
               $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
               $244_1 = $236_1 | $4_1 | 0;
               $0_1 = $0_1 >>> $4_1 | 0;
               $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
               $5_1 = HEAP32[(((($244_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0) << 2 | 0) + 21664 | 0) >> 2] | 0;
               $4_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
               $6_1 = $5_1;
               label$23 : {
                label$24 : while (1) {
                 label$25 : {
                  $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
                  if ($0_1) {
                   break label$25
                  }
                  $0_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
                  if (!$0_1) {
                   break label$23
                  }
                 }
                 $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                 $279_1 = $6_1;
                 $6_1 = $6_1 >>> 0 < $4_1 >>> 0;
                 $4_1 = $6_1 ? $279_1 : $4_1;
                 $5_1 = $6_1 ? $0_1 : $5_1;
                 $6_1 = $0_1;
                 continue label$24;
                };
               }
               $10_1 = $5_1 + $3_1 | 0;
               if ($10_1 >>> 0 <= $5_1 >>> 0) {
                break label$11
               }
               $11_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
               label$26 : {
                $8_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
                if (($8_1 | 0) == ($5_1 | 0)) {
                 break label$26
                }
                label$27 : {
                 $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                 if ((HEAP32[(0 + 21376 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
                  break label$27
                 }
                 HEAP32[($0_1 + 12 | 0) >> 2] | 0;
                }
                HEAP32[($0_1 + 12 | 0) >> 2] = $8_1;
                HEAP32[($8_1 + 8 | 0) >> 2] = $0_1;
                break label$2;
               }
               label$28 : {
                $6_1 = $5_1 + 20 | 0;
                $0_1 = HEAP32[$6_1 >> 2] | 0;
                if ($0_1) {
                 break label$28
                }
                $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                if (!$0_1) {
                 break label$10
                }
                $6_1 = $5_1 + 16 | 0;
               }
               label$29 : while (1) {
                $12_1 = $6_1;
                $8_1 = $0_1;
                $6_1 = $0_1 + 20 | 0;
                $0_1 = HEAP32[$6_1 >> 2] | 0;
                if ($0_1) {
                 continue label$29
                }
                $6_1 = $8_1 + 16 | 0;
                $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                if ($0_1) {
                 continue label$29
                }
                break label$29;
               };
               HEAP32[$12_1 >> 2] = 0;
               break label$2;
              }
              $3_1 = -1;
              if ($0_1 >>> 0 > -65 >>> 0) {
               break label$12
              }
              $0_1 = $0_1 + 11 | 0;
              $3_1 = $0_1 & -8 | 0;
              $7_1 = HEAP32[(0 + 21364 | 0) >> 2] | 0;
              if (!$7_1) {
               break label$12
              }
              $12_1 = 31;
              label$30 : {
               if ($3_1 >>> 0 > 16777215 >>> 0) {
                break label$30
               }
               $0_1 = $0_1 >>> 8 | 0;
               $354_1 = $0_1;
               $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
               $4_1 = $354_1 << $0_1 | 0;
               $361_1 = $4_1;
               $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
               $6_1 = $361_1 << $4_1 | 0;
               $368_1 = $6_1;
               $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
               $0_1 = (($368_1 << $6_1 | 0) >>> 15 | 0) - ($0_1 | $4_1 | 0 | $6_1 | 0) | 0;
               $12_1 = ($0_1 << 1 | 0 | (($3_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
              }
              $4_1 = 0 - $3_1 | 0;
              label$31 : {
               label$32 : {
                label$33 : {
                 label$34 : {
                  $6_1 = HEAP32[(($12_1 << 2 | 0) + 21664 | 0) >> 2] | 0;
                  if ($6_1) {
                   break label$34
                  }
                  $0_1 = 0;
                  $8_1 = 0;
                  break label$33;
                 }
                 $0_1 = 0;
                 $5_1 = $3_1 << (($12_1 | 0) == (31 | 0) ? 0 : 25 - ($12_1 >>> 1 | 0) | 0) | 0;
                 $8_1 = 0;
                 label$35 : while (1) {
                  label$36 : {
                   $2_1 = ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                   if ($2_1 >>> 0 >= $4_1 >>> 0) {
                    break label$36
                   }
                   $4_1 = $2_1;
                   $8_1 = $6_1;
                   if ($4_1) {
                    break label$36
                   }
                   $4_1 = 0;
                   $8_1 = $6_1;
                   $0_1 = $6_1;
                   break label$32;
                  }
                  $2_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
                  $6_1 = HEAP32[(($6_1 + (($5_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                  $0_1 = $2_1 ? (($2_1 | 0) == ($6_1 | 0) ? $0_1 : $2_1) : $0_1;
                  $5_1 = $5_1 << 1 | 0;
                  if ($6_1) {
                   continue label$35
                  }
                  break label$35;
                 };
                }
                label$37 : {
                 if ($0_1 | $8_1 | 0) {
                  break label$37
                 }
                 $0_1 = 2 << $12_1 | 0;
                 $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $7_1 | 0;
                 if (!$0_1) {
                  break label$12
                 }
                 $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                 $459_1 = $0_1;
                 $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                 $6_1 = $459_1 >>> $0_1 | 0;
                 $5_1 = ($6_1 >>> 5 | 0) & 8 | 0;
                 $470_1 = $5_1 | $0_1 | 0;
                 $0_1 = $6_1 >>> $5_1 | 0;
                 $6_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                 $478_1 = $470_1 | $6_1 | 0;
                 $0_1 = $0_1 >>> $6_1 | 0;
                 $6_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                 $486_1 = $478_1 | $6_1 | 0;
                 $0_1 = $0_1 >>> $6_1 | 0;
                 $6_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                 $0_1 = HEAP32[(((($486_1 | $6_1 | 0) + ($0_1 >>> $6_1 | 0) | 0) << 2 | 0) + 21664 | 0) >> 2] | 0;
                }
                if (!$0_1) {
                 break label$31
                }
               }
               label$38 : while (1) {
                $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                $5_1 = $2_1 >>> 0 < $4_1 >>> 0;
                label$39 : {
                 $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                 if ($6_1) {
                  break label$39
                 }
                 $6_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
                }
                $4_1 = $5_1 ? $2_1 : $4_1;
                $8_1 = $5_1 ? $0_1 : $8_1;
                $0_1 = $6_1;
                if ($0_1) {
                 continue label$38
                }
                break label$38;
               };
              }
              if (!$8_1) {
               break label$12
              }
              if ($4_1 >>> 0 >= ((HEAP32[(0 + 21368 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
               break label$12
              }
              $12_1 = $8_1 + $3_1 | 0;
              if ($12_1 >>> 0 <= $8_1 >>> 0) {
               break label$11
              }
              $9_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
              label$40 : {
               $5_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
               if (($5_1 | 0) == ($8_1 | 0)) {
                break label$40
               }
               label$41 : {
                $0_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
                if ((HEAP32[(0 + 21376 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
                 break label$41
                }
                HEAP32[($0_1 + 12 | 0) >> 2] | 0;
               }
               HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
               HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
               break label$3;
              }
              label$42 : {
               $6_1 = $8_1 + 20 | 0;
               $0_1 = HEAP32[$6_1 >> 2] | 0;
               if ($0_1) {
                break label$42
               }
               $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$9
               }
               $6_1 = $8_1 + 16 | 0;
              }
              label$43 : while (1) {
               $2_1 = $6_1;
               $5_1 = $0_1;
               $6_1 = $0_1 + 20 | 0;
               $0_1 = HEAP32[$6_1 >> 2] | 0;
               if ($0_1) {
                continue label$43
               }
               $6_1 = $5_1 + 16 | 0;
               $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$43
               }
               break label$43;
              };
              HEAP32[$2_1 >> 2] = 0;
              break label$3;
             }
             label$44 : {
              $0_1 = HEAP32[(0 + 21368 | 0) >> 2] | 0;
              if ($0_1 >>> 0 < $3_1 >>> 0) {
               break label$44
              }
              $4_1 = HEAP32[(0 + 21380 | 0) >> 2] | 0;
              label$45 : {
               label$46 : {
                $6_1 = $0_1 - $3_1 | 0;
                if ($6_1 >>> 0 < 16 >>> 0) {
                 break label$46
                }
                HEAP32[(0 + 21368 | 0) >> 2] = $6_1;
                $5_1 = $4_1 + $3_1 | 0;
                HEAP32[(0 + 21380 | 0) >> 2] = $5_1;
                HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
                HEAP32[($4_1 + $0_1 | 0) >> 2] = $6_1;
                HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                break label$45;
               }
               HEAP32[(0 + 21380 | 0) >> 2] = 0;
               HEAP32[(0 + 21368 | 0) >> 2] = 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
               $0_1 = $4_1 + $0_1 | 0;
               HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
              }
              $0_1 = $4_1 + 8 | 0;
              break label$1;
             }
             label$47 : {
              $5_1 = HEAP32[(0 + 21372 | 0) >> 2] | 0;
              if ($5_1 >>> 0 <= $3_1 >>> 0) {
               break label$47
              }
              $4_1 = $5_1 - $3_1 | 0;
              HEAP32[(0 + 21372 | 0) >> 2] = $4_1;
              $0_1 = HEAP32[(0 + 21384 | 0) >> 2] | 0;
              $6_1 = $0_1 + $3_1 | 0;
              HEAP32[(0 + 21384 | 0) >> 2] = $6_1;
              HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
              $0_1 = $0_1 + 8 | 0;
              break label$1;
             }
             label$48 : {
              label$49 : {
               if (!(HEAP32[(0 + 21832 | 0) >> 2] | 0)) {
                break label$49
               }
               $4_1 = HEAP32[(0 + 21840 | 0) >> 2] | 0;
               break label$48;
              }
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = -1;
              HEAP32[(i64toi32_i32$1 + 21844 | 0) >> 2] = -1;
              HEAP32[(i64toi32_i32$1 + 21848 | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 4096;
              HEAP32[(i64toi32_i32$1 + 21836 | 0) >> 2] = 4096;
              HEAP32[(i64toi32_i32$1 + 21840 | 0) >> 2] = i64toi32_i32$0;
              HEAP32[(0 + 21832 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
              HEAP32[(0 + 21852 | 0) >> 2] = 0;
              HEAP32[(0 + 21804 | 0) >> 2] = 0;
              $4_1 = 4096;
             }
             $0_1 = 0;
             $7_1 = $3_1 + 47 | 0;
             $2_1 = $4_1 + $7_1 | 0;
             $12_1 = 0 - $4_1 | 0;
             $8_1 = $2_1 & $12_1 | 0;
             if ($8_1 >>> 0 <= $3_1 >>> 0) {
              break label$1
             }
             $0_1 = 0;
             label$50 : {
              $4_1 = HEAP32[(0 + 21800 | 0) >> 2] | 0;
              if (!$4_1) {
               break label$50
              }
              $6_1 = HEAP32[(0 + 21792 | 0) >> 2] | 0;
              $9_1 = $6_1 + $8_1 | 0;
              if ($9_1 >>> 0 <= $6_1 >>> 0) {
               break label$1
              }
              if ($9_1 >>> 0 > $4_1 >>> 0) {
               break label$1
              }
             }
             if ((HEAPU8[(0 + 21804 | 0) >> 0] | 0) & 4 | 0) {
              break label$6
             }
             label$51 : {
              label$52 : {
               label$53 : {
                $4_1 = HEAP32[(0 + 21384 | 0) >> 2] | 0;
                if (!$4_1) {
                 break label$53
                }
                $0_1 = 21808;
                label$54 : while (1) {
                 label$55 : {
                  $6_1 = HEAP32[$0_1 >> 2] | 0;
                  if ($6_1 >>> 0 > $4_1 >>> 0) {
                   break label$55
                  }
                  if (($6_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4_1 >>> 0) {
                   break label$52
                  }
                 }
                 $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                 if ($0_1) {
                  continue label$54
                 }
                 break label$54;
                };
               }
               $5_1 = $1928(0 | 0) | 0;
               if (($5_1 | 0) == (-1 | 0)) {
                break label$7
               }
               $2_1 = $8_1;
               label$56 : {
                $0_1 = HEAP32[(0 + 21836 | 0) >> 2] | 0;
                $4_1 = $0_1 + -1 | 0;
                if (!($4_1 & $5_1 | 0)) {
                 break label$56
                }
                $2_1 = ($8_1 - $5_1 | 0) + (($4_1 + $5_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
               }
               if ($2_1 >>> 0 <= $3_1 >>> 0) {
                break label$7
               }
               if ($2_1 >>> 0 > 2147483646 >>> 0) {
                break label$7
               }
               label$57 : {
                $0_1 = HEAP32[(0 + 21800 | 0) >> 2] | 0;
                if (!$0_1) {
                 break label$57
                }
                $4_1 = HEAP32[(0 + 21792 | 0) >> 2] | 0;
                $6_1 = $4_1 + $2_1 | 0;
                if ($6_1 >>> 0 <= $4_1 >>> 0) {
                 break label$7
                }
                if ($6_1 >>> 0 > $0_1 >>> 0) {
                 break label$7
                }
               }
               $0_1 = $1928($2_1 | 0) | 0;
               if (($0_1 | 0) != ($5_1 | 0)) {
                break label$51
               }
               break label$5;
              }
              $2_1 = ($2_1 - $5_1 | 0) & $12_1 | 0;
              if ($2_1 >>> 0 > 2147483646 >>> 0) {
               break label$7
              }
              $5_1 = $1928($2_1 | 0) | 0;
              if (($5_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
               break label$8
              }
              $0_1 = $5_1;
             }
             label$58 : {
              if (($3_1 + 48 | 0) >>> 0 <= $2_1 >>> 0) {
               break label$58
              }
              if (($0_1 | 0) == (-1 | 0)) {
               break label$58
              }
              label$59 : {
               $4_1 = HEAP32[(0 + 21840 | 0) >> 2] | 0;
               $4_1 = (($7_1 - $2_1 | 0) + $4_1 | 0) & (0 - $4_1 | 0) | 0;
               if ($4_1 >>> 0 <= 2147483646 >>> 0) {
                break label$59
               }
               $5_1 = $0_1;
               break label$5;
              }
              label$60 : {
               if (($1928($4_1 | 0) | 0 | 0) == (-1 | 0)) {
                break label$60
               }
               $2_1 = $4_1 + $2_1 | 0;
               $5_1 = $0_1;
               break label$5;
              }
              $1928(0 - $2_1 | 0 | 0) | 0;
              break label$7;
             }
             $5_1 = $0_1;
             if (($0_1 | 0) != (-1 | 0)) {
              break label$5
             }
             break label$7;
            }
            abort();
           }
           $8_1 = 0;
           break label$2;
          }
          $5_1 = 0;
          break label$3;
         }
         if (($5_1 | 0) != (-1 | 0)) {
          break label$5
         }
        }
        HEAP32[(0 + 21804 | 0) >> 2] = HEAP32[(0 + 21804 | 0) >> 2] | 0 | 4 | 0;
       }
       if ($8_1 >>> 0 > 2147483646 >>> 0) {
        break label$4
       }
       $5_1 = $1928($8_1 | 0) | 0;
       $0_1 = $1928(0 | 0) | 0;
       if ($5_1 >>> 0 >= $0_1 >>> 0) {
        break label$4
       }
       if (($5_1 | 0) == (-1 | 0)) {
        break label$4
       }
       if (($0_1 | 0) == (-1 | 0)) {
        break label$4
       }
       $2_1 = $0_1 - $5_1 | 0;
       if ($2_1 >>> 0 <= ($3_1 + 40 | 0) >>> 0) {
        break label$4
       }
      }
      $0_1 = (HEAP32[(0 + 21792 | 0) >> 2] | 0) + $2_1 | 0;
      HEAP32[(0 + 21792 | 0) >> 2] = $0_1;
      label$61 : {
       if ($0_1 >>> 0 <= (HEAP32[(0 + 21796 | 0) >> 2] | 0) >>> 0) {
        break label$61
       }
       HEAP32[(0 + 21796 | 0) >> 2] = $0_1;
      }
      label$62 : {
       label$63 : {
        label$64 : {
         label$65 : {
          $4_1 = HEAP32[(0 + 21384 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$65
          }
          $0_1 = 21808;
          label$66 : while (1) {
           $6_1 = HEAP32[$0_1 >> 2] | 0;
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($5_1 | 0) == ($6_1 + $8_1 | 0 | 0)) {
            break label$64
           }
           $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           if ($0_1) {
            continue label$66
           }
           break label$63;
          };
         }
         label$67 : {
          label$68 : {
           $0_1 = HEAP32[(0 + 21376 | 0) >> 2] | 0;
           if (!$0_1) {
            break label$68
           }
           if ($5_1 >>> 0 >= $0_1 >>> 0) {
            break label$67
           }
          }
          HEAP32[(0 + 21376 | 0) >> 2] = $5_1;
         }
         $0_1 = 0;
         HEAP32[(0 + 21812 | 0) >> 2] = $2_1;
         HEAP32[(0 + 21808 | 0) >> 2] = $5_1;
         HEAP32[(0 + 21392 | 0) >> 2] = -1;
         HEAP32[(0 + 21396 | 0) >> 2] = HEAP32[(0 + 21832 | 0) >> 2] | 0;
         HEAP32[(0 + 21820 | 0) >> 2] = 0;
         label$69 : while (1) {
          $4_1 = $0_1 << 3 | 0;
          $6_1 = $4_1 + 21400 | 0;
          HEAP32[($4_1 + 21408 | 0) >> 2] = $6_1;
          HEAP32[($4_1 + 21412 | 0) >> 2] = $6_1;
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != (32 | 0)) {
           continue label$69
          }
          break label$69;
         };
         $0_1 = $2_1 + -40 | 0;
         $4_1 = ($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0;
         $6_1 = $0_1 - $4_1 | 0;
         HEAP32[(0 + 21372 | 0) >> 2] = $6_1;
         $4_1 = $5_1 + $4_1 | 0;
         HEAP32[(0 + 21384 | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
         HEAP32[(($5_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
         HEAP32[(0 + 21388 | 0) >> 2] = HEAP32[(0 + 21848 | 0) >> 2] | 0;
         break label$62;
        }
        if ($5_1 >>> 0 <= $4_1 >>> 0) {
         break label$63
        }
        if ($6_1 >>> 0 > $4_1 >>> 0) {
         break label$63
        }
        if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & 8 | 0) {
         break label$63
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
        $0_1 = ($4_1 + 8 | 0) & 7 | 0 ? (-8 - $4_1 | 0) & 7 | 0 : 0;
        $6_1 = $4_1 + $0_1 | 0;
        HEAP32[(0 + 21384 | 0) >> 2] = $6_1;
        $5_1 = (HEAP32[(0 + 21372 | 0) >> 2] | 0) + $2_1 | 0;
        $0_1 = $5_1 - $0_1 | 0;
        HEAP32[(0 + 21372 | 0) >> 2] = $0_1;
        HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
        HEAP32[(($4_1 + $5_1 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 21388 | 0) >> 2] = HEAP32[(0 + 21848 | 0) >> 2] | 0;
        break label$62;
       }
       label$70 : {
        $8_1 = HEAP32[(0 + 21376 | 0) >> 2] | 0;
        if ($5_1 >>> 0 >= $8_1 >>> 0) {
         break label$70
        }
        HEAP32[(0 + 21376 | 0) >> 2] = $5_1;
        $8_1 = $5_1;
       }
       $6_1 = $5_1 + $2_1 | 0;
       $0_1 = 21808;
       label$71 : {
        label$72 : {
         label$73 : {
          label$74 : {
           label$75 : {
            label$76 : {
             label$77 : {
              label$78 : while (1) {
               if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($6_1 | 0)) {
                break label$77
               }
               $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$78
               }
               break label$76;
              };
             }
             if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
              break label$75
             }
            }
            $0_1 = 21808;
            label$79 : while (1) {
             label$80 : {
              $6_1 = HEAP32[$0_1 >> 2] | 0;
              if ($6_1 >>> 0 > $4_1 >>> 0) {
               break label$80
              }
              $6_1 = $6_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
              if ($6_1 >>> 0 > $4_1 >>> 0) {
               break label$74
              }
             }
             $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
             continue label$79;
            };
           }
           HEAP32[$0_1 >> 2] = $5_1;
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
           $12_1 = $5_1 + (($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0) | 0;
           HEAP32[($12_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
           $2_1 = $6_1 + (($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0) | 0;
           $6_1 = ($2_1 - $12_1 | 0) - $3_1 | 0;
           $3_1 = $12_1 + $3_1 | 0;
           label$81 : {
            if (($4_1 | 0) != ($2_1 | 0)) {
             break label$81
            }
            HEAP32[(0 + 21384 | 0) >> 2] = $3_1;
            $0_1 = (HEAP32[(0 + 21372 | 0) >> 2] | 0) + $6_1 | 0;
            HEAP32[(0 + 21372 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            break label$72;
           }
           label$82 : {
            if ((HEAP32[(0 + 21380 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
             break label$82
            }
            HEAP32[(0 + 21380 | 0) >> 2] = $3_1;
            $0_1 = (HEAP32[(0 + 21368 | 0) >> 2] | 0) + $6_1 | 0;
            HEAP32[(0 + 21368 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            HEAP32[($3_1 + $0_1 | 0) >> 2] = $0_1;
            break label$72;
           }
           label$83 : {
            $0_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
            if (($0_1 & 3 | 0 | 0) != (1 | 0)) {
             break label$83
            }
            $7_1 = $0_1 & -8 | 0;
            label$84 : {
             label$85 : {
              if ($0_1 >>> 0 > 255 >>> 0) {
               break label$85
              }
              $4_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
              label$86 : {
               $5_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
               $9_1 = $0_1 >>> 3 | 0;
               $0_1 = ($9_1 << 3 | 0) + 21400 | 0;
               if (($5_1 | 0) == ($0_1 | 0)) {
                break label$86
               }
              }
              label$87 : {
               if (($4_1 | 0) != ($5_1 | 0)) {
                break label$87
               }
               HEAP32[(0 + 21360 | 0) >> 2] = (HEAP32[(0 + 21360 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9_1 | 0) | 0) | 0;
               break label$84;
              }
              label$88 : {
               if (($4_1 | 0) == ($0_1 | 0)) {
                break label$88
               }
              }
              HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
              HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
              break label$84;
             }
             $9_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
             label$89 : {
              label$90 : {
               $5_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
               if (($5_1 | 0) == ($2_1 | 0)) {
                break label$90
               }
               label$91 : {
                $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
                if ($8_1 >>> 0 > $0_1 >>> 0) {
                 break label$91
                }
                HEAP32[($0_1 + 12 | 0) >> 2] | 0;
               }
               HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
               HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
               break label$89;
              }
              label$92 : {
               $0_1 = $2_1 + 20 | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1) {
                break label$92
               }
               $0_1 = $2_1 + 16 | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1) {
                break label$92
               }
               $5_1 = 0;
               break label$89;
              }
              label$93 : while (1) {
               $8_1 = $0_1;
               $5_1 = $4_1;
               $0_1 = $4_1 + 20 | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1) {
                continue label$93
               }
               $0_1 = $5_1 + 16 | 0;
               $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
               if ($4_1) {
                continue label$93
               }
               break label$93;
              };
              HEAP32[$8_1 >> 2] = 0;
             }
             if (!$9_1) {
              break label$84
             }
             label$94 : {
              label$95 : {
               $4_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
               $0_1 = ($4_1 << 2 | 0) + 21664 | 0;
               if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
                break label$95
               }
               HEAP32[$0_1 >> 2] = $5_1;
               if ($5_1) {
                break label$94
               }
               HEAP32[(0 + 21364 | 0) >> 2] = (HEAP32[(0 + 21364 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
               break label$84;
              }
              HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
              if (!$5_1) {
               break label$84
              }
             }
             HEAP32[($5_1 + 24 | 0) >> 2] = $9_1;
             label$96 : {
              $0_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
              if (!$0_1) {
               break label$96
              }
              HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
              HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
             }
             $0_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
             if (!$0_1) {
              break label$84
             }
             HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
             HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
            }
            $6_1 = $7_1 + $6_1 | 0;
            $2_1 = $2_1 + $7_1 | 0;
           }
           HEAP32[($2_1 + 4 | 0) >> 2] = (HEAP32[($2_1 + 4 | 0) >> 2] | 0) & -2 | 0;
           HEAP32[($3_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
           HEAP32[($3_1 + $6_1 | 0) >> 2] = $6_1;
           label$97 : {
            if ($6_1 >>> 0 > 255 >>> 0) {
             break label$97
            }
            $4_1 = $6_1 >>> 3 | 0;
            $0_1 = ($4_1 << 3 | 0) + 21400 | 0;
            label$98 : {
             label$99 : {
              $6_1 = HEAP32[(0 + 21360 | 0) >> 2] | 0;
              $4_1 = 1 << $4_1 | 0;
              if ($6_1 & $4_1 | 0) {
               break label$99
              }
              HEAP32[(0 + 21360 | 0) >> 2] = $6_1 | $4_1 | 0;
              $4_1 = $0_1;
              break label$98;
             }
             $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
            HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
            HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
            break label$72;
           }
           $0_1 = 31;
           label$100 : {
            if ($6_1 >>> 0 > 16777215 >>> 0) {
             break label$100
            }
            $0_1 = $6_1 >>> 8 | 0;
            $1194_1 = $0_1;
            $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
            $4_1 = $1194_1 << $0_1 | 0;
            $1201_1 = $4_1;
            $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
            $5_1 = $1201_1 << $4_1 | 0;
            $1208_1 = $5_1;
            $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
            $0_1 = (($1208_1 << $5_1 | 0) >>> 15 | 0) - ($0_1 | $4_1 | 0 | $5_1 | 0) | 0;
            $0_1 = ($0_1 << 1 | 0 | (($6_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
           }
           HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
           i64toi32_i32$1 = $3_1;
           i64toi32_i32$0 = 0;
           HEAP32[($3_1 + 16 | 0) >> 2] = 0;
           HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
           $4_1 = ($0_1 << 2 | 0) + 21664 | 0;
           label$101 : {
            label$102 : {
             $5_1 = HEAP32[(0 + 21364 | 0) >> 2] | 0;
             $8_1 = 1 << $0_1 | 0;
             if ($5_1 & $8_1 | 0) {
              break label$102
             }
             HEAP32[(0 + 21364 | 0) >> 2] = $5_1 | $8_1 | 0;
             HEAP32[$4_1 >> 2] = $3_1;
             HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
             break label$101;
            }
            $0_1 = $6_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
            $5_1 = HEAP32[$4_1 >> 2] | 0;
            label$103 : while (1) {
             $4_1 = $5_1;
             if (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($6_1 | 0)) {
              break label$73
             }
             $5_1 = $0_1 >>> 29 | 0;
             $0_1 = $0_1 << 1 | 0;
             $8_1 = ($4_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
             $5_1 = HEAP32[$8_1 >> 2] | 0;
             if ($5_1) {
              continue label$103
             }
             break label$103;
            };
            HEAP32[$8_1 >> 2] = $3_1;
            HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
           }
           HEAP32[($3_1 + 12 | 0) >> 2] = $3_1;
           HEAP32[($3_1 + 8 | 0) >> 2] = $3_1;
           break label$72;
          }
          $0_1 = $2_1 + -40 | 0;
          $8_1 = ($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0;
          $12_1 = $0_1 - $8_1 | 0;
          HEAP32[(0 + 21372 | 0) >> 2] = $12_1;
          $8_1 = $5_1 + $8_1 | 0;
          HEAP32[(0 + 21384 | 0) >> 2] = $8_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = $12_1 | 1 | 0;
          HEAP32[(($5_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 21388 | 0) >> 2] = HEAP32[(0 + 21848 | 0) >> 2] | 0;
          $0_1 = ($6_1 + (($6_1 + -39 | 0) & 7 | 0 ? (39 - $6_1 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
          $8_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = 27;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 21816 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 21820 | 0) >> 2] | 0;
          $1330_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $8_1 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1330_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 21808 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 21812 | 0) >> 2] | 0;
          $1332_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $8_1;
          HEAP32[($8_1 + 8 | 0) >> 2] = $1332_1;
          HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 21816 | 0) >> 2] = $8_1 + 8 | 0;
          HEAP32[(0 + 21812 | 0) >> 2] = $2_1;
          HEAP32[(0 + 21808 | 0) >> 2] = $5_1;
          HEAP32[(0 + 21820 | 0) >> 2] = 0;
          $0_1 = $8_1 + 24 | 0;
          label$104 : while (1) {
           HEAP32[($0_1 + 4 | 0) >> 2] = 7;
           $5_1 = $0_1 + 8 | 0;
           $0_1 = $0_1 + 4 | 0;
           if ($6_1 >>> 0 > $5_1 >>> 0) {
            continue label$104
           }
           break label$104;
          };
          if (($8_1 | 0) == ($4_1 | 0)) {
           break label$62
          }
          HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
          $2_1 = $8_1 - $4_1 | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
          HEAP32[$8_1 >> 2] = $2_1;
          label$105 : {
           if ($2_1 >>> 0 > 255 >>> 0) {
            break label$105
           }
           $6_1 = $2_1 >>> 3 | 0;
           $0_1 = ($6_1 << 3 | 0) + 21400 | 0;
           label$106 : {
            label$107 : {
             $5_1 = HEAP32[(0 + 21360 | 0) >> 2] | 0;
             $6_1 = 1 << $6_1 | 0;
             if ($5_1 & $6_1 | 0) {
              break label$107
             }
             HEAP32[(0 + 21360 | 0) >> 2] = $5_1 | $6_1 | 0;
             $6_1 = $0_1;
             break label$106;
            }
            $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           }
           HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
           HEAP32[($6_1 + 12 | 0) >> 2] = $4_1;
           HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
           HEAP32[($4_1 + 8 | 0) >> 2] = $6_1;
           break label$62;
          }
          $0_1 = 31;
          label$108 : {
           if ($2_1 >>> 0 > 16777215 >>> 0) {
            break label$108
           }
           $0_1 = $2_1 >>> 8 | 0;
           $1393_1 = $0_1;
           $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
           $6_1 = $1393_1 << $0_1 | 0;
           $1400_1 = $6_1;
           $6_1 = (($6_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
           $5_1 = $1400_1 << $6_1 | 0;
           $1407_1 = $5_1;
           $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
           $0_1 = (($1407_1 << $5_1 | 0) >>> 15 | 0) - ($0_1 | $6_1 | 0 | $5_1 | 0) | 0;
           $0_1 = ($0_1 << 1 | 0 | (($2_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
          }
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$0 = 0;
          HEAP32[($4_1 + 16 | 0) >> 2] = 0;
          HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
          $6_1 = ($0_1 << 2 | 0) + 21664 | 0;
          label$109 : {
           label$110 : {
            $5_1 = HEAP32[(0 + 21364 | 0) >> 2] | 0;
            $8_1 = 1 << $0_1 | 0;
            if ($5_1 & $8_1 | 0) {
             break label$110
            }
            HEAP32[(0 + 21364 | 0) >> 2] = $5_1 | $8_1 | 0;
            HEAP32[$6_1 >> 2] = $4_1;
            HEAP32[($4_1 + 24 | 0) >> 2] = $6_1;
            break label$109;
           }
           $0_1 = $2_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
           $5_1 = HEAP32[$6_1 >> 2] | 0;
           label$111 : while (1) {
            $6_1 = $5_1;
            if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($2_1 | 0)) {
             break label$71
            }
            $5_1 = $0_1 >>> 29 | 0;
            $0_1 = $0_1 << 1 | 0;
            $8_1 = ($6_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
            $5_1 = HEAP32[$8_1 >> 2] | 0;
            if ($5_1) {
             continue label$111
            }
            break label$111;
           };
           HEAP32[$8_1 >> 2] = $4_1;
           HEAP32[($4_1 + 24 | 0) >> 2] = $6_1;
          }
          HEAP32[($4_1 + 12 | 0) >> 2] = $4_1;
          HEAP32[($4_1 + 8 | 0) >> 2] = $4_1;
          break label$62;
         }
         $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
         HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
         HEAP32[($3_1 + 24 | 0) >> 2] = 0;
         HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
        }
        $0_1 = $12_1 + 8 | 0;
        break label$1;
       }
       $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
       HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 24 | 0) >> 2] = 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
      }
      $0_1 = HEAP32[(0 + 21372 | 0) >> 2] | 0;
      if ($0_1 >>> 0 <= $3_1 >>> 0) {
       break label$4
      }
      $4_1 = $0_1 - $3_1 | 0;
      HEAP32[(0 + 21372 | 0) >> 2] = $4_1;
      $0_1 = HEAP32[(0 + 21384 | 0) >> 2] | 0;
      $6_1 = $0_1 + $3_1 | 0;
      HEAP32[(0 + 21384 | 0) >> 2] = $6_1;
      HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $0_1 = $0_1 + 8 | 0;
      break label$1;
     }
     HEAP32[($680() | 0) >> 2] = 48;
     $0_1 = 0;
     break label$1;
    }
    label$112 : {
     if (!$9_1) {
      break label$112
     }
     label$113 : {
      label$114 : {
       $6_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
       $0_1 = ($6_1 << 2 | 0) + 21664 | 0;
       if (($8_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
        break label$114
       }
       HEAP32[$0_1 >> 2] = $5_1;
       if ($5_1) {
        break label$113
       }
       $7_1 = $7_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
       HEAP32[(0 + 21364 | 0) >> 2] = $7_1;
       break label$112;
      }
      HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($8_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
      if (!$5_1) {
       break label$112
      }
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = $9_1;
     label$115 : {
      $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$115
      }
      HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
     }
     $0_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$112
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
    }
    label$116 : {
     label$117 : {
      if ($4_1 >>> 0 > 15 >>> 0) {
       break label$117
      }
      $0_1 = $4_1 + $3_1 | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
      $0_1 = $8_1 + $0_1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$116;
     }
     HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($12_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
     HEAP32[($12_1 + $4_1 | 0) >> 2] = $4_1;
     label$118 : {
      if ($4_1 >>> 0 > 255 >>> 0) {
       break label$118
      }
      $4_1 = $4_1 >>> 3 | 0;
      $0_1 = ($4_1 << 3 | 0) + 21400 | 0;
      label$119 : {
       label$120 : {
        $6_1 = HEAP32[(0 + 21360 | 0) >> 2] | 0;
        $4_1 = 1 << $4_1 | 0;
        if ($6_1 & $4_1 | 0) {
         break label$120
        }
        HEAP32[(0 + 21360 | 0) >> 2] = $6_1 | $4_1 | 0;
        $4_1 = $0_1;
        break label$119;
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = $12_1;
      HEAP32[($4_1 + 12 | 0) >> 2] = $12_1;
      HEAP32[($12_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($12_1 + 8 | 0) >> 2] = $4_1;
      break label$116;
     }
     $0_1 = 31;
     label$121 : {
      if ($4_1 >>> 0 > 16777215 >>> 0) {
       break label$121
      }
      $0_1 = $4_1 >>> 8 | 0;
      $1640_1 = $0_1;
      $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
      $6_1 = $1640_1 << $0_1 | 0;
      $1647_1 = $6_1;
      $6_1 = (($6_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
      $3_1 = $1647_1 << $6_1 | 0;
      $1654_1 = $3_1;
      $3_1 = (($3_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
      $0_1 = (($1654_1 << $3_1 | 0) >>> 15 | 0) - ($0_1 | $6_1 | 0 | $3_1 | 0) | 0;
      $0_1 = ($0_1 << 1 | 0 | (($4_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
     }
     HEAP32[($12_1 + 28 | 0) >> 2] = $0_1;
     i64toi32_i32$1 = $12_1;
     i64toi32_i32$0 = 0;
     HEAP32[($12_1 + 16 | 0) >> 2] = 0;
     HEAP32[($12_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $6_1 = ($0_1 << 2 | 0) + 21664 | 0;
     label$122 : {
      label$123 : {
       label$124 : {
        $3_1 = 1 << $0_1 | 0;
        if ($7_1 & $3_1 | 0) {
         break label$124
        }
        HEAP32[(0 + 21364 | 0) >> 2] = $7_1 | $3_1 | 0;
        HEAP32[$6_1 >> 2] = $12_1;
        HEAP32[($12_1 + 24 | 0) >> 2] = $6_1;
        break label$123;
       }
       $0_1 = $4_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
       $3_1 = HEAP32[$6_1 >> 2] | 0;
       label$125 : while (1) {
        $6_1 = $3_1;
        if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4_1 | 0)) {
         break label$122
        }
        $3_1 = $0_1 >>> 29 | 0;
        $0_1 = $0_1 << 1 | 0;
        $5_1 = ($6_1 + ($3_1 & 4 | 0) | 0) + 16 | 0;
        $3_1 = HEAP32[$5_1 >> 2] | 0;
        if ($3_1) {
         continue label$125
        }
        break label$125;
       };
       HEAP32[$5_1 >> 2] = $12_1;
       HEAP32[($12_1 + 24 | 0) >> 2] = $6_1;
      }
      HEAP32[($12_1 + 12 | 0) >> 2] = $12_1;
      HEAP32[($12_1 + 8 | 0) >> 2] = $12_1;
      break label$116;
     }
     $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $12_1;
     HEAP32[($6_1 + 8 | 0) >> 2] = $12_1;
     HEAP32[($12_1 + 24 | 0) >> 2] = 0;
     HEAP32[($12_1 + 12 | 0) >> 2] = $6_1;
     HEAP32[($12_1 + 8 | 0) >> 2] = $0_1;
    }
    $0_1 = $8_1 + 8 | 0;
    break label$1;
   }
   label$126 : {
    if (!$11_1) {
     break label$126
    }
    label$127 : {
     label$128 : {
      $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
      $0_1 = ($6_1 << 2 | 0) + 21664 | 0;
      if (($5_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
       break label$128
      }
      HEAP32[$0_1 >> 2] = $8_1;
      if ($8_1) {
       break label$127
      }
      HEAP32[(0 + 21364 | 0) >> 2] = $9_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
      break label$126;
     }
     HEAP32[($11_1 + ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $8_1;
     if (!$8_1) {
      break label$126
     }
    }
    HEAP32[($8_1 + 24 | 0) >> 2] = $11_1;
    label$129 : {
     $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$129
     }
     HEAP32[($8_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
    }
    $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$126
    }
    HEAP32[($8_1 + 20 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
   }
   label$130 : {
    label$131 : {
     if ($4_1 >>> 0 > 15 >>> 0) {
      break label$131
     }
     $0_1 = $4_1 + $3_1 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
     $0_1 = $5_1 + $0_1 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$130;
    }
    HEAP32[($5_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
    HEAP32[($10_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
    HEAP32[($10_1 + $4_1 | 0) >> 2] = $4_1;
    label$132 : {
     if (!$7_1) {
      break label$132
     }
     $3_1 = $7_1 >>> 3 | 0;
     $6_1 = ($3_1 << 3 | 0) + 21400 | 0;
     $0_1 = HEAP32[(0 + 21380 | 0) >> 2] | 0;
     label$133 : {
      label$134 : {
       $3_1 = 1 << $3_1 | 0;
       if ($3_1 & $2_1 | 0) {
        break label$134
       }
       HEAP32[(0 + 21360 | 0) >> 2] = $3_1 | $2_1 | 0;
       $3_1 = $6_1;
       break label$133;
      }
      $3_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    }
    HEAP32[(0 + 21380 | 0) >> 2] = $10_1;
    HEAP32[(0 + 21368 | 0) >> 2] = $4_1;
   }
   $0_1 = $5_1 + 8 | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1924($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $5_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $6_1 = 0, $399_1 = 0, $406_1 = 0, $413_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = $0_1 + -8 | 0;
   $2_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
   $0_1 = $2_1 & -8 | 0;
   $3_1 = $1_1 + $0_1 | 0;
   label$2 : {
    if ($2_1 & 1 | 0) {
     break label$2
    }
    if (!($2_1 & 3 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $1_1 - $2_1 | 0;
    $4_1 = HEAP32[(0 + 21376 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $4_1 >>> 0) {
     break label$1
    }
    $0_1 = $2_1 + $0_1 | 0;
    label$3 : {
     if ((HEAP32[(0 + 21380 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      label$5 : {
       $6_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       $7_1 = $2_1 >>> 3 | 0;
       $2_1 = ($7_1 << 3 | 0) + 21400 | 0;
       if (($6_1 | 0) == ($2_1 | 0)) {
        break label$5
       }
      }
      label$6 : {
       if (($5_1 | 0) != ($6_1 | 0)) {
        break label$6
       }
       HEAP32[(0 + 21360 | 0) >> 2] = (HEAP32[(0 + 21360 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       break label$2;
      }
      label$7 : {
       if (($5_1 | 0) == ($2_1 | 0)) {
        break label$7
       }
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
      break label$2;
     }
     $7_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($5_1 | 0) == ($1_1 | 0)) {
        break label$9
       }
       label$10 : {
        $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
        if ($4_1 >>> 0 > $2_1 >>> 0) {
         break label$10
        }
        HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
       break label$8;
      }
      label$11 : {
       $2_1 = $1_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$11
       }
       $2_1 = $1_1 + 16 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$11
       }
       $5_1 = 0;
       break label$8;
      }
      label$12 : while (1) {
       $6_1 = $2_1;
       $5_1 = $4_1;
       $2_1 = $5_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        continue label$12
       }
       $2_1 = $5_1 + 16 | 0;
       $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$12
       }
       break label$12;
      };
      HEAP32[$6_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$13 : {
      label$14 : {
       $4_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
       $2_1 = ($4_1 << 2 | 0) + 21664 | 0;
       if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$14
       }
       HEAP32[$2_1 >> 2] = $5_1;
       if ($5_1) {
        break label$13
       }
       HEAP32[(0 + 21364 | 0) >> 2] = (HEAP32[(0 + 21364 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
      if (!$5_1) {
       break label$2
      }
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
     label$15 : {
      $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$15
      }
      HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     }
     $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$2
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     break label$2;
    }
    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (($2_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 21368 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
    return;
   }
   if ($3_1 >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 1 | 0)) {
    break label$1
   }
   label$16 : {
    label$17 : {
     if ($2_1 & 2 | 0) {
      break label$17
     }
     label$18 : {
      if ((HEAP32[(0 + 21384 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$18
      }
      HEAP32[(0 + 21384 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 21372 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 21372 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      if (($1_1 | 0) != (HEAP32[(0 + 21380 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 21368 | 0) >> 2] = 0;
      HEAP32[(0 + 21380 | 0) >> 2] = 0;
      return;
     }
     label$19 : {
      if ((HEAP32[(0 + 21380 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$19
      }
      HEAP32[(0 + 21380 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 21368 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 21368 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
      return;
     }
     $0_1 = ($2_1 & -8 | 0) + $0_1 | 0;
     label$20 : {
      label$21 : {
       if ($2_1 >>> 0 > 255 >>> 0) {
        break label$21
       }
       $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       label$22 : {
        $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
        $3_1 = $2_1 >>> 3 | 0;
        $2_1 = ($3_1 << 3 | 0) + 21400 | 0;
        if (($5_1 | 0) == ($2_1 | 0)) {
         break label$22
        }
        HEAP32[(0 + 21376 | 0) >> 2] | 0;
       }
       label$23 : {
        if (($4_1 | 0) != ($5_1 | 0)) {
         break label$23
        }
        HEAP32[(0 + 21360 | 0) >> 2] = (HEAP32[(0 + 21360 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
        break label$20;
       }
       label$24 : {
        if (($4_1 | 0) == ($2_1 | 0)) {
         break label$24
        }
        HEAP32[(0 + 21376 | 0) >> 2] | 0;
       }
       HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
       break label$20;
      }
      $7_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
      label$25 : {
       label$26 : {
        $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($5_1 | 0) == ($3_1 | 0)) {
         break label$26
        }
        label$27 : {
         $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
         if ((HEAP32[(0 + 21376 | 0) >> 2] | 0) >>> 0 > $2_1 >>> 0) {
          break label$27
         }
         HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        }
        HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
        HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
        break label$25;
       }
       label$28 : {
        $2_1 = $3_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$28
        }
        $2_1 = $3_1 + 16 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$28
        }
        $5_1 = 0;
        break label$25;
       }
       label$29 : while (1) {
        $6_1 = $2_1;
        $5_1 = $4_1;
        $2_1 = $5_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         continue label$29
        }
        $2_1 = $5_1 + 16 | 0;
        $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$29
        }
        break label$29;
       };
       HEAP32[$6_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$20
      }
      label$30 : {
       label$31 : {
        $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
        $2_1 = ($4_1 << 2 | 0) + 21664 | 0;
        if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($3_1 | 0)) {
         break label$31
        }
        HEAP32[$2_1 >> 2] = $5_1;
        if ($5_1) {
         break label$30
        }
        HEAP32[(0 + 21364 | 0) >> 2] = (HEAP32[(0 + 21364 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$20;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($3_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
       if (!$5_1) {
        break label$20
       }
      }
      HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
      label$32 : {
       $2_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$32
       }
       HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
      }
      $2_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$20
      }
      HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
     if (($1_1 | 0) != (HEAP32[(0 + 21380 | 0) >> 2] | 0 | 0)) {
      break label$16
     }
     HEAP32[(0 + 21368 | 0) >> 2] = $0_1;
     return;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
   }
   label$33 : {
    if ($0_1 >>> 0 > 255 >>> 0) {
     break label$33
    }
    $2_1 = $0_1 >>> 3 | 0;
    $0_1 = ($2_1 << 3 | 0) + 21400 | 0;
    label$34 : {
     label$35 : {
      $4_1 = HEAP32[(0 + 21360 | 0) >> 2] | 0;
      $2_1 = 1 << $2_1 | 0;
      if ($4_1 & $2_1 | 0) {
       break label$35
      }
      HEAP32[(0 + 21360 | 0) >> 2] = $4_1 | $2_1 | 0;
      $2_1 = $0_1;
      break label$34;
     }
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
    return;
   }
   $2_1 = 31;
   label$36 : {
    if ($0_1 >>> 0 > 16777215 >>> 0) {
     break label$36
    }
    $2_1 = $0_1 >>> 8 | 0;
    $399_1 = $2_1;
    $2_1 = (($2_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4_1 = $399_1 << $2_1 | 0;
    $406_1 = $4_1;
    $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $5_1 = $406_1 << $4_1 | 0;
    $413_1 = $5_1;
    $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $2_1 = (($413_1 << $5_1 | 0) >>> 15 | 0) - ($2_1 | $4_1 | 0 | $5_1 | 0) | 0;
    $2_1 = ($2_1 << 1 | 0 | (($0_1 >>> ($2_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 0;
   HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
   $4_1 = ($2_1 << 2 | 0) + 21664 | 0;
   label$37 : {
    label$38 : {
     label$39 : {
      label$40 : {
       $5_1 = HEAP32[(0 + 21364 | 0) >> 2] | 0;
       $3_1 = 1 << $2_1 | 0;
       if ($5_1 & $3_1 | 0) {
        break label$40
       }
       HEAP32[(0 + 21364 | 0) >> 2] = $5_1 | $3_1 | 0;
       HEAP32[$4_1 >> 2] = $1_1;
       HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
       break label$39;
      }
      $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
      $5_1 = HEAP32[$4_1 >> 2] | 0;
      label$41 : while (1) {
       $4_1 = $5_1;
       if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
        break label$38
       }
       $5_1 = $2_1 >>> 29 | 0;
       $2_1 = $2_1 << 1 | 0;
       $3_1 = ($4_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        continue label$41
       }
       break label$41;
      };
      HEAP32[$3_1 >> 2] = $1_1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $1_1;
     break label$37;
    }
    $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
   }
   $1_1 = (HEAP32[(0 + 21392 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 21392 | 0) >> 2] = $1_1 ? $1_1 : -1;
  }
 }
 
 function $1925($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return $1923($1_1 | 0) | 0 | 0;
  }
  label$2 : {
   if ($1_1 >>> 0 < -64 >>> 0) {
    break label$2
   }
   HEAP32[($680() | 0) >> 2] = 48;
   return 0 | 0;
  }
  label$3 : {
   $2_1 = $1926($0_1 + -8 | 0 | 0, ($1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0) | 0) | 0;
   if (!$2_1) {
    break label$3
   }
   return $2_1 + 8 | 0 | 0;
  }
  label$4 : {
   $2_1 = $1923($1_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   return 0 | 0;
  }
  $3_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
  $3_1 = ($3_1 & 3 | 0 ? -4 : -8) + ($3_1 & -8 | 0) | 0;
  $1932($2_1 | 0, $0_1 | 0, ($3_1 >>> 0 < $1_1 >>> 0 ? $3_1 : $1_1) | 0) | 0;
  $1924($0_1 | 0);
  return $2_1 | 0;
 }
 
 function $1926($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $5_1 = 0, $7_1 = 0, $4_1 = 0, $2_1 = 0, $6_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = $2_1 & 3 | 0;
  $4_1 = $2_1 & -8 | 0;
  $5_1 = $0_1 + $4_1 | 0;
  label$1 : {
   $6_1 = HEAP32[(0 + 21376 | 0) >> 2] | 0;
   if ($6_1 >>> 0 > $0_1 >>> 0) {
    break label$1
   }
   if (($3_1 | 0) == (1 | 0)) {
    break label$1
   }
  }
  label$2 : {
   label$3 : {
    if ($3_1) {
     break label$3
    }
    $3_1 = 0;
    if ($1_1 >>> 0 < 256 >>> 0) {
     break label$2
    }
    label$4 : {
     if ($4_1 >>> 0 < ($1_1 + 4 | 0) >>> 0) {
      break label$4
     }
     $3_1 = $0_1;
     if (($4_1 - $1_1 | 0) >>> 0 <= ((HEAP32[(0 + 21840 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
      break label$2
     }
    }
    return 0 | 0;
   }
   label$5 : {
    label$6 : {
     if ($4_1 >>> 0 < $1_1 >>> 0) {
      break label$6
     }
     $3_1 = $4_1 - $1_1 | 0;
     if ($3_1 >>> 0 < 16 >>> 0) {
      break label$5
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $1_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     $1927($1_1 | 0, $3_1 | 0);
     break label$5;
    }
    $3_1 = 0;
    label$7 : {
     if ((HEAP32[(0 + 21384 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
      break label$7
     }
     $5_1 = (HEAP32[(0 + 21372 | 0) >> 2] | 0) + $4_1 | 0;
     if ($5_1 >>> 0 <= $1_1 >>> 0) {
      break label$2
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $3_1 = $0_1 + $1_1 | 0;
     $1_1 = $5_1 - $1_1 | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[(0 + 21372 | 0) >> 2] = $1_1;
     HEAP32[(0 + 21384 | 0) >> 2] = $3_1;
     break label$5;
    }
    label$8 : {
     if ((HEAP32[(0 + 21380 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
      break label$8
     }
     $3_1 = 0;
     $5_1 = (HEAP32[(0 + 21368 | 0) >> 2] | 0) + $4_1 | 0;
     if ($5_1 >>> 0 < $1_1 >>> 0) {
      break label$2
     }
     label$9 : {
      label$10 : {
       $3_1 = $5_1 - $1_1 | 0;
       if ($3_1 >>> 0 < 16 >>> 0) {
        break label$10
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
       $1_1 = $0_1 + $1_1 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 1 | 0;
       $5_1 = $0_1 + $5_1 | 0;
       HEAP32[$5_1 >> 2] = $3_1;
       HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -2 | 0;
       break label$9;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $5_1 | 0 | 2 | 0;
      $1_1 = $0_1 + $5_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $3_1 = 0;
      $1_1 = 0;
     }
     HEAP32[(0 + 21380 | 0) >> 2] = $1_1;
     HEAP32[(0 + 21368 | 0) >> 2] = $3_1;
     break label$5;
    }
    $3_1 = 0;
    $7_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    if ($7_1 & 2 | 0) {
     break label$2
    }
    $8_1 = ($7_1 & -8 | 0) + $4_1 | 0;
    if ($8_1 >>> 0 < $1_1 >>> 0) {
     break label$2
    }
    $9_1 = $8_1 - $1_1 | 0;
    label$11 : {
     label$12 : {
      if ($7_1 >>> 0 > 255 >>> 0) {
       break label$12
      }
      $3_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
      label$13 : {
       $5_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       $7_1 = $7_1 >>> 3 | 0;
       $4_1 = ($7_1 << 3 | 0) + 21400 | 0;
       if (($5_1 | 0) == ($4_1 | 0)) {
        break label$13
       }
      }
      label$14 : {
       if (($3_1 | 0) != ($5_1 | 0)) {
        break label$14
       }
       HEAP32[(0 + 21360 | 0) >> 2] = (HEAP32[(0 + 21360 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       break label$11;
      }
      label$15 : {
       if (($3_1 | 0) == ($4_1 | 0)) {
        break label$15
       }
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
      break label$11;
     }
     $10_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
     label$16 : {
      label$17 : {
       $7_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       if (($7_1 | 0) == ($5_1 | 0)) {
        break label$17
       }
       label$18 : {
        $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
        if ($6_1 >>> 0 > $3_1 >>> 0) {
         break label$18
        }
        HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = $7_1;
       HEAP32[($7_1 + 8 | 0) >> 2] = $3_1;
       break label$16;
      }
      label$19 : {
       $3_1 = $5_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$19
       }
       $3_1 = $5_1 + 16 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$19
       }
       $7_1 = 0;
       break label$16;
      }
      label$20 : while (1) {
       $6_1 = $3_1;
       $7_1 = $4_1;
       $3_1 = $7_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        continue label$20
       }
       $3_1 = $7_1 + 16 | 0;
       $4_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$20
       }
       break label$20;
      };
      HEAP32[$6_1 >> 2] = 0;
     }
     if (!$10_1) {
      break label$11
     }
     label$21 : {
      label$22 : {
       $4_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
       $3_1 = ($4_1 << 2 | 0) + 21664 | 0;
       if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($5_1 | 0)) {
        break label$22
       }
       HEAP32[$3_1 >> 2] = $7_1;
       if ($7_1) {
        break label$21
       }
       HEAP32[(0 + 21364 | 0) >> 2] = (HEAP32[(0 + 21364 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$11;
      }
      HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $7_1;
      if (!$7_1) {
       break label$11
      }
     }
     HEAP32[($7_1 + 24 | 0) >> 2] = $10_1;
     label$23 : {
      $3_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$23
      }
      HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $7_1;
     }
     $5_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$11
     }
     HEAP32[($7_1 + 20 | 0) >> 2] = $5_1;
     HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
    }
    label$24 : {
     if ($9_1 >>> 0 > 15 >>> 0) {
      break label$24
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $8_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $8_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$5;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
    $1_1 = $0_1 + $1_1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $9_1 | 3 | 0;
    $5_1 = $0_1 + $8_1 | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
    $1927($1_1 | 0, $9_1 | 0);
   }
   $3_1 = $0_1;
  }
  return $3_1 | 0;
 }
 
 function $1927($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $6_1 = 0, $5_1 = 0, $2_1 = 0, $7_1 = 0, $4_1 = 0, $382_1 = 0, $389_1 = 0, $396_1 = 0;
  $2_1 = $0_1 + $1_1 | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($3_1 & 1 | 0) {
     break label$2
    }
    if (!($3_1 & 3 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $3_1 + $1_1 | 0;
    label$3 : {
     $0_1 = $0_1 - $3_1 | 0;
     if ((HEAP32[(0 + 21380 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
      break label$3
     }
     $4_1 = HEAP32[(0 + 21376 | 0) >> 2] | 0;
     label$4 : {
      if ($3_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      label$5 : {
       $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
       $7_1 = $3_1 >>> 3 | 0;
       $3_1 = ($7_1 << 3 | 0) + 21400 | 0;
       if (($6_1 | 0) == ($3_1 | 0)) {
        break label$5
       }
      }
      label$6 : {
       if (($5_1 | 0) != ($6_1 | 0)) {
        break label$6
       }
       HEAP32[(0 + 21360 | 0) >> 2] = (HEAP32[(0 + 21360 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       break label$2;
      }
      label$7 : {
       if (($5_1 | 0) == ($3_1 | 0)) {
        break label$7
       }
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
      break label$2;
     }
     $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($0_1 | 0)) {
        break label$9
       }
       label$10 : {
        $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        if ($4_1 >>> 0 > $3_1 >>> 0) {
         break label$10
        }
        HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
       break label$8;
      }
      label$11 : {
       $3_1 = $0_1 + 20 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        break label$11
       }
       $3_1 = $0_1 + 16 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        break label$11
       }
       $6_1 = 0;
       break label$8;
      }
      label$12 : while (1) {
       $4_1 = $3_1;
       $6_1 = $5_1;
       $3_1 = $6_1 + 20 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        continue label$12
       }
       $3_1 = $6_1 + 16 | 0;
       $5_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       if ($5_1) {
        continue label$12
       }
       break label$12;
      };
      HEAP32[$4_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$13 : {
      label$14 : {
       $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
       $3_1 = ($5_1 << 2 | 0) + 21664 | 0;
       if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
        break label$14
       }
       HEAP32[$3_1 >> 2] = $6_1;
       if ($6_1) {
        break label$13
       }
       HEAP32[(0 + 21364 | 0) >> 2] = (HEAP32[(0 + 21364 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($0_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$2
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
     label$15 : {
      $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$15
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$2
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
     HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     break label$2;
    }
    $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    if (($3_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 21368 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
    HEAP32[$2_1 >> 2] = $1_1;
    return;
   }
   label$16 : {
    label$17 : {
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if ($3_1 & 2 | 0) {
      break label$17
     }
     label$18 : {
      if ((HEAP32[(0 + 21384 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$18
      }
      HEAP32[(0 + 21384 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 21372 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 21372 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      if (($0_1 | 0) != (HEAP32[(0 + 21380 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 21368 | 0) >> 2] = 0;
      HEAP32[(0 + 21380 | 0) >> 2] = 0;
      return;
     }
     label$19 : {
      if ((HEAP32[(0 + 21380 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$19
      }
      HEAP32[(0 + 21380 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 21368 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 21368 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
      return;
     }
     $4_1 = HEAP32[(0 + 21376 | 0) >> 2] | 0;
     $1_1 = ($3_1 & -8 | 0) + $1_1 | 0;
     label$20 : {
      label$21 : {
       if ($3_1 >>> 0 > 255 >>> 0) {
        break label$21
       }
       $5_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       label$22 : {
        $6_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
        $2_1 = $3_1 >>> 3 | 0;
        $3_1 = ($2_1 << 3 | 0) + 21400 | 0;
        if (($6_1 | 0) == ($3_1 | 0)) {
         break label$22
        }
       }
       label$23 : {
        if (($5_1 | 0) != ($6_1 | 0)) {
         break label$23
        }
        HEAP32[(0 + 21360 | 0) >> 2] = (HEAP32[(0 + 21360 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $2_1 | 0) | 0) | 0;
        break label$20;
       }
       label$24 : {
        if (($5_1 | 0) == ($3_1 | 0)) {
         break label$24
        }
       }
       HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
       break label$20;
      }
      $7_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
      label$25 : {
       label$26 : {
        $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($2_1 | 0)) {
         break label$26
        }
        label$27 : {
         $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
         if ($4_1 >>> 0 > $3_1 >>> 0) {
          break label$27
         }
         HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        }
        HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
        break label$25;
       }
       label$28 : {
        $5_1 = $2_1 + 20 | 0;
        $3_1 = HEAP32[$5_1 >> 2] | 0;
        if ($3_1) {
         break label$28
        }
        $5_1 = $2_1 + 16 | 0;
        $3_1 = HEAP32[$5_1 >> 2] | 0;
        if ($3_1) {
         break label$28
        }
        $6_1 = 0;
        break label$25;
       }
       label$29 : while (1) {
        $4_1 = $5_1;
        $6_1 = $3_1;
        $5_1 = $3_1 + 20 | 0;
        $3_1 = HEAP32[$5_1 >> 2] | 0;
        if ($3_1) {
         continue label$29
        }
        $5_1 = $6_1 + 16 | 0;
        $3_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($3_1) {
         continue label$29
        }
        break label$29;
       };
       HEAP32[$4_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$20
      }
      label$30 : {
       label$31 : {
        $5_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
        $3_1 = ($5_1 << 2 | 0) + 21664 | 0;
        if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
         break label$31
        }
        HEAP32[$3_1 >> 2] = $6_1;
        if ($6_1) {
         break label$30
        }
        HEAP32[(0 + 21364 | 0) >> 2] = (HEAP32[(0 + 21364 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
        break label$20;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$20
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$32 : {
       $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$32
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      }
      $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$20
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
     if (($0_1 | 0) != (HEAP32[(0 + 21380 | 0) >> 2] | 0 | 0)) {
      break label$16
     }
     HEAP32[(0 + 21368 | 0) >> 2] = $1_1;
     return;
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
    HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
   }
   label$33 : {
    if ($1_1 >>> 0 > 255 >>> 0) {
     break label$33
    }
    $3_1 = $1_1 >>> 3 | 0;
    $1_1 = ($3_1 << 3 | 0) + 21400 | 0;
    label$34 : {
     label$35 : {
      $5_1 = HEAP32[(0 + 21360 | 0) >> 2] | 0;
      $3_1 = 1 << $3_1 | 0;
      if ($5_1 & $3_1 | 0) {
       break label$35
      }
      HEAP32[(0 + 21360 | 0) >> 2] = $5_1 | $3_1 | 0;
      $3_1 = $1_1;
      break label$34;
     }
     $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    return;
   }
   $3_1 = 31;
   label$36 : {
    if ($1_1 >>> 0 > 16777215 >>> 0) {
     break label$36
    }
    $3_1 = $1_1 >>> 8 | 0;
    $382_1 = $3_1;
    $3_1 = (($3_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $5_1 = $382_1 << $3_1 | 0;
    $389_1 = $5_1;
    $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6_1 = $389_1 << $5_1 | 0;
    $396_1 = $6_1;
    $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $3_1 = (($396_1 << $6_1 | 0) >>> 15 | 0) - ($3_1 | $5_1 | 0 | $6_1 | 0) | 0;
    $3_1 = ($3_1 << 1 | 0 | (($1_1 >>> ($3_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
   $5_1 = ($3_1 << 2 | 0) + 21664 | 0;
   label$37 : {
    label$38 : {
     label$39 : {
      $6_1 = HEAP32[(0 + 21364 | 0) >> 2] | 0;
      $2_1 = 1 << $3_1 | 0;
      if ($6_1 & $2_1 | 0) {
       break label$39
      }
      HEAP32[(0 + 21364 | 0) >> 2] = $6_1 | $2_1 | 0;
      HEAP32[$5_1 >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
      break label$38;
     }
     $3_1 = $1_1 << (($3_1 | 0) == (31 | 0) ? 0 : 25 - ($3_1 >>> 1 | 0) | 0) | 0;
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     label$40 : while (1) {
      $5_1 = $6_1;
      if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1_1 | 0)) {
       break label$37
      }
      $6_1 = $3_1 >>> 29 | 0;
      $3_1 = $3_1 << 1 | 0;
      $2_1 = ($5_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
      $6_1 = HEAP32[$2_1 >> 2] | 0;
      if ($6_1) {
       continue label$40
      }
      break label$40;
     };
     HEAP32[$2_1 >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $0_1;
    return;
   }
   $1_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
   HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($0_1 + 24 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  }
 }
 
 function $1928($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[(0 + 17860 | 0) >> 2] | 0;
  $2_1 = ($0_1 + 3 | 0) & -4 | 0;
  $0_1 = $1_1 + $2_1 | 0;
  label$1 : {
   label$2 : {
    if (($2_1 | 0) < (1 | 0)) {
     break label$2
    }
    if ($0_1 >>> 0 <= $1_1 >>> 0) {
     break label$1
    }
   }
   label$3 : {
    if ($0_1 >>> 0 <= (__wasm_memory_size() << 16 | 0) >>> 0) {
     break label$3
    }
    if (!(fimport$18($0_1 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 17860 | 0) >> 2] = $0_1;
   return $1_1 | 0;
  }
  HEAP32[($680() | 0) >> 2] = 48;
  return -1 | 0;
 }
 
 function $1929($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $10$hi = 0, $10_1 = 0, $9$hi = 0, $8_1 = 0, $9_1 = 0, $6_1 = 0, i64toi32_i32$6 = 0, $11$hi = 0, $64_1 = 0, $7_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $70_1 = 0, $11_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $83_1 = 0, $84_1 = 0, $85_1 = 0, $86_1 = 0, $52_1 = 0, $52$hi = 0, $55$hi = 0, $57_1 = 0, $57$hi = 0, $59_1 = 0, $59$hi = 0, $60_1 = 0, $60$hi = 0, $67$hi = 0, $69_1 = 0, $69$hi = 0, $131$hi = 0, $134_1 = 0, $135$hi = 0, $156_1 = 0, $156$hi = 0, $158$hi = 0, $161_1 = 0, $161$hi = 0, $163$hi = 0, $175$hi = 0, $178_1 = 0, $179$hi = 0, $208_1 = 0, $208$hi = 0, $210$hi = 0, $219_1 = 0, $220_1 = 0, $220$hi = 0, $222_1 = 0, $222$hi = 0, $228$hi = 0, $229_1 = 0, $229$hi = 0, $236_1 = 0, $236$hi = 0, $241$hi = 0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if (!($754($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $4$hi;
     $6_1 = $1931($3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $64_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $64_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $64_1;
     $8_1 = $7_1 & 32767 | 0;
     if (($8_1 | 0) == (32767 | 0)) {
      break label$3
     }
     if ($6_1) {
      break label$2
     }
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    $765($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$1 = (i64toi32_i32$1 + 16 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    $768($5_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$2 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $1$hi;
    $52_1 = $1_1;
    $52$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = $8_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $65_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $65_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $55$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $57_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $57$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $55$hi;
    i64toi32_i32$1 = $65_1;
    i64toi32_i32$3 = $57$hi;
    i64toi32_i32$0 = $57_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $9_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $9$hi = i64toi32_i32$3;
    $59_1 = $9_1;
    $59$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    $60_1 = $3_1;
    $60$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $66_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $66_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = $66_1 & 32767 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $67_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $67_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $67$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $69_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $69$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $67$hi;
    i64toi32_i32$2 = $67_1;
    i64toi32_i32$1 = $69$hi;
    i64toi32_i32$0 = $69_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $10_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $52$hi;
    i64toi32_i32$2 = $59$hi;
    i64toi32_i32$3 = $60$hi;
    i64toi32_i32$0 = $10$hi;
    if (($754($52_1 | 0, i64toi32_i32$1 | 0, $59_1 | 0, i64toi32_i32$2 | 0, $60_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
     break label$4
    }
    label$5 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $10$hi;
     if (!($754($1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$1 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    $765($5_1 + 112 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$2 = $5_1 + 120 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   label$6 : {
    label$7 : {
     if (!$8_1) {
      break label$7
     }
     i64toi32_i32$0 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$0;
     break label$6;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1081540608;
    $765($5_1 + 96 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5_1 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$1;
    $9$hi = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $68_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $68_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8_1 = $68_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
   }
   label$8 : {
    if ($6_1) {
     break label$8
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1081540608;
    $765($5_1 + 80 | 0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1 + 88 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $70_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $70_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = $70_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $11_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $11$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$0 = $9_1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $9_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $9$hi = i64toi32_i32$0;
   label$9 : {
    if (($8_1 | 0) <= ($6_1 | 0)) {
     break label$9
    }
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$1 = $9_1;
       i64toi32_i32$2 = $11$hi;
       i64toi32_i32$3 = $11_1;
       i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
       $131$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$0 = $4_1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3_1;
       $134_1 = $4$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($4$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$0 = 0;
       $135$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $131$hi;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$5 = $135$hi;
       i64toi32_i32$1 = $134_1;
       i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
       i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
       $10_1 = i64toi32_i32$2;
       $10$hi = i64toi32_i32$4;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 0;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
        $71_1 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
          $72_1 = 0
         } else {
          $72_1 = 1
         }
         $73_1 = $72_1;
        } else {
         $73_1 = 0
        }
        $71_1 = $73_1;
       }
       if ($71_1) {
        break label$12
       }
       label$13 : {
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$13
        }
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 0;
        $765($5_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$1 = $5_1 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$0;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$1 = $5_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$0;
        break label$1;
       }
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$1 = $10_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
        $74_1 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
        $74_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       }
       $156_1 = $74_1;
       $156$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $4$hi;
       i64toi32_i32$0 = $4_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 63;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $75_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        $75_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
       }
       $158$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $156$hi;
       i64toi32_i32$3 = $156_1;
       i64toi32_i32$0 = $158$hi;
       i64toi32_i32$2 = $75_1;
       i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       $9_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
       $9$hi = i64toi32_i32$0;
       break label$11;
      }
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $76_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $76_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $161_1 = $76_1;
      $161$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$0 = $4_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 63;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $77_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $77_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      $163$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $161$hi;
      i64toi32_i32$3 = $161_1;
      i64toi32_i32$0 = $163$hi;
      i64toi32_i32$2 = $77_1;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $9_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $9$hi = i64toi32_i32$0;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $78_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $78_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $4_1 = $78_1;
     $4$hi = i64toi32_i32$3;
     $8_1 = $8_1 + -1 | 0;
     if (($8_1 | 0) > ($6_1 | 0)) {
      continue label$10
     }
     break label$10;
    };
    $8_1 = $6_1;
   }
   label$14 : {
    label$15 : {
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $175$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3_1;
     $178_1 = $4$hi >>> 0 < i64toi32_i32$0 >>> 0 | (($4$hi | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $179$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $175$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $179$hi;
     i64toi32_i32$0 = $178_1;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
      $79_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        $80_1 = 0
       } else {
        $80_1 = 1
       }
       $81_1 = $80_1;
      } else {
       $81_1 = 0
      }
      $79_1 = $81_1;
     }
     if ($79_1) {
      break label$15
     }
     i64toi32_i32$3 = $9$hi;
     $10_1 = $9_1;
     $10$hi = i64toi32_i32$3;
     break label$14;
    }
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$5;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$3 = $10_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$14
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    $765($5_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$0 = $5_1 + 56 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$16 : {
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$0 = $10_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$1 = -1;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$16
    }
    label$17 : while (1) {
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $82_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $82_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3_1 = $82_1;
     $3$hi = i64toi32_i32$3;
     $8_1 = $8_1 + -1 | 0;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $83_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $83_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $4_1 = $83_1;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $208_1 = $3_1;
     $208$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $84_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $84_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $210$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $208$hi;
     i64toi32_i32$1 = $208_1;
     i64toi32_i32$3 = $210$hi;
     i64toi32_i32$2 = $84_1;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $10_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $10_1;
     i64toi32_i32$1 = 65536;
     i64toi32_i32$2 = 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
      continue label$17
     }
     break label$17;
    };
   }
   $6_1 = $7_1 & 32768 | 0;
   label$18 : {
    if (($8_1 | 0) > (0 | 0)) {
     break label$18
    }
    $219_1 = $5_1 + 64 | 0;
    i64toi32_i32$0 = $4$hi;
    $220_1 = $4_1;
    $220$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$2 = $10_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $222_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $222$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = $8_1 + 120 | 0 | $6_1 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $85_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $85_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $228$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $222$hi;
    i64toi32_i32$3 = $222_1;
    i64toi32_i32$0 = $228$hi;
    i64toi32_i32$1 = $85_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $229_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $229$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $220$hi;
    i64toi32_i32$3 = $229$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1065811968;
    $765($219_1 | 0, $220_1 | 0, i64toi32_i32$0 | 0, $229_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5_1 + 72 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$1;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$0 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $236_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $236$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = $8_1 | $6_1 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $86_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $86_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $241$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $236$hi;
   i64toi32_i32$2 = $236_1;
   i64toi32_i32$1 = $241$hi;
   i64toi32_i32$0 = $86_1;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $2$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $5_1 + 128 | 0;
 }
 
 function $1930($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $32_1 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    label$3 : {
     if (($1_1 | 0) >= (2047 | 0)) {
      break label$3
     }
     $1_1 = $1_1 + -1023 | 0;
     break label$1;
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    $1_1 = (($1_1 | 0) < (3069 | 0) ? $1_1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1_1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   label$4 : {
    if (($1_1 | 0) <= (-2045 | 0)) {
     break label$4
    }
    $1_1 = $1_1 + 1022 | 0;
    break label$1;
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   $1_1 = (($1_1 | 0) > (-3066 | 0) ? $1_1 : -3066) + 2044 | 0;
  }
  $32_1 = $0_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1_1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32_1 * +wasm2js_scratch_load_f64());
 }
 
 function $1931($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $4$hi = 0, $4_1 = 0, $13_1 = 0, $2_1 = 0, $3_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $13_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $13_1 & 32767 | 0;
    if (($2_1 | 0) == (32767 | 0)) {
     break label$2
    }
    $3_1 = 4;
    if ($2_1) {
     break label$1
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $3_1 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
  }
  return $3_1 | 0;
 }
 
 function $1932($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 < 512 >>> 0) {
    break label$1
   }
   fimport$19($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $0_1 | 0;
  }
  $3_1 = $0_1 + $2_1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if (($2_1 | 0) >= (1 | 0)) {
       break label$5
      }
      $2_1 = $0_1;
      break label$4;
     }
     label$6 : {
      if ($0_1 & 3 | 0) {
       break label$6
      }
      $2_1 = $0_1;
      break label$4;
     }
     $2_1 = $0_1;
     label$7 : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if ($2_1 >>> 0 >= $3_1 >>> 0) {
       break label$4
      }
      if ($2_1 & 3 | 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4_1 = $3_1 & -4 | 0;
     if ($4_1 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5_1 = $4_1 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
      $1_1 = $1_1 + 64 | 0;
      $2_1 = $2_1 + 64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $4_1 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3_1 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2_1 = $0_1;
    break label$2;
   }
   label$12 : {
    $4_1 = $3_1 + -4 | 0;
    if ($4_1 >>> 0 >= $0_1 >>> 0) {
     break label$12
    }
    $2_1 = $0_1;
    break label$2;
   }
   $2_1 = $0_1;
   label$13 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2_1 >>> 0 >= $3_1 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $1933($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $6$hi = 0, i64toi32_i32$3 = 0, $5_1 = 0, $14_1 = 0, $104$hi = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $2_1 + $0_1 | 0;
   HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
   HEAP8[$0_1 >> 0] = $1_1;
   if ($2_1 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $3_1 = $0_1 + $4_1 | 0;
   $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
   HEAP32[$3_1 >> 2] = $1_1;
   $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
   $2_1 = $3_1 + $4_1 | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
   $5_1 = $3_1 & 4 | 0 | 24 | 0;
   $2_1 = $4_1 - $5_1 | 0;
   if ($2_1 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $6_1 = $1_1;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $14_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $14_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $104$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$1 = $104$hi;
   i64toi32_i32$0 = $14_1;
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $6_1 = i64toi32_i32$0 | $6_1 | 0;
   $6$hi = i64toi32_i32$2;
   $1_1 = $3_1 + $5_1 | 0;
   label$2 : while (1) {
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$2;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $1934($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : {
    if ((($1_1 - $0_1 | 0) - $2_1 | 0) >>> 0 > (0 - ($2_1 << 1 | 0) | 0) >>> 0) {
     break label$2
    }
    return $1932($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
   }
   $3_1 = ($1_1 ^ $0_1 | 0) & 3 | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      if ($0_1 >>> 0 >= $1_1 >>> 0) {
       break label$5
      }
      label$6 : {
       if (!$3_1) {
        break label$6
       }
       $3_1 = $0_1;
       break label$3;
      }
      label$7 : {
       if ($0_1 & 3 | 0) {
        break label$7
       }
       $3_1 = $0_1;
       break label$4;
      }
      $3_1 = $0_1;
      label$8 : while (1) {
       if (!$2_1) {
        break label$1
       }
       HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
       $1_1 = $1_1 + 1 | 0;
       $2_1 = $2_1 + -1 | 0;
       $3_1 = $3_1 + 1 | 0;
       if (!($3_1 & 3 | 0)) {
        break label$4
       }
       continue label$8;
      };
     }
     label$9 : {
      if ($3_1) {
       break label$9
      }
      label$10 : {
       if (!(($0_1 + $2_1 | 0) & 3 | 0)) {
        break label$10
       }
       label$11 : while (1) {
        if (!$2_1) {
         break label$1
        }
        $2_1 = $2_1 + -1 | 0;
        $3_1 = $0_1 + $2_1 | 0;
        HEAP8[$3_1 >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
        if ($3_1 & 3 | 0) {
         continue label$11
        }
        break label$11;
       };
      }
      if ($2_1 >>> 0 <= 3 >>> 0) {
       break label$9
      }
      label$12 : while (1) {
       $2_1 = $2_1 + -4 | 0;
       HEAP32[($0_1 + $2_1 | 0) >> 2] = HEAP32[($1_1 + $2_1 | 0) >> 2] | 0;
       if ($2_1 >>> 0 > 3 >>> 0) {
        continue label$12
       }
       break label$12;
      };
     }
     if (!$2_1) {
      break label$1
     }
     label$13 : while (1) {
      $2_1 = $2_1 + -1 | 0;
      HEAP8[($0_1 + $2_1 | 0) >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
      if ($2_1) {
       continue label$13
      }
      break label$1;
     };
    }
    if ($2_1 >>> 0 <= 3 >>> 0) {
     break label$3
    }
    label$14 : while (1) {
     HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + 4 | 0;
     $2_1 = $2_1 + -4 | 0;
     if ($2_1 >>> 0 > 3 >>> 0) {
      continue label$14
     }
     break label$14;
    };
   }
   if (!$2_1) {
    break label$1
   }
   label$15 : while (1) {
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $1935($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function $1936($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 0;
    if ($1935($2_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if (($3_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $1_1) | 0 | 0;
   }
   label$4 : {
    label$5 : {
     if ((HEAP8[($2_1 + 75 | 0) >> 0] | 0 | 0) >= (0 | 0)) {
      break label$5
     }
     $3_1 = 0;
     break label$4;
    }
    $4_1 = $1_1;
    label$6 : while (1) {
     label$7 : {
      $3_1 = $4_1;
      if ($3_1) {
       break label$7
      }
      $3_1 = 0;
      break label$4;
     }
     $4_1 = $3_1 + -1 | 0;
     if ((HEAPU8[($0_1 + $4_1 | 0) >> 0] | 0 | 0) != (10 | 0)) {
      continue label$6
     }
     break label$6;
    };
    $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $3_1) | 0;
    if ($4_1 >>> 0 < $3_1 >>> 0) {
     break label$1
    }
    $0_1 = $0_1 + $3_1 | 0;
    $1_1 = $1_1 - $3_1 | 0;
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
   }
   $1932($5_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $1_1 | 0;
   $4_1 = $3_1 + $1_1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $1937($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $710(HEAP32[(0 + 4792 | 0) >> 2] | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1938($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1939($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1940($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = $0_1;
  label$1 : {
   label$2 : {
    if (!($0_1 & 3 | 0)) {
     break label$2
    }
    label$3 : {
     if (HEAPU8[$0_1 >> 0] | 0) {
      break label$3
     }
     return $0_1 - $0_1 | 0 | 0;
    }
    $1_1 = $0_1;
    label$4 : while (1) {
     $1_1 = $1_1 + 1 | 0;
     if (!($1_1 & 3 | 0)) {
      break label$2
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$1
     }
     continue label$4;
    };
   }
   label$5 : while (1) {
    $2_1 = $1_1;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$5
    }
    break label$5;
   };
   label$6 : {
    if ($3_1 & 255 | 0) {
     break label$6
    }
    return $2_1 - $0_1 | 0 | 0;
   }
   label$7 : while (1) {
    $3_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
    $1_1 = $2_1 + 1 | 0;
    $2_1 = $1_1;
    if ($3_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1941() {
  return global$0 | 0;
 }
 
 function $1942($0_1) {
  $0_1 = $0_1 | 0;
  global$0 = $0_1;
 }
 
 function $1943($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
  global$0 = $1_1;
  return $1_1 | 0;
 }
 
 function $1944($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (HEAP32[(0 + 21856 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[(0 + 21860 | 0) >> 2] = $1_1;
   HEAP32[(0 + 21856 | 0) >> 2] = $0_1;
  }
 }
 
 function $1945($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $3$hi;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, i64toi32_i32$0, $4_1, $5_1);
 }
 
 function $1946($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, i64toi32_i32$0, $3_1) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1947($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $5$hi;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, i64toi32_i32$0) | 0 | 0;
 }
 
 function $1948($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $5$hi;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, i64toi32_i32$0, $6_1, $6$hi) | 0 | 0;
 }
 
 function $1949($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $6$hi, $7_1, $7$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  $7_1 = $7_1 | 0;
  $7$hi = $7$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$0 = $6$hi;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1, i64toi32_i32$0, $7_1, $7$hi) | 0 | 0;
 }
 
 function $1950($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $18_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $11$hi = 0, $14$hi = 0;
  $7_1 = $0_1;
  $8_1 = $1_1;
  $9_1 = $2_1;
  i64toi32_i32$0 = 0;
  $11_1 = $3_1;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $18_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $11$hi;
  i64toi32_i32$0 = $11_1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$3 = $18_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $1945($7_1 | 0, $8_1 | 0, $9_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $5_1 | 0, $6_1 | 0);
 }
 
 function $1951($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $9$hi = 0, $12$hi = 0, $5_1 = 0, $5$hi = 0;
  $6_1 = $0_1;
  $7_1 = $1_1;
  i64toi32_i32$0 = 0;
  $9_1 = $2_1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = $1946($6_1 | 0, $7_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4_1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  fimport$20($18_1 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5_1 | 0;
 }
 
 function $1952($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $20_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $13$hi = 0, $16$hi = 0;
  $7_1 = $0_1;
  $8_1 = $1_1;
  $9_1 = $2_1;
  $10_1 = $3_1;
  $11_1 = $4_1;
  i64toi32_i32$0 = 0;
  $13_1 = $5_1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $16$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $13$hi;
  i64toi32_i32$0 = $13_1;
  i64toi32_i32$2 = $16$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  return $1947($7_1 | 0, $8_1 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $1953($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $29_1 = 0, $30_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $15_1 = 0, $15$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $21_1 = 0, $21$hi = 0, $24$hi = 0, $25_1 = 0, $25$hi = 0;
  $9_1 = $0_1;
  $10_1 = $1_1;
  $11_1 = $2_1;
  $12_1 = $3_1;
  $13_1 = $4_1;
  i64toi32_i32$0 = 0;
  $15_1 = $5_1;
  $15$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $29_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $29_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$0 = $15_1;
  i64toi32_i32$2 = $18$hi;
  i64toi32_i32$3 = $29_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $19_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $19$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $21_1 = $7_1;
  $21$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $8_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $30_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $30_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $24$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$2 = $21_1;
  i64toi32_i32$1 = $24$hi;
  i64toi32_i32$3 = $30_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $25_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $25$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$2 = $25$hi;
  return $1948($9_1 | 0, $10_1 | 0, $11_1 | 0, $12_1 | 0, $13_1 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $25_1 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $1954($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $31_1 = 0, $32_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $17_1 = 0, $17$hi = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $23_1 = 0, $23$hi = 0, $26$hi = 0, $27_1 = 0, $27$hi = 0;
  $10_1 = $0_1;
  $11_1 = $1_1;
  $12_1 = $2_1;
  $13_1 = $3_1;
  $14_1 = $4_1;
  $15_1 = $5_1;
  i64toi32_i32$0 = 0;
  $17_1 = $6_1;
  $17$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $31_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $31_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $17$hi;
  i64toi32_i32$0 = $17_1;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $31_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $21$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $23_1 = $8_1;
  $23$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $9_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $32_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $32_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $26$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $23$hi;
  i64toi32_i32$2 = $23_1;
  i64toi32_i32$1 = $26$hi;
  i64toi32_i32$3 = $32_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $27_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $27$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$2 = $27$hi;
  return $1949($10_1 | 0, $11_1 | 0, $12_1 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $27_1 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $1955($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  $4_1 = $0_1;
  i64toi32_i32$0 = $1$hi;
  $6_1 = $1_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return fimport$21($4_1 | 0, $6_1 | 0, $12_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140_1 = 0, $140$hi = 0, $142$hi = 0, $144_1 = 0, $144$hi = 0, $151_1 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              block : {
               i64toi32_i32$1 = var$1$hi;
               var$3 = var$1;
               if (!var$3) {
                break label$11
               }
               i64toi32_i32$1 = var$1$hi;
               i64toi32_i32$0 = var$1;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 32;
               i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
               if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
               }
               var$4 = $38_1;
               if (!var$4) {
                break label$9
               }
               var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
               if (var$2 >>> 0 <= 31 >>> 0) {
                break label$8
               }
               break label$2;
              }
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65_1;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41_1;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      block3 : {
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$1 = var$1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       var$8 = i64toi32_i32$4;
       var$8$hi = i64toi32_i32$5;
       label$15 : while (1) {
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$2 = var$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $45_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
         $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $140_1 = $45_1;
        $140$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = 0;
         $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
         $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $142$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $140$hi;
        i64toi32_i32$1 = $140_1;
        i64toi32_i32$5 = $142$hi;
        i64toi32_i32$0 = $46_1;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        var$5$hi = i64toi32_i32$5;
        $144_1 = var$5;
        $144$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$2 = var$8;
        i64toi32_i32$1 = var$5$hi;
        i64toi32_i32$0 = var$5;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
         $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
         $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
        }
        var$6 = $47_1;
        var$6$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$1$hi;
        i64toi32_i32$2 = var$6$hi;
        i64toi32_i32$4 = var$6;
        i64toi32_i32$5 = var$1$hi;
        i64toi32_i32$0 = var$1;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
        $151_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
        $151$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $144$hi;
        i64toi32_i32$2 = $144_1;
        i64toi32_i32$4 = $151$hi;
        i64toi32_i32$0 = $151_1;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        var$5 = i64toi32_i32$1;
        var$5$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
         $48_1 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $154$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$7$hi;
        i64toi32_i32$2 = $154$hi;
        i64toi32_i32$3 = $48_1;
        i64toi32_i32$5 = var$7$hi;
        i64toi32_i32$0 = var$7;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        var$0$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$6$hi;
        i64toi32_i32$2 = var$6;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        var$6$hi = i64toi32_i32$3;
        var$7 = var$6;
        var$7$hi = i64toi32_i32$3;
        var$2 = var$2 + -1 | 0;
        if (var$2) {
         continue label$15
        }
        break label$15;
       };
       break label$13;
      }
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(env);
 var FUNCTION_TABLE = Table([null, $27, $6, $10, $93, $98, $1887, $456, $452, $454, $459, $463, $445, $470, $468, $471, $469, $472, $852, $855, $853, $856, $854, $857, $800, $802, $801, $803, $833, $835, $834, $836, $467, $473, $780, $781, $474, $484, $784, $785, $786, $486, $792, $490, $794, $495, $635, $694, $711, $712, $716, $739, $717, $715, $695, $735, $777, $778, $782, $783, $791, $793, $795, $774, $858, $773, $776, $1924, $1177, $1464, $1472, $1568, $1571, $1575, $1578, $1581, $1584, $1586, $1588, $1590, $1592, $1594, $1596, $1598, $1600, $1447, $1452, $1468, $1491, $1492, $1493, $1494, $1495, $1496, $1497, $1498, $1499, $1500, $1336, $1510, $1511, $1514, $1517, $1518, $1521, $1522, $1524, $1549, $1550, $1553, $1555, $1557, $1559, $1563, $1551, $1552, $1554, $1556, $1558, $1560, $1564, $895, $1467, $1474, $1475, $1477, $1478, $1479, $1480, $1482, $1483, $1485, $1486, $1487, $1488, $1489, $1501, $1502, $1503, $1504, $1505, $1506, $1507, $1508, $1525, $1526, $1528, $1530, $1531, $1532, $1533, $1535, $1536, $1537, $1539, $1541, $1542, $1543, $1544, $1546, $1547, $1548, $894, $896, $897, $898, $901, $902, $903, $904, $905, $909, $1606, $910, $922, $930, $933, $936, $939, $942, $945, $950, $953, $956, $1607, $963, $973, $978, $980, $982, $984, $986, $988, $992, $994, $996, $1608, $1009, $1010, $1017, $1018, $1019, $1020, $1031, $1032, $1609, $1033, $1042, $1048, $1049, $1050, $1051, $1059, $1060, $1610, $1612, $1065, $1066, $1067, $1068, $1070, $1072, $1075, $1566, $1573, $1579, $1593, $1597, $1585, $1589, $1613, $1615, $1090, $1091, $1092, $1099, $1101, $1103, $1106, $1569, $1576, $1582, $1595, $1599, $1587, $1591, $1617, $1616, $1119, $1619, $1618, $1127, $1620, $1136, $1137, $1138, $1139, $1140, $1141, $1142, $1143, $1144, $1621, $1145, $1146, $1147, $1148, $1149, $1150, $1151, $1152, $1153, $1622, $1154, $1157, $1158, $1159, $1162, $1163, $1164, $1165, $1166, $1623, $1167, $1168, $1169, $1170, $1171, $1172, $1173, $1174, $1175, $1624, $1176, $1193, $1625, $1227, $1244, $1626, $1283, $1292, $1627, $1293, $1304, $1628, $1312, $1313, $1321, $1629, $1322, $1323, $1335, $1816, $1817, $1883, $1884, $1885, $1886, $1891, $1892, $1894, $1896, $1899, $1897, $1898, $1903, $1900, $1905, $1921, $1918, $1908, $1901, $1920, $1917, $1909, $1902, $1919, $1914, $1911]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "__wasm_call_ctors": $0, 
  "fflush": $689, 
  "free": $1924, 
  "__errno_location": $680, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "malloc": $1923, 
  "__getTypeName": $544, 
  "__embind_register_native_and_builtin_types": $546, 
  "stackSave": $1941, 
  "stackRestore": $1942, 
  "stackAlloc": $1943, 
  "emscripten_stack_init": $1809, 
  "emscripten_stack_get_free": $1810, 
  "emscripten_stack_get_end": $1811, 
  "setThrew": $1944, 
  "dynCall_viijii": $1950, 
  "dynCall_jiji": $1951, 
  "dynCall_iiiiij": $1952, 
  "dynCall_iiiiijj": $1953, 
  "dynCall_iiiiiijj": $1954
 };
}

  return asmFunc(asmLibraryArg);
}

)(asmLibraryArg);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];

// end include: wasm2js.js
if (typeof WebAssembly !== 'object') {
  abort('no native wasm support detected');
}

// include: runtime_safe_heap.js


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)] = value; break;
      case 'i8': HEAP8[((ptr)>>0)] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

// end include: runtime_safe_heap.js
// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((Uint8Array|Array<number>), number)} */
function allocate(slab, allocator) {
  var ret;
  assert(typeof allocator === 'number', 'allocate no longer takes a type argument')
  assert(typeof slab !== 'number', 'allocate no longer takes a number as arg0')

  if (allocator == ALLOC_STACK) {
    ret = stackAlloc(slab.length);
  } else {
    ret = _malloc(slab.length);
  }

  if (slab.subarray || slab.slice) {
    HEAPU8.set(/** @type {!Uint8Array} */(slab), ret);
  } else {
    HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
}

// include: runtime_strings.js


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}

// end include: runtime_strings.js
// include: runtime_strings_extra.js


// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var str = '';

    // If maxBytesToRead is not passed explicitly, it will be undefined, and the for-loop's condition
    // will always evaluate to true. The loop is then terminated on the first null char.
    for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) break;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }

    return str;
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)] = codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)] = codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)] = str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)] = 0;
}

// end include: runtime_strings_extra.js
// Memory management

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) {
  Object.defineProperty(Module, 'INITIAL_MEMORY', {
    configurable: true,
    get: function() {
      abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

assert(INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');

// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js


// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_MEMORY / 65536
      ,
      'maximum': INITIAL_MEMORY / 65536
    });
  }

if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_MEMORY % 65536 === 0);
updateGlobalBufferAndViews(buffer);

// end include: runtime_init_memory.js

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // The stack grows downwards
  HEAPU32[(max >> 2)+1] = 0x2135467;
  HEAPU32[(max >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  var cookie1 = HEAPU32[(max >> 2)+1];
  var cookie2 = HEAPU32[(max >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

// end include: runtime_stack_check.js
// include: runtime_assertions.js


// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}

// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;

__ATINIT__.push({ func: function() { ___wasm_call_ctors() } });

function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// {{MEM_INITIALIZER}}

// include: memoryprofiler.js


// end include: memoryprofiler.js
// show errors on likely calls to FS when it was not included
var FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;

// include: URIUtils.js


function hasPrefix(str, prefix) {
  return String.prototype.startsWith ?
      str.startsWith(prefix) :
      str.indexOf(prefix) === 0;
}

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return hasPrefix(filename, dataURIPrefix);
}

var fileURIPrefix = "file://";

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return hasPrefix(filename, fileURIPrefix);
}

// end include: URIUtils.js
function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    assert(!runtimeExited, 'native function `' + displayName + '` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}

var wasmBinaryFile = 'simulator.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    var binary = tryParseAsDataURI(file);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(file);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, try to to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch === 'function'
    ) {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
          return getBinary(wasmBinaryFile);
      });
    }
  }
    
  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(function() { return getBinary(wasmBinaryFile); });
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    Module['asm'] = exports;

    wasmTable = Module['asm']['__indirect_function_table'];
    assert(wasmTable, "table not found in wasm exports");

    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');

  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }

  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);

      // Warn on some common problems.
      if (isFileURI(wasmBinaryFile)) {
        err('warning: Loading from a file URI (' + wasmBinaryFile + ') is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing');
      }
      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};






  function abortStackOverflow(allocSize) {
      abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (_emscripten_stack_get_free() + allocSize) + ' bytes available!');
    }

  function callRuntimeCallbacks(callbacks) {
      while(callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
          callback(Module); // Pass the module as the first argument.
          continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
          if (callback.arg === undefined) {
            wasmTable.get(func)();
          } else {
            wasmTable.get(func)(callback.arg);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }

  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var error = new Error();
      if (!error.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          error = e;
        }
        if (!error.stack) {
          return '(no stack trace available)';
        }
      }
      return error.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  var ExceptionInfoAttrs={DESTRUCTOR_OFFSET:0,REFCOUNT_OFFSET:4,TYPE_OFFSET:8,CAUGHT_OFFSET:12,RETHROWN_OFFSET:13,SIZE:16};
  function ___cxa_allocate_exception(size) {
      // Thrown object is prepended by exception metadata block
      return _malloc(size + ExceptionInfoAttrs.SIZE) + ExceptionInfoAttrs.SIZE;
    }

  function _atexit(func, arg) {
    }
  function ___cxa_atexit(a0,a1
  ) {
  return _atexit(a0,a1);
  }

  function ExceptionInfo(excPtr) {
      this.excPtr = excPtr;
      this.ptr = excPtr - ExceptionInfoAttrs.SIZE;
  
      this.set_type = function(type) {
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.TYPE_OFFSET))>>2)] = type;
      };
  
      this.get_type = function() {
        return HEAP32[(((this.ptr)+(ExceptionInfoAttrs.TYPE_OFFSET))>>2)];
      };
  
      this.set_destructor = function(destructor) {
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.DESTRUCTOR_OFFSET))>>2)] = destructor;
      };
  
      this.get_destructor = function() {
        return HEAP32[(((this.ptr)+(ExceptionInfoAttrs.DESTRUCTOR_OFFSET))>>2)];
      };
  
      this.set_refcount = function(refcount) {
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)] = refcount;
      };
  
      this.set_caught = function (caught) {
        caught = caught ? 1 : 0;
        HEAP8[(((this.ptr)+(ExceptionInfoAttrs.CAUGHT_OFFSET))>>0)] = caught;
      };
  
      this.get_caught = function () {
        return HEAP8[(((this.ptr)+(ExceptionInfoAttrs.CAUGHT_OFFSET))>>0)] != 0;
      };
  
      this.set_rethrown = function (rethrown) {
        rethrown = rethrown ? 1 : 0;
        HEAP8[(((this.ptr)+(ExceptionInfoAttrs.RETHROWN_OFFSET))>>0)] = rethrown;
      };
  
      this.get_rethrown = function () {
        return HEAP8[(((this.ptr)+(ExceptionInfoAttrs.RETHROWN_OFFSET))>>0)] != 0;
      };
  
      // Initialize native structure fields. Should be called once after allocated.
      this.init = function(type, destructor) {
        this.set_type(type);
        this.set_destructor(destructor);
        this.set_refcount(0);
        this.set_caught(false);
        this.set_rethrown(false);
      }
  
      this.add_ref = function() {
        var value = HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)];
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)] = value + 1;
      };
  
      // Returns true if last reference released.
      this.release_ref = function() {
        var prev = HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)];
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)] = prev - 1;
        assert(prev > 0);
        return prev === 1;
      };
    }
  
  var exceptionLast=0;
  
  var uncaughtExceptionCount=0;
  function ___cxa_throw(ptr, type, destructor) {
      var info = new ExceptionInfo(ptr);
      // Initialize ExceptionInfo content after it was allocated in __cxa_allocate_exception.
      info.init(type, destructor);
      exceptionLast = ptr;
      uncaughtExceptionCount++;
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }
  var embind_charCodes=undefined;
  function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  var char_0=48;
  
  var char_9=57;
  function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }
  function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }
  function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }
  var BindingError=undefined;
  function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  var InternalError=undefined;
  function throwInternalError(message) {
      throw new InternalError(message);
    }
  function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }
  /** @param {Object=} options */
  function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }
  function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];
  function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }
  function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }
  function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }
  function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }
  function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }
  function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }
  /** @param {number=} numArguments */
  function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  /** @param {number=} numArguments */
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function dynCallLegacy(sig, ptr, args) {
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      if (args && args.length) {
        // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
        assert(args.length === sig.substring(1).replace(/j/g, '--').length);
      } else {
        assert(sig.length == 1);
      }
      var f = Module["dynCall_" + sig];
      return args && args.length ? f.apply(null, [ptr].concat(args)) : f.call(null, ptr);
    }
  function dynCall(sig, ptr, args) {
      // Without WASM_BIGINT support we cannot directly call function with i64 as
      // part of thier signature, so we rely the dynCall functions generated by
      // wasm-emscripten-finalize
      if (sig.indexOf('j') != -1) {
        return dynCallLegacy(sig, ptr, args);
      }
      assert(wasmTable.get(ptr), 'missing table entry in dynCall: ' + ptr);
      return wasmTable.get(ptr).apply(null, args)
    }
  function getDynCaller(sig, ptr) {
      assert(sig.indexOf('j') >= 0, 'getDynCaller should only be called with i64 sigs')
      var argCache = [];
      return function() {
        argCache.length = arguments.length;
        for (var i = 0; i < arguments.length; i++) {
          argCache[i] = arguments[i];
        }
        return dynCall(sig, ptr, argCache);
      };
    }
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller() {
        if (signature.indexOf('j') != -1) {
          return getDynCaller(signature, rawFunction);
        }
        return wasmTable.get(rawFunction);
      }
  
      var fp = makeDynCaller();
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }
  function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }
  function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
  
      rawInvoker = embind__requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }
  function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(buffer, data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if (stdStringIsUTF8) {
                  var decodeStartPtr = value + 4;
                  // Looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                      var currentBytePtr = value + 4 + i;
                      if (i == length || HEAPU8[currentBytePtr] == 0) {
                          var maxRead = currentBytePtr - decodeStartPtr;
                          var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                          if (str === undefined) {
                              str = stringSegment;
                          } else {
                              str += String.fromCharCode(0);
                              str += stringSegment;
                          }
                          decodeStartPtr = currentBytePtr + 1;
                      }
                  }
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
  
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if (valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
      if (charSize === 2) {
          decodeString = UTF16ToString;
          encodeString = stringToUTF16;
          lengthBytesUTF = lengthBytesUTF16;
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          decodeString = UTF32ToString;
          encodeString = stringToUTF32;
          lengthBytesUTF = lengthBytesUTF32;
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              // Code mostly taken from _embind_register_std_string fromWireType
              var length = HEAPU32[value >> 2];
              var HEAP = getHeap();
              var str;
  
              var decodeStartPtr = value + 4;
              // Looping here to support possible embedded '0' bytes
              for (var i = 0; i <= length; ++i) {
                  var currentBytePtr = value + 4 + i * charSize;
                  if (i == length || HEAP[currentBytePtr >> shift] == 0) {
                      var maxReadBytes = currentBytePtr - decodeStartPtr;
                      var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
                      if (str === undefined) {
                          str = stringSegment;
                      } else {
                          str += String.fromCharCode(0);
                          str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + charSize;
                  }
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (!(typeof value === 'string')) {
                  throwBindingError('Cannot pass non-string to C++ string type ' + name);
              }
  
              // assumes 4-byte alignment
              var length = lengthBytesUTF(value);
              var ptr = _malloc(4 + length + charSize);
              HEAPU32[ptr >> 2] = length >> shift;
  
              encodeString(value, ptr + 4, length + charSize);
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function _abort() {
      abort();
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function _emscripten_get_heap_size() {
      return HEAPU8.length;
    }
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s INITIAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }
  function _emscripten_resize_heap(requestedSize) {
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }

  var ENV={};
  
  function getExecutableName() {
      return thisProgram || './this.program';
    }
  function getEnvStrings() {
      if (!getEnvStrings.strings) {
        // Default values.
        // Browser language detection #8751
        var lang = ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
        var env = {
          'USER': 'web_user',
          'LOGNAME': 'web_user',
          'PATH': '/',
          'PWD': '/',
          'HOME': '/home/web_user',
          'LANG': lang,
          '_': getExecutableName()
        };
        // Apply the user-provided values, if any.
        for (var x in ENV) {
          env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(x + '=' + env[x]);
        }
        getEnvStrings.strings = strings;
      }
      return getEnvStrings.strings;
    }
  
  var SYSCALLS={mappings:{},buffers:[null,[],[]],printChar:function(stream, curr) {
        var buffer = SYSCALLS.buffers[stream];
        assert(buffer);
        if (curr === 0 || curr === 10) {
          (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
          buffer.length = 0;
        } else {
          buffer.push(curr);
        }
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};
  function _environ_get(__environ, environ_buf) {
      var bufSize = 0;
      getEnvStrings().forEach(function(string, i) {
        var ptr = environ_buf + bufSize;
        HEAP32[(((__environ)+(i * 4))>>2)] = ptr;
        writeAsciiToMemory(string, ptr);
        bufSize += string.length + 1;
      });
      return 0;
    }

  function _environ_sizes_get(penviron_count, penviron_buf_size) {
      var strings = getEnvStrings();
      HEAP32[((penviron_count)>>2)] = strings.length;
      var bufSize = 0;
      strings.forEach(function(string) {
        bufSize += string.length + 1;
      });
      HEAP32[((penviron_buf_size)>>2)] = bufSize;
      return 0;
    }

  function _fd_close(fd) {
      abort('it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM');
      return 0;
    }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
  abort('it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM');
  }

  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      if (typeof _fflush !== 'undefined') _fflush(0);
      var buffers = SYSCALLS.buffers;
      if (buffers[1].length) SYSCALLS.printChar(1, 10);
      if (buffers[2].length) SYSCALLS.printChar(2, 10);
    }
  function _fd_write(fd, iov, iovcnt, pnum) {
      // hack to support printf in SYSCALLS_REQUIRE_FILESYSTEM=0
      var num = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          SYSCALLS.printChar(fd, HEAPU8[ptr+j]);
        }
        num += len;
      }
      HEAP32[((pnum)>>2)] = num
      return 0;
    }

  function _setTempRet0($i) {
      setTempRet0(($i) | 0);
    }

  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]) {
        // no-op
      }
      return sum;
    }
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];
  function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }
  function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''
      };
  
      var pattern = UTF8ToString(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate time representation
        // Modified Conversion Specifiers
        '%Ec': '%c',                      // Replaced by the locale's alternative appropriate date and time representation.
        '%EC': '%C',                      // Replaced by the name of the base year (period) in the locale's alternative representation.
        '%Ex': '%m/%d/%y',                // Replaced by the locale's alternative date representation.
        '%EX': '%H:%M:%S',                // Replaced by the locale's alternative time representation.
        '%Ey': '%y',                      // Replaced by the offset from %EC (year only) in the locale's alternative representation.
        '%EY': '%Y',                      // Replaced by the full alternative year representation.
        '%Od': '%d',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading zeros if there is any alternative symbol for zero; otherwise, with leading <space> characters.
        '%Oe': '%e',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading <space> characters.
        '%OH': '%H',                      // Replaced by the hour (24-hour clock) using the locale's alternative numeric symbols.
        '%OI': '%I',                      // Replaced by the hour (12-hour clock) using the locale's alternative numeric symbols.
        '%Om': '%m',                      // Replaced by the month using the locale's alternative numeric symbols.
        '%OM': '%M',                      // Replaced by the minutes using the locale's alternative numeric symbols.
        '%OS': '%S',                      // Replaced by the seconds using the locale's alternative numeric symbols.
        '%Ou': '%u',                      // Replaced by the weekday as a number in the locale's alternative representation (Monday=1).
        '%OU': '%U',                      // Replaced by the week number of the year (Sunday as the first day of the week, rules corresponding to %U ) using the locale's alternative numeric symbols.
        '%OV': '%V',                      // Replaced by the week number of the year (Monday as the first day of the week, rules corresponding to %V ) using the locale's alternative numeric symbols.
        '%Ow': '%w',                      // Replaced by the number of the weekday (Sunday=0) using the locale's alternative numeric symbols.
        '%OW': '%W',                      // Replaced by the week number of the year (Monday as the first day of the week) using the locale's alternative numeric symbols.
        '%Oy': '%y',                      // Replaced by the year (offset from %C ) using the locale's alternative numeric symbols.
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      }
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      }
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        }
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      }
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      }
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else {
            return thisDate.getFullYear()-1;
          }
      }
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
  
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          return date.tm_wday || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          return date.tm_wday;
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }
  function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_emval();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
var ASSERTIONS = true;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


var asmLibraryArg = {
  "__cxa_allocate_exception": ___cxa_allocate_exception,
  "__cxa_atexit": ___cxa_atexit,
  "__cxa_throw": ___cxa_throw,
  "_embind_register_bool": __embind_register_bool,
  "_embind_register_emval": __embind_register_emval,
  "_embind_register_float": __embind_register_float,
  "_embind_register_function": __embind_register_function,
  "_embind_register_integer": __embind_register_integer,
  "_embind_register_memory_view": __embind_register_memory_view,
  "_embind_register_std_string": __embind_register_std_string,
  "_embind_register_std_wstring": __embind_register_std_wstring,
  "_embind_register_void": __embind_register_void,
  "abort": _abort,
  "emscripten_memcpy_big": _emscripten_memcpy_big,
  "emscripten_resize_heap": _emscripten_resize_heap,
  "environ_get": _environ_get,
  "environ_sizes_get": _environ_sizes_get,
  "fd_close": _fd_close,
  "fd_seek": _fd_seek,
  "fd_write": _fd_write,
  "getTempRet0": getTempRet0,
  "memory": wasmMemory,
  "setTempRet0": setTempRet0,
  "strftime_l": _strftime_l
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("fflush");

/** @type {function(...*):?} */
var _free = Module["_free"] = createExportWrapper("free");

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = createExportWrapper("malloc");

/** @type {function(...*):?} */
var ___getTypeName = Module["___getTypeName"] = createExportWrapper("__getTypeName");

/** @type {function(...*):?} */
var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = createExportWrapper("__embind_register_native_and_builtin_types");

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

/** @type {function(...*):?} */
var _emscripten_stack_init = Module["_emscripten_stack_init"] = function() {
  return (_emscripten_stack_init = Module["_emscripten_stack_init"] = Module["asm"]["emscripten_stack_init"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = function() {
  return (_emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = Module["asm"]["emscripten_stack_get_free"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = function() {
  return (_emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _setThrew = Module["_setThrew"] = createExportWrapper("setThrew");

/** @type {function(...*):?} */
var dynCall_viijii = Module["dynCall_viijii"] = createExportWrapper("dynCall_viijii");

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");

/** @type {function(...*):?} */
var dynCall_iiiiij = Module["dynCall_iiiiij"] = createExportWrapper("dynCall_iiiiij");

/** @type {function(...*):?} */
var dynCall_iiiiijj = Module["dynCall_iiiiijj"] = createExportWrapper("dynCall_iiiiijj");

/** @type {function(...*):?} */
var dynCall_iiiiiijj = Module["dynCall_iiiiiijj"] = createExportWrapper("dynCall_iiiiiijj");





// === Auto-generated postamble setup entry stuff ===

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setFileTime")) Module["setFileTime"] = function() { abort("'setFileTime' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortOnCannotGrowMemory")) Module["abortOnCannotGrowMemory"] = function() { abort("'abortOnCannotGrowMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getHostByName")) Module["getHostByName"] = function() { abort("'getHostByName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getRandomDevice")) Module["getRandomDevice"] = function() { abort("'getRandomDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "traverseStack")) Module["traverseStack"] = function() { abort("'traverseStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "withBuiltinMalloc")) Module["withBuiltinMalloc"] = function() { abort("'withBuiltinMalloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgsArray")) Module["readAsmConstArgsArray"] = function() { abort("'readAsmConstArgsArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mainThreadEM_ASM")) Module["mainThreadEM_ASM"] = function() { abort("'mainThreadEM_ASM' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getExecutableName")) Module["getExecutableName"] = function() { abort("'getExecutableName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "listenOnce")) Module["listenOnce"] = function() { abort("'listenOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "autoResumeAudioContext")) Module["autoResumeAudioContext"] = function() { abort("'autoResumeAudioContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCallLegacy")) Module["dynCallLegacy"] = function() { abort("'dynCallLegacy' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getDynCaller")) Module["getDynCaller"] = function() { abort("'getDynCaller' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callRuntimeCallbacks")) Module["callRuntimeCallbacks"] = function() { abort("'callRuntimeCallbacks' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortStackOverflow")) Module["abortStackOverflow"] = function() { abort("'abortStackOverflow' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unSign")) Module["unSign"] = function() { abort("'unSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reSign")) Module["reSign"] = function() { abort("'reSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getSocketFromFD")) Module["getSocketFromFD"] = function() { abort("'getSocketFromFD' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getSocketAddress")) Module["getSocketAddress"] = function() { abort("'getSocketAddress' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerKeyEventCallback")) Module["registerKeyEventCallback"] = function() { abort("'registerKeyEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeCStringToJsString")) Module["maybeCStringToJsString"] = function() { abort("'maybeCStringToJsString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findEventTarget")) Module["findEventTarget"] = function() { abort("'findEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findCanvasEventTarget")) Module["findCanvasEventTarget"] = function() { abort("'findCanvasEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBoundingClientRect")) Module["getBoundingClientRect"] = function() { abort("'getBoundingClientRect' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillMouseEventData")) Module["fillMouseEventData"] = function() { abort("'fillMouseEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerMouseEventCallback")) Module["registerMouseEventCallback"] = function() { abort("'registerMouseEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerWheelEventCallback")) Module["registerWheelEventCallback"] = function() { abort("'registerWheelEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerUiEventCallback")) Module["registerUiEventCallback"] = function() { abort("'registerUiEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFocusEventCallback")) Module["registerFocusEventCallback"] = function() { abort("'registerFocusEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceOrientationEventData")) Module["fillDeviceOrientationEventData"] = function() { abort("'fillDeviceOrientationEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceOrientationEventCallback")) Module["registerDeviceOrientationEventCallback"] = function() { abort("'registerDeviceOrientationEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceMotionEventData")) Module["fillDeviceMotionEventData"] = function() { abort("'fillDeviceMotionEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceMotionEventCallback")) Module["registerDeviceMotionEventCallback"] = function() { abort("'registerDeviceMotionEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "screenOrientation")) Module["screenOrientation"] = function() { abort("'screenOrientation' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillOrientationChangeEventData")) Module["fillOrientationChangeEventData"] = function() { abort("'fillOrientationChangeEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerOrientationChangeEventCallback")) Module["registerOrientationChangeEventCallback"] = function() { abort("'registerOrientationChangeEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillFullscreenChangeEventData")) Module["fillFullscreenChangeEventData"] = function() { abort("'fillFullscreenChangeEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFullscreenChangeEventCallback")) Module["registerFullscreenChangeEventCallback"] = function() { abort("'registerFullscreenChangeEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerRestoreOldStyle")) Module["registerRestoreOldStyle"] = function() { abort("'registerRestoreOldStyle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "hideEverythingExceptGivenElement")) Module["hideEverythingExceptGivenElement"] = function() { abort("'hideEverythingExceptGivenElement' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "restoreHiddenElements")) Module["restoreHiddenElements"] = function() { abort("'restoreHiddenElements' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setLetterbox")) Module["setLetterbox"] = function() { abort("'setLetterbox' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "currentFullscreenStrategy")) Module["currentFullscreenStrategy"] = function() { abort("'currentFullscreenStrategy' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "restoreOldWindowedStyle")) Module["restoreOldWindowedStyle"] = function() { abort("'restoreOldWindowedStyle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "softFullscreenResizeWebGLRenderTarget")) Module["softFullscreenResizeWebGLRenderTarget"] = function() { abort("'softFullscreenResizeWebGLRenderTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "doRequestFullscreen")) Module["doRequestFullscreen"] = function() { abort("'doRequestFullscreen' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillPointerlockChangeEventData")) Module["fillPointerlockChangeEventData"] = function() { abort("'fillPointerlockChangeEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockChangeEventCallback")) Module["registerPointerlockChangeEventCallback"] = function() { abort("'registerPointerlockChangeEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockErrorEventCallback")) Module["registerPointerlockErrorEventCallback"] = function() { abort("'registerPointerlockErrorEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requestPointerLock")) Module["requestPointerLock"] = function() { abort("'requestPointerLock' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillVisibilityChangeEventData")) Module["fillVisibilityChangeEventData"] = function() { abort("'fillVisibilityChangeEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerVisibilityChangeEventCallback")) Module["registerVisibilityChangeEventCallback"] = function() { abort("'registerVisibilityChangeEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerTouchEventCallback")) Module["registerTouchEventCallback"] = function() { abort("'registerTouchEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillGamepadEventData")) Module["fillGamepadEventData"] = function() { abort("'fillGamepadEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerGamepadEventCallback")) Module["registerGamepadEventCallback"] = function() { abort("'registerGamepadEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerBeforeUnloadEventCallback")) Module["registerBeforeUnloadEventCallback"] = function() { abort("'registerBeforeUnloadEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillBatteryEventData")) Module["fillBatteryEventData"] = function() { abort("'fillBatteryEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "battery")) Module["battery"] = function() { abort("'battery' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerBatteryEventCallback")) Module["registerBatteryEventCallback"] = function() { abort("'registerBatteryEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setCanvasElementSize")) Module["setCanvasElementSize"] = function() { abort("'setCanvasElementSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCanvasElementSize")) Module["getCanvasElementSize"] = function() { abort("'getCanvasElementSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "polyfillSetImmediate")) Module["polyfillSetImmediate"] = function() { abort("'polyfillSetImmediate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock")) Module["checkWasiClock"] = function() { abort("'checkWasiClock' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "flush_NO_FILESYSTEM")) Module["flush_NO_FILESYSTEM"] = function() { abort("'flush_NO_FILESYSTEM' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "uncaughtExceptionCount")) Module["uncaughtExceptionCount"] = function() { abort("'uncaughtExceptionCount' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionLast")) Module["exceptionLast"] = function() { abort("'exceptionLast' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionCaught")) Module["exceptionCaught"] = function() { abort("'exceptionCaught' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfoAttrs")) Module["ExceptionInfoAttrs"] = function() { abort("'ExceptionInfoAttrs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfo")) Module["ExceptionInfo"] = function() { abort("'ExceptionInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "CatchInfo")) Module["CatchInfo"] = function() { abort("'CatchInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_addRef")) Module["exception_addRef"] = function() { abort("'exception_addRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_decRef")) Module["exception_decRef"] = function() { abort("'exception_decRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "funcWrappers")) Module["funcWrappers"] = function() { abort("'funcWrappers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setMainLoop")) Module["setMainLoop"] = function() { abort("'setMainLoop' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mmapAlloc")) Module["mmapAlloc"] = function() { abort("'mmapAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "_setNetworkCallback")) Module["_setNetworkCallback"] = function() { abort("'_setNetworkCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tempFixedLengthArray")) Module["tempFixedLengthArray"] = function() { abort("'tempFixedLengthArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "miniTempWebGLFloatBuffers")) Module["miniTempWebGLFloatBuffers"] = function() { abort("'miniTempWebGLFloatBuffers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapObjectForWebGLType")) Module["heapObjectForWebGLType"] = function() { abort("'heapObjectForWebGLType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapAccessShiftForWebGLHeap")) Module["heapAccessShiftForWebGLHeap"] = function() { abort("'heapAccessShiftForWebGLHeap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "computeUnpackAlignedImageSize")) Module["computeUnpackAlignedImageSize"] = function() { abort("'computeUnpackAlignedImageSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeGLArray")) Module["writeGLArray"] = function() { abort("'writeGLArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_handle_array")) Module["emval_handle_array"] = function() { abort("'emval_handle_array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_free_list")) Module["emval_free_list"] = function() { abort("'emval_free_list' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_symbols")) Module["emval_symbols"] = function() { abort("'emval_symbols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_emval")) Module["init_emval"] = function() { abort("'init_emval' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "count_emval_handles")) Module["count_emval_handles"] = function() { abort("'count_emval_handles' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "get_first_emval")) Module["get_first_emval"] = function() { abort("'get_first_emval' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getStringOrSymbol")) Module["getStringOrSymbol"] = function() { abort("'getStringOrSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireHandle")) Module["requireHandle"] = function() { abort("'requireHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_newers")) Module["emval_newers"] = function() { abort("'emval_newers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftEmvalAllocator")) Module["craftEmvalAllocator"] = function() { abort("'craftEmvalAllocator' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_get_global")) Module["emval_get_global"] = function() { abort("'emval_get_global' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_methodCallers")) Module["emval_methodCallers"] = function() { abort("'emval_methodCallers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "InternalError")) Module["InternalError"] = function() { abort("'InternalError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "BindingError")) Module["BindingError"] = function() { abort("'BindingError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UnboundTypeError")) Module["UnboundTypeError"] = function() { abort("'UnboundTypeError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PureVirtualError")) Module["PureVirtualError"] = function() { abort("'PureVirtualError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_embind")) Module["init_embind"] = function() { abort("'init_embind' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInternalError")) Module["throwInternalError"] = function() { abort("'throwInternalError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwBindingError")) Module["throwBindingError"] = function() { abort("'throwBindingError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwUnboundTypeError")) Module["throwUnboundTypeError"] = function() { abort("'throwUnboundTypeError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ensureOverloadTable")) Module["ensureOverloadTable"] = function() { abort("'ensureOverloadTable' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exposePublicSymbol")) Module["exposePublicSymbol"] = function() { abort("'exposePublicSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "replacePublicSymbol")) Module["replacePublicSymbol"] = function() { abort("'replacePublicSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "extendError")) Module["extendError"] = function() { abort("'extendError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "createNamedFunction")) Module["createNamedFunction"] = function() { abort("'createNamedFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredInstances")) Module["registeredInstances"] = function() { abort("'registeredInstances' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBasestPointer")) Module["getBasestPointer"] = function() { abort("'getBasestPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerInheritedInstance")) Module["registerInheritedInstance"] = function() { abort("'registerInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unregisterInheritedInstance")) Module["unregisterInheritedInstance"] = function() { abort("'unregisterInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstance")) Module["getInheritedInstance"] = function() { abort("'getInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstanceCount")) Module["getInheritedInstanceCount"] = function() { abort("'getInheritedInstanceCount' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLiveInheritedInstances")) Module["getLiveInheritedInstances"] = function() { abort("'getLiveInheritedInstances' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredTypes")) Module["registeredTypes"] = function() { abort("'registeredTypes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "awaitingDependencies")) Module["awaitingDependencies"] = function() { abort("'awaitingDependencies' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "typeDependencies")) Module["typeDependencies"] = function() { abort("'typeDependencies' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredPointers")) Module["registeredPointers"] = function() { abort("'registeredPointers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerType")) Module["registerType"] = function() { abort("'registerType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "whenDependentTypesAreResolved")) Module["whenDependentTypesAreResolved"] = function() { abort("'whenDependentTypesAreResolved' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_charCodes")) Module["embind_charCodes"] = function() { abort("'embind_charCodes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_init_charCodes")) Module["embind_init_charCodes"] = function() { abort("'embind_init_charCodes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readLatin1String")) Module["readLatin1String"] = function() { abort("'readLatin1String' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTypeName")) Module["getTypeName"] = function() { abort("'getTypeName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heap32VectorToArray")) Module["heap32VectorToArray"] = function() { abort("'heap32VectorToArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireRegisteredType")) Module["requireRegisteredType"] = function() { abort("'requireRegisteredType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getShiftFromSize")) Module["getShiftFromSize"] = function() { abort("'getShiftFromSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "integerReadValueFromPointer")) Module["integerReadValueFromPointer"] = function() { abort("'integerReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "enumReadValueFromPointer")) Module["enumReadValueFromPointer"] = function() { abort("'enumReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "floatReadValueFromPointer")) Module["floatReadValueFromPointer"] = function() { abort("'floatReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "simpleReadValueFromPointer")) Module["simpleReadValueFromPointer"] = function() { abort("'simpleReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runDestructors")) Module["runDestructors"] = function() { abort("'runDestructors' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "new_")) Module["new_"] = function() { abort("'new_' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftInvokerFunction")) Module["craftInvokerFunction"] = function() { abort("'craftInvokerFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind__requireFunction")) Module["embind__requireFunction"] = function() { abort("'embind__requireFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tupleRegistrations")) Module["tupleRegistrations"] = function() { abort("'tupleRegistrations' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "structRegistrations")) Module["structRegistrations"] = function() { abort("'structRegistrations' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "genericPointerToWireType")) Module["genericPointerToWireType"] = function() { abort("'genericPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "constNoSmartPtrRawPointerToWireType")) Module["constNoSmartPtrRawPointerToWireType"] = function() { abort("'constNoSmartPtrRawPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "nonConstNoSmartPtrRawPointerToWireType")) Module["nonConstNoSmartPtrRawPointerToWireType"] = function() { abort("'nonConstNoSmartPtrRawPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_RegisteredPointer")) Module["init_RegisteredPointer"] = function() { abort("'init_RegisteredPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer")) Module["RegisteredPointer"] = function() { abort("'RegisteredPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_getPointee")) Module["RegisteredPointer_getPointee"] = function() { abort("'RegisteredPointer_getPointee' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_destructor")) Module["RegisteredPointer_destructor"] = function() { abort("'RegisteredPointer_destructor' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_deleteObject")) Module["RegisteredPointer_deleteObject"] = function() { abort("'RegisteredPointer_deleteObject' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_fromWireType")) Module["RegisteredPointer_fromWireType"] = function() { abort("'RegisteredPointer_fromWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runDestructor")) Module["runDestructor"] = function() { abort("'runDestructor' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "releaseClassHandle")) Module["releaseClassHandle"] = function() { abort("'releaseClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "finalizationGroup")) Module["finalizationGroup"] = function() { abort("'finalizationGroup' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer_deps")) Module["detachFinalizer_deps"] = function() { abort("'detachFinalizer_deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer")) Module["detachFinalizer"] = function() { abort("'detachFinalizer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "attachFinalizer")) Module["attachFinalizer"] = function() { abort("'attachFinalizer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeClassHandle")) Module["makeClassHandle"] = function() { abort("'makeClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_ClassHandle")) Module["init_ClassHandle"] = function() { abort("'init_ClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle")) Module["ClassHandle"] = function() { abort("'ClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isAliasOf")) Module["ClassHandle_isAliasOf"] = function() { abort("'ClassHandle_isAliasOf' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInstanceAlreadyDeleted")) Module["throwInstanceAlreadyDeleted"] = function() { abort("'throwInstanceAlreadyDeleted' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_clone")) Module["ClassHandle_clone"] = function() { abort("'ClassHandle_clone' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_delete")) Module["ClassHandle_delete"] = function() { abort("'ClassHandle_delete' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "deletionQueue")) Module["deletionQueue"] = function() { abort("'deletionQueue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isDeleted")) Module["ClassHandle_isDeleted"] = function() { abort("'ClassHandle_isDeleted' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_deleteLater")) Module["ClassHandle_deleteLater"] = function() { abort("'ClassHandle_deleteLater' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "flushPendingDeletes")) Module["flushPendingDeletes"] = function() { abort("'flushPendingDeletes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "delayFunction")) Module["delayFunction"] = function() { abort("'delayFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setDelayFunction")) Module["setDelayFunction"] = function() { abort("'setDelayFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredClass")) Module["RegisteredClass"] = function() { abort("'RegisteredClass' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "shallowCopyInternalPointer")) Module["shallowCopyInternalPointer"] = function() { abort("'shallowCopyInternalPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "downcastPointer")) Module["downcastPointer"] = function() { abort("'downcastPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "upcastPointer")) Module["upcastPointer"] = function() { abort("'upcastPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "validateThis")) Module["validateThis"] = function() { abort("'validateThis' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "char_0")) Module["char_0"] = function() { abort("'char_0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "char_9")) Module["char_9"] = function() { abort("'char_9' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeLegalFunctionName")) Module["makeLegalFunctionName"] = function() { abort("'makeLegalFunctionName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  _emscripten_stack_init();
  writeStackCookie();
}

/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush();
  } catch(e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
    warnOnce('(this may also be due to not including full filesystem support - try building with -s FORCE_FILESYSTEM=1)');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      var msg = 'program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
      err(msg);
    }
  } else {

    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);

    ABORT = true;
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

noExitRuntime = true;

run();





